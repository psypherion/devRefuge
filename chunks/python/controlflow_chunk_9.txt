(`*name` must occur before `**name`.) For example, if we define a function like this:

```

    
    
    def cheeseshop(kind, *arguments, **keywords):
      print("-- Do you have any", kind, "?")
      print("-- I'm sorry, we're all out of", kind)
      for arg in arguments:
        print(arg)
      print("-" * 40)
      for kw in keywords:
        print(kw, ":", keywords[kw])
    
```

It could be called like this:

```

    
    
    cheeseshop("Limburger", "It's very runny, sir.",
          "It's really very, VERY runny, sir.",
          shopkeeper="Michael Palin",
          client="John Cleese",
          sketch="Cheese Shop Sketch")
    
```

and of course it would print:

```

    
    
    -- Do you have any Limburger ?
    -- I'm sorry, we're all out of Limburger
    It's very runny, sir.
    It's really very, VERY runny, sir.
    ----------------------------------------
    shopkeeper : Michael Palin
    client : John Cleese
    sketch : Cheese Shop Sketch
    
```

Note that the order in which the keyword arguments are printed is guaranteed to match the order in which they were provided in the function call.

### 4.9.3. Special parameters[¶](#special-parameters "Link to this heading")

By default, arguments may be passed to a Python function either by position or explicitly by keyword. For readability and performance, it makes sense to restrict the way arguments can be passed so that a developer need only look at the function definition to determine if items are passed by position, by position or keyword, or by keyword.

A function definition may look like:

```

    
    
    def f(pos1, pos2, /, pos_or_kwd, *, kwd1, kwd2):
       -----------  ----------   ----------
        |       |         |
        |    Positional or keyword  |
        |                - Keyword only
         -- Positional only
    
```

where `/` and `*` are optional. If used, these symbols indicate the kind of parameter by how the arguments may be passed to the function: positional-only, positional-or-keyword, and keyword-only. Keyword parameters are also referred to as named parameters.

#### 4.9.3.1. Positional-or-Keyword Arguments[¶](#positional-or-keyword-arguments "Link to this heading")

If `/` and `*` are not present in the function definition, arguments may be passed to a function by position or by keyword.

#### 4.9.3.2. Positional-Only Parameters[¶](#positional-only-parameters "Link to this heading")

Looking at this in a bit more detail, it is possible to mark certain parameters as _positional-only_. If _positional-only_ , the parameters’ order matters, and the parameters cannot be passed by keyword. Positional-only parameters are placed before a `/` (forward-slash). The `/` is used to logically separate the positional-only parameters from the rest of the parameters. If there is no `/` in the function definition, there are no positional-only parameters.

Parameters following the `/` may be _positional-or-keyword_ or _keyword-only_.

#### 4.9.3.3. Keyword-Only Arguments[¶](#keyword-only-arguments "Link to this heading")

To mark parameters as _keyword-only_ , indicating the parameters must be passed by keyword argument, place an `*` in the arguments list just before the first _keyword-only_ parameter.

#### 4.9.3.4. Function Examples[¶](#function-examples "Link to this heading")

Consider the following example function definitions paying close attention to the markers `/` and `*`:

>>>```

    
    
    >>> def standard_arg(arg):
    ... print(arg)
    ...
    >>> def pos_only_arg(arg, /):
    ... print(arg)
    ...
    >>> def kwd_only_arg(*, arg):
    ... print(arg)
    ...
    >>> def combined_example(pos_only, /, standard, *, kwd_only):
    ...