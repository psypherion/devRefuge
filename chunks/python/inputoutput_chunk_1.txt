[ ![Python logo](../_static/py.svg) ](https://www.python.org/) dev (3.14)3.13.03.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6

EnglishSpanishFrenchItalianJapaneseKoreanBrazilian PortugueseTurkishSimplified ChineseTraditional Chinese

Theme  Auto Light Dark

### [Table of Contents](../contents.html)

  * [7. Input and Output](#)
    * [7.1. Fancier Output Formatting](#fancier-output-formatting)
      * [7.1.1. Formatted String Literals](#formatted-string-literals)
      * [7.1.2. The String format() Method](#the-string-format-method)
      * [7.1.3. Manual String Formatting](#manual-string-formatting)
      * [7.1.4. Old string formatting](#old-string-formatting)
    * [7.2. Reading and Writing Files](#reading-and-writing-files)
      * [7.2.1. Methods of File Objects](#methods-of-file-objects)
      * [7.2.2. Saving structured data with `json`](#saving-structured-data-with-json)



#### Previous topic

[6. Modules](modules.html "previous chapter")

#### Next topic

[8. Errors and Exceptions](errors.html "next chapter")

### This Page

  * [Report a Bug](../bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/tutorial/inputoutput.rst)



### Navigation

  * [index](../genindex.html "General Index")
  * [modules](../py-modindex.html "Python Module Index") |
  * [next](errors.html "8. Errors and Exceptions") |
  * [previous](modules.html "6. Modules") |
  * ![Python logo](../_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanishFrenchItalianJapaneseKoreanBrazilian PortugueseTurkishSimplified ChineseTraditional Chinese

dev (3.14)3.13.03.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6

  * [3.13.0 Documentation](../index.html) » 
  * [The Python Tutorial](index.html) »
  * [7. Input and Output]()
  * | 
  * Theme  Auto Light Dark |



# 7. Input and Output[¶](#input-and-output "Link to this heading")

There are several ways to present the output of a program; data can be printed in a human-readable form, or written to a file for future use. This chapter will discuss some of the possibilities.

## 7.1. Fancier Output Formatting[¶](#fancier-output-formatting "Link to this heading")

So far we’ve encountered two ways of writing values: _expression statements_ and the [`print()`](../library/functions.html#print "print") function. (A third way is using the [`write()`](../library/io.html#io.TextIOBase.write "io.TextIOBase.write") method of file objects; the standard output file can be referenced as `sys.stdout`. See the Library Reference for more information on this.)

Often you’ll want more control over the formatting of your output than simply printing space-separated values. There are several ways to format output.

  * To use [formatted string literals](#tut-f-strings), begin a string with `f` or `F` before the opening quotation mark or triple quotation mark. Inside this string, you can write a Python expression between `{` and `}` characters that can refer to variables or literal values.

>>>```

    
        >>> year = 2016
    >>> event = 'Referendum'
    >>> f'Results of the {year}{event}'
    'Results of the 2016 Referendum'
    
```

  * The [`str.format()`](../library/stdtypes.html#str.format "str.format") method of strings requires more manual effort. You’ll still use `{` and `}` to mark where a variable will be substituted and can provide detailed formatting directives, but you’ll also need to provide the information to be formatted. In the following code block there are two examples of how to format variables:

>>>```

    
        >>> yes_votes = 42_572_654
    >>> total_votes = 85_705_149
    >>> percentage = yes_votes / total_votes
    >>> '{:-9} YES votes {:2.2%}'.format(yes_votes, percentage)
    ' 42572654 YES votes 49.67%'
    
```

Notice how the `yes_votes` are padded with spaces and a negative sign only for negative numbers. The example also prints `percentage` multiplied by 100, with 2 decimal places and followed by a percent sign (see [Format Specification Mini-Language](../library/string.html#formatspec) for details).

  * Finally, you can do all the string handling yourself by using string slicing and concatenation operations to create any layout you can imagine.