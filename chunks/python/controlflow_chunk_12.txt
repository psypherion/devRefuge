For brevity, it should not explicitly state the object’s name or type, since these are available by other means (except if the name happens to be a verb describing a function’s operation). This line should begin with a capital letter and end with a period.

If there are more lines in the documentation string, the second line should be blank, visually separating the summary from the rest of the description. The following lines should be one or more paragraphs describing the object’s calling conventions, its side effects, etc.

The Python parser does not strip indentation from multi-line string literals in Python, so tools that process documentation have to strip indentation if desired. This is done using the following convention. The first non-blank line _after_ the first line of the string determines the amount of indentation for the entire documentation string. (We can’t use the first line since it is generally adjacent to the string’s opening quotes so its indentation is not apparent in the string literal.) Whitespace “equivalent” to this indentation is then stripped from the start of all lines of the string. Lines that are indented less should not occur, but if they occur all their leading whitespace should be stripped. Equivalence of whitespace should be tested after expansion of tabs (to 8 spaces, normally).

Here is an example of a multi-line docstring:

>>>```

    
    
    >>> def my_function():
    ... """Do nothing, but document it.
    ...
    ... No, really, it doesn't do anything.
    ... """
    ... pass
    ...
    >>> print(my_function.__doc__)
    Do nothing, but document it.
      No, really, it doesn't do anything.
    
```

### 4.9.8. Function Annotations[¶](#function-annotations "Link to this heading")

[Function annotations](../reference/compound_stmts.html#function) are completely optional metadata information about the types used by user-defined functions (see [**PEP 3107**](https://peps.python.org/pep-3107/) and [**PEP 484**](https://peps.python.org/pep-0484/) for more information).

[Annotations](../glossary.html#term-function-annotation) are stored in the `__annotations__` attribute of the function as a dictionary and have no effect on any other part of the function. Parameter annotations are defined by a colon after the parameter name, followed by an expression evaluating to the value of the annotation. Return annotations are defined by a literal `->`, followed by an expression, between the parameter list and the colon denoting the end of the [`def`](../reference/compound_stmts.html#def) statement. The following example has a required argument, an optional argument, and the return value annotated:

>>>```

    
    
    >>> def f(ham: str, eggs: str = 'eggs') -> str:
    ... print("Annotations:", f.__annotations__)
    ... print("Arguments:", ham, eggs)
    ... return ham + ' and ' + eggs
    ...
    >>> f('spam')
    Annotations: {'ham': <class 'str'>, 'return': <class 'str'>, 'eggs': <class 'str'>}
    Arguments: spam eggs
    'spam and eggs'
    
```

## 4.10. Intermezzo: Coding Style[¶](#intermezzo-coding-style "Link to this heading")

Now that you are about to write longer, more complex pieces of Python, it is a good time to talk about _coding style_. Most languages can be written (or more concise, _formatted_) in different styles; some are more readable than others.