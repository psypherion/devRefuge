For example, the length of `word[1:3]` is 2.

Attempting to use an index that is too large will result in an error:

>>>```

    
    
    >>> word[42] # the word only has 6 characters
    Traceback (most recent call last):
     File "<stdin>", line 1, in <module>
    IndexError: string index out of range
    
```

However, out of range slice indexes are handled gracefully when used for slicing:

>>>```

    
    
    >>> word[4:42]
    'on'
    >>> word[42:]
    ''
    
```

Python strings cannot be changed — they are [immutable](../glossary.html#term-immutable). Therefore, assigning to an indexed position in the string results in an error:

>>>```

    
    
    >>> word[0] = 'J'
    Traceback (most recent call last):
     File "<stdin>", line 1, in <module>
    TypeError: 'str' object does not support item assignment
    >>> word[2:] = 'py'
    Traceback (most recent call last):
     File "<stdin>", line 1, in <module>
    TypeError: 'str' object does not support item assignment
    
```

If you need a different string, you should create a new one:

>>>```

    
    
    >>> 'J' + word[1:]
    'Jython'
    >>> word[:2] + 'py'
    'Pypy'
    
```

The built-in function [`len()`](../library/functions.html#len "len") returns the length of a string:

>>>```

    
    
    >>> s = 'supercalifragilisticexpialidocious'
    >>> len(s)
    34
    
```

See also

[Text Sequence Type — str](../library/stdtypes.html#textseq)
    

Strings are examples of _sequence types_ , and support the common operations supported by such types.

[String Methods](../library/stdtypes.html#string-methods)
    

Strings support a large number of methods for basic transformations and searching.

[f-strings](../reference/lexical_analysis.html#f-strings)
    

String literals that have embedded expressions.

[Format String Syntax](../library/string.html#formatstrings)
    

Information about string formatting with [`str.format()`](../library/stdtypes.html#str.format "str.format").

[printf-style String Formatting](../library/stdtypes.html#old-string-formatting)
    

The old formatting operations invoked when strings are the left operand of the `%` operator are described in more detail here.

### 3.1.3. Lists[¶](#lists "Link to this heading")

Python knows a number of _compound_ data types, used to group together other values. The most versatile is the _list_ , which can be written as a list of comma-separated values (items) between square brackets. Lists might contain items of different types, but usually the items all have the same type.

>>>```

    
    
    >>> squares = [1, 4, 9, 16, 25]
    >>> squares
    [1, 4, 9, 16, 25]
    
```

Like strings (and all other built-in [sequence](../glossary.html#term-sequence) types), lists can be indexed and sliced:

>>>```

    
    
    >>> squares[0] # indexing returns the item
    1
    >>> squares[-1]
    25
    >>> squares[-3:] # slicing returns a new list
    [9, 16, 25]
    
```

Lists also support operations like concatenation:

>>>```

    
    
    >>> squares + [36, 49, 64, 81, 100]
    [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
    
```

Unlike strings, which are [immutable](../glossary.html#term-immutable), lists are a [mutable](../glossary.html#term-mutable) type, i.e.