pass # Busy-wait for keyboard interrupt (Ctrl+C)
    ...
    
```

This is commonly used for creating minimal classes:

>>>```

    
    
    >>> class MyEmptyClass:
    ... pass
    ...
    
```

Another place [`pass`](../reference/simple_stmts.html#pass) can be used is as a place-holder for a function or conditional body when you are working on new code, allowing you to keep thinking at a more abstract level. The `pass` is silently ignored:

>>>```

    
    
    >>> def initlog(*args):
    ... pass  # Remember to implement this!
    ...
    
```

## 4.7. `match` Statements[¶](#match-statements "Link to this heading")

A [`match`](../reference/compound_stmts.html#match) statement takes an expression and compares its value to successive patterns given as one or more case blocks. This is superficially similar to a switch statement in C, Java or JavaScript (and many other languages), but it’s more similar to pattern matching in languages like Rust or Haskell. Only the first pattern that matches gets executed and it can also extract components (sequence elements or object attributes) from the value into variables.

The simplest form compares a subject value against one or more literals:

```

    
    
    def http_error(status):
      match status:
        case 400:
          return "Bad request"
        case 404:
          return "Not found"
        case 418:
          return "I'm a teapot"
        case_:
          return "Something's wrong with the internet"
    
```

Note the last block: the “variable name” `_` acts as a _wildcard_ and never fails to match. If no case matches, none of the branches is executed.

You can combine several literals in a single pattern using `|` (“or”):

```

    
    
    case 401 | 403 | 404:
      return "Not allowed"
    
```

Patterns can look like unpacking assignments, and can be used to bind variables:

```

    
    
    # point is an (x, y) tuple
    match point:
      case (0, 0):
        print("Origin")
      case (0, y):
        print(f"Y={y}")
      case (x, 0):
        print(f"X={x}")
      case (x, y):
        print(f"X={x}, Y={y}")
      case_:
        raise ValueError("Not a point")
    
```

Study that one carefully! The first pattern has two literals, and can be thought of as an extension of the literal pattern shown above. But the next two patterns combine a literal and a variable, and the variable _binds_ a value from the subject (`point`). The fourth pattern captures two values, which makes it conceptually similar to the unpacking assignment `(x, y) = point`.

If you are using classes to structure your data you can use the class name followed by an argument list resembling a constructor, but with the ability to capture attributes into variables:

```

    
    
    class Point:
      def __init__(self, x, y):
        self.x = x
        self.y = y
    def where_is(point):
      match point:
        case Point(x=0, y=0):
          print("Origin")
        case Point(x=0, y=y):
          print(f"Y={y}")
        case Point(x=x, y=0):
          print(f"X={x}")
        case Point():
          print("Somewhere else")
        case_:
          print("Not a point")
    
```

You can use positional parameters with some builtin classes that provide an ordering for their attributes (e.g. dataclasses). You can also define a specific position for attributes in patterns by setting the `__match_args__` special attribute in your classes.