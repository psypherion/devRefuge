Templating[¶](#templating "Link to this heading")

The [`string`](../library/string.html#module-string "string: Common string operations.") module includes a versatile [`Template`](../library/string.html#string.Template "string.Template") class with a simplified syntax suitable for editing by end-users. This allows users to customize their applications without having to alter the application.

The format uses placeholder names formed by `$` with valid Python identifiers (alphanumeric characters and underscores). Surrounding the placeholder with braces allows it to be followed by more alphanumeric letters with no intervening spaces. Writing `$$` creates a single escaped `$`:

>>>```

    
    
    >>> from string import Template
    >>> t = Template('${village}folk send $$10 to $cause.')
    >>> t.substitute(village='Nottingham', cause='the ditch fund')
    'Nottinghamfolk send $10 to the ditch fund.'
    
```

The [`substitute()`](../library/string.html#string.Template.substitute "string.Template.substitute") method raises a [`KeyError`](../library/exceptions.html#KeyError "KeyError") when a placeholder is not supplied in a dictionary or a keyword argument. For mail-merge style applications, user supplied data may be incomplete and the [`safe_substitute()`](../library/string.html#string.Template.safe_substitute "string.Template.safe_substitute") method may be more appropriate — it will leave placeholders unchanged if data is missing:

>>>```

    
    
    >>> t = Template('Return the $item to $owner.')
    >>> d = dict(item='unladen swallow')
    >>> t.substitute(d)
    Traceback (most recent call last):
    ...
    KeyError: 'owner'
    >>> t.safe_substitute(d)
    'Return the unladen swallow to $owner.'
    
```

Template subclasses can specify a custom delimiter. For example, a batch renaming utility for a photo browser may elect to use percent signs for placeholders such as the current date, image sequence number, or file format:

>>>```

    
    
    >>> import time, os.path
    >>> photofiles = ['img_1074.jpg', 'img_1076.jpg', 'img_1077.jpg']
    >>> class BatchRename(Template):
    ... delimiter = '%'
    ...
    >>> fmt = input('Enter rename style (%d-date %n-seqnum %f-format): ')
    Enter rename style (%d-date %n-seqnum %f-format): Ashley_%n%f
    >>> t = BatchRename(fmt)
    >>> date = time.strftime('%d%b%y')
    >>> for i, filename in enumerate(photofiles):
    ... base, ext = os.path.splitext(filename)
    ... newname = t.substitute(d=date, n=i, f=ext)
    ... print('{0} --> {1}'.format(filename, newname))
    img_1074.jpg --> Ashley_0.jpg
    img_1076.jpg --> Ashley_1.jpg
    img_1077.jpg --> Ashley_2.jpg
    
```

Another application for templating is separating program logic from the details of multiple output formats. This makes it possible to substitute custom templates for XML files, plain text reports, and HTML web reports.

## 11.3. Working with Binary Data Record Layouts[¶](#working-with-binary-data-record-layouts "Link to this heading")

The [`struct`](../library/struct.html#module-struct "struct: Interpret bytes as packed binary data.") module provides [`pack()`](../library/struct.html#struct.pack "struct.pack") and [`unpack()`](../library/struct.html#struct.unpack "struct.unpack") functions for working with variable length binary record formats. The following example shows how to loop through header information in a ZIP file without using the [`zipfile`](../library/zipfile.html#module-zipfile "zipfile: Read and write ZIP-format archive files.") module. Pack codes `"H"` and `"I"` represent two and four byte unsigned numbers respectively. The `"<"` indicates that they are standard size and in little-endian byte order:

```

    
    
    import struct
    with open('myfile.zip', 'rb') as f:
      data = f.read()
    start = 0
    for i in range(3):           # show the first 3 file headers
      start += 14
      fields = struct.unpack('<IIIHH', data[start:start+16])
      crc32, comp_size, uncomp_size, filenamesize, extra_size = fields
      start += 16
      filename = data[start:start+filenamesize]
      start += filenamesize
      extra = data[start:start+extra_size]
      print(filename, hex(crc32), comp_size, uncomp_size)
      start += extra_size + comp_size   # skip to the next header
    
```

## 11.4. Multi-threading[¶](#multi-threading "Link to this heading")

Threading is a technique for decoupling tasks which are not sequentially dependent.