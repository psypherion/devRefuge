The following script extracts one or more filenames and an optional number of lines to be displayed:

```

    
    
    import argparse
    parser = argparse.ArgumentParser(
      prog='top',
      description='Show top lines from each file')
    parser.add_argument('filenames', nargs='+')
    parser.add_argument('-l', '--lines', type=int, default=10)
    args = parser.parse_args()
    print(args)
    
```

When run at the command line with `python top.py --lines=5 alpha.txt beta.txt`, the script sets `args.lines` to `5` and `args.filenames` to `['alpha.txt', 'beta.txt']`.

## 10.4. Error Output Redirection and Program Termination[¶](#error-output-redirection-and-program-termination "Link to this heading")

The [`sys`](../library/sys.html#module-sys "sys: Access system-specific parameters and functions.") module also has attributes for _stdin_ , _stdout_ , and _stderr_. The latter is useful for emitting warnings and error messages to make them visible even when _stdout_ has been redirected:

>>>```

    
    
    >>> sys.stderr.write('Warning, log file not found starting a new one\n')
    Warning, log file not found starting a new one
    
```

The most direct way to terminate a script is to use `sys.exit()`.

## 10.5. String Pattern Matching[¶](#string-pattern-matching "Link to this heading")

The [`re`](../library/re.html#module-re "re: Regular expression operations.") module provides regular expression tools for advanced string processing. For complex matching and manipulation, regular expressions offer succinct, optimized solutions:

>>>```

    
    
    >>> import re
    >>> re.findall(r'\bf[a-z]*', 'which foot or hand fell fastest')
    ['foot', 'fell', 'fastest']
    >>> re.sub(r'(\b[a-z]+) \1', r'\1', 'cat in the the hat')
    'cat in the hat'
    
```

When only simple capabilities are needed, string methods are preferred because they are easier to read and debug:

>>>```

    
    
    >>> 'tea for too'.replace('too', 'two')
    'tea for two'
    
```

## 10.6. Mathematics[¶](#mathematics "Link to this heading")

The [`math`](../library/math.html#module-math "math: Mathematical functions \(sin\(\) etc.\).") module gives access to the underlying C library functions for floating-point math:

>>>```

    
    
    >>> import math
    >>> math.cos(math.pi / 4)
    0.70710678118654757
    >>> math.log(1024, 2)
    10.0
    
```

The [`random`](../library/random.html#module-random "random: Generate pseudo-random numbers with various common distributions.") module provides tools for making random selections:

>>>```

    
    
    >>> import random
    >>> random.choice(['apple', 'pear', 'banana'])
    'apple'
    >>> random.sample(range(100), 10)  # sampling without replacement
    [30, 83, 16, 4, 8, 81, 41, 50, 18, 33]
    >>> random.random()  # random float from the interval [0.0, 1.0)
    0.17970987693706186
    >>> random.randrange(6)  # random integer chosen from range(6)
    4
    
```

The [`statistics`](../library/statistics.html#module-statistics "statistics: Mathematical statistics functions") module calculates basic statistical properties (the mean, median, variance, etc.) of numeric data:

>>>```

    
    
    >>> import statistics
    >>> data = [2.75, 1.75, 1.25, 0.25, 0.5, 1.25, 3.5]
    >>> statistics.mean(data)
    1.6071428571428572
    >>> statistics.median(data)
    1.25
    >>> statistics.variance(data)
    1.3720238095238095
    
```

The SciPy project <<https://scipy.org>> has many other modules for numerical computations.

## 10.7. Internet Access[¶](#internet-access "Link to this heading")

There are a number of modules for accessing the internet and processing internet protocols. Two of the simplest are [`urllib.request`](../library/urllib.request.html#module-urllib.request "urllib.request: Extensible library for opening URLs.") for retrieving data from URLs and [`smtplib`](../library/smtplib.html#module-smtplib "smtplib: SMTP protocol client \(requires sockets\).") for sending mail:

>>>```

    
    
    >>> from urllib.request import urlopen
    >>> with urlopen('http://worldtimeapi.org/api/timezone/etc/UTC.txt') as response:
    ... for line in response:
    ... line = line.decode()       # Convert bytes to a str
    ... if line.startswith('datetime'):
    ... print(line.rstrip())     # Remove trailing newline
    ...
    datetime: 2022-01-01T01:36:47.689215+00:00
    >>> import smtplib
    >>> server = smtplib.SMTP('localhost')
    >>> server.sendmail('soothsayer@example.org', 'jcaesar@example.org',
    ... """To: jcaesar@example.org
    ... From: soothsayer@example.org
    ...
    ... Beware the Ides of March.
    ...