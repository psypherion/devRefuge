Decimal Floating-Point Arithmetic[¶](#decimal-floating-point-arithmetic "Link to this heading")

The [`decimal`](../library/decimal.html#module-decimal "decimal: Implementation of the General Decimal Arithmetic Specification.") module offers a [`Decimal`](../library/decimal.html#decimal.Decimal "decimal.Decimal") datatype for decimal floating-point arithmetic. Compared to the built-in [`float`](../library/functions.html#float "float") implementation of binary floating point, the class is especially helpful for

  * financial applications and other uses which require exact decimal representation,

  * control over precision,

  * control over rounding to meet legal or regulatory requirements,

  * tracking of significant decimal places, or

  * applications where the user expects the results to match calculations done by hand.




For example, calculating a 5% tax on a 70 cent phone charge gives different results in decimal floating point and binary floating point. The difference becomes significant if the results are rounded to the nearest cent:

>>>```

    
    
    >>> from decimal import *
    >>> round(Decimal('0.70') * Decimal('1.05'), 2)
    Decimal('0.74')
    >>> round(.70 * 1.05, 2)
    0.73
    
```

The [`Decimal`](../library/decimal.html#decimal.Decimal "decimal.Decimal") result keeps a trailing zero, automatically inferring four place significance from multiplicands with two place significance. Decimal reproduces mathematics as done by hand and avoids issues that can arise when binary floating point cannot exactly represent decimal quantities.

Exact representation enables the [`Decimal`](../library/decimal.html#decimal.Decimal "decimal.Decimal") class to perform modulo calculations and equality tests that are unsuitable for binary floating point:

>>>```

    
    
    >>> Decimal('1.00') % Decimal('.10')
    Decimal('0.00')
    >>> 1.00 % 0.10
    0.09999999999999995
    >>> sum([Decimal('0.1')]*10) == Decimal('1.0')
    True
    >>> 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 == 1.0
    False
    
```

The [`decimal`](../library/decimal.html#module-decimal "decimal: Implementation of the General Decimal Arithmetic Specification.") module provides arithmetic with as much precision as needed:

>>>```

    
    
    >>> getcontext().prec = 36
    >>> Decimal(1) / Decimal(7)
    Decimal('0.142857142857142857142857142857142857')
    
```

### [Table of Contents](../contents.html)

  * [11. Brief Tour of the Standard Library — Part II](#)
    * [11.1. Output Formatting](#output-formatting)
    * [11.2. Templating](#templating)
    * [11.3. Working with Binary Data Record Layouts](#working-with-binary-data-record-layouts)
    * [11.4. Multi-threading](#multi-threading)
    * [11.5. Logging](#logging)
    * [11.6. Weak References](#weak-references)
    * [11.7. Tools for Working with Lists](#tools-for-working-with-lists)
    * [11.8. Decimal Floating-Point Arithmetic](#decimal-floating-point-arithmetic)



#### Previous topic

[10. Brief Tour of the Standard Library](stdlib.html "previous chapter")

#### Next topic

[12. Virtual Environments and Packages](venv.html "next chapter")

### This Page

  * [Report a Bug](../bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/tutorial/stdlib2.rst)



«

### Navigation

  * [index](../genindex.html "General Index")
  * [modules](../py-modindex.html "Python Module Index") |
  * [next](venv.html "12. Virtual Environments and Packages") |
  * [previous](stdlib.html "10. Brief Tour of the Standard Library") |
  * ![Python logo](../_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanishFrenchItalianJapaneseKoreanBrazilian PortugueseTurkishSimplified ChineseTraditional Chinese

dev (3.14)3.13.03.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6

  * [3.13.0 Documentation](../index.html) » 
  * [The Python Tutorial](index.html) »
  * [11. Brief Tour of the Standard Library — Part II]()
  * | 
  * Theme  Auto Light Dark |



© [ Copyright ](../copyright.html) 2001-2024, Python Software Foundation. This page is licensed under the Python Software Foundation License Version 2. Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License. See [History and License](/license.html) for more information. The Python Software Foundation is a non-profit corporation. [Please donate.](https://www.python.org/psf/donations/) Last updated on Nov 07, 2024 (15:51 UTC). [Found a bug](/bugs.html)? Created using [Sphinx](https://www.sphinx-doc.org/) 8.1.3. 
