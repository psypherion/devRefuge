print(i, v)
    ...
    0 tic
    1 tac
    2 toe
    
```

To loop over two or more sequences at the same time, the entries can be paired with the [`zip()`](../library/functions.html#zip "zip") function.

>>>```

    
    
    >>> questions = ['name', 'quest', 'favorite color']
    >>> answers = ['lancelot', 'the holy grail', 'blue']
    >>> for q, a in zip(questions, answers):
    ... print('What is your {0}? It is {1}.'.format(q, a))
    ...
    What is your name? It is lancelot.
    What is your quest? It is the holy grail.
    What is your favorite color? It is blue.
    
```

To loop over a sequence in reverse, first specify the sequence in a forward direction and then call the [`reversed()`](../library/functions.html#reversed "reversed") function.

>>>```

    
    
    >>> for i in reversed(range(1, 10, 2)):
    ... print(i)
    ...
    9
    7
    5
    3
    1
    
```

To loop over a sequence in sorted order, use the [`sorted()`](../library/functions.html#sorted "sorted") function which returns a new sorted list while leaving the source unaltered.

>>>```

    
    
    >>> basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']
    >>> for i in sorted(basket):
    ... print(i)
    ...
    apple
    apple
    banana
    orange
    orange
    pear
    
```

Using [`set()`](../library/stdtypes.html#set "set") on a sequence eliminates duplicate elements. The use of [`sorted()`](../library/functions.html#sorted "sorted") in combination with [`set()`](../library/stdtypes.html#set "set") over a sequence is an idiomatic way to loop over unique elements of the sequence in sorted order.

>>>```

    
    
    >>> basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']
    >>> for f in sorted(set(basket)):
    ... print(f)
    ...
    apple
    banana
    orange
    pear
    
```

It is sometimes tempting to change a list while you are looping over it; however, it is often simpler and safer to create a new list instead.

>>>```

    
    
    >>> import math
    >>> raw_data = [56.2, float('NaN'), 51.7, 55.3, 52.5, float('NaN'), 47.8]
    >>> filtered_data = []
    >>> for value in raw_data:
    ... if not math.isnan(value):
    ... filtered_data.append(value)
    ...
    >>> filtered_data
    [56.2, 51.7, 55.3, 52.5, 47.8]
    
```

## 5.7. More on Conditions[Â¶](#more-on-conditions "Link to this heading")

The conditions used in `while` and `if` statements can contain any operators, not just comparisons.

The comparison operators `in` and `not in` are membership tests that determine whether a value is in (or not in) a container. The operators `is` and `is not` compare whether two objects are really the same object. All comparison operators have the same priority, which is lower than that of all numerical operators.

Comparisons can be chained. For example, `a < b == c` tests whether `a` is less than `b` and moreover `b` equals `c`.

Comparisons may be combined using the Boolean operators `and` and `or`, and the outcome of a comparison (or of any other Boolean expression) may be negated with `not`. These have lower priorities than comparison operators; between them, `not` has the highest priority and `or` the lowest, so that `A and not B or C` is equivalent to `(A and (not B)) or C`. As always, parentheses can be used to express the desired composition.

The Boolean operators `and` and `or` are so-called _short-circuit_ operators: their arguments are evaluated from left to right, and evaluation stops as soon as the outcome is determined.