raise RuntimeError('Failed to open database') from exc
    ...
    Traceback (most recent call last):
     File "<stdin>", line 2, in <module>
    func()
    ~~~~^^
     File "<stdin>", line 2, in func
    ConnectionError
    The above exception was the direct cause of the following exception:
    Traceback (most recent call last):
     File "<stdin>", line 4, in <module>
    raise RuntimeError('Failed to open database') from exc
    RuntimeError: Failed to open database
    
```

It also allows disabling automatic exception chaining using the `from None` idiom:

>>>```

    
    
    >>> try:
    ... open('database.sqlite')
    ... except OSError:
    ... raise RuntimeError from None
    ...
    Traceback (most recent call last):
     File "<stdin>", line 4, in <module>
    raise RuntimeError from None
    RuntimeError
    
```

For more information about chaining mechanics, see [Built-in Exceptions](../library/exceptions.html#bltin-exceptions).

## 8.6. User-defined Exceptions[¶](#user-defined-exceptions "Link to this heading")

Programs may name their own exceptions by creating a new exception class (see [Classes](classes.html#tut-classes) for more about Python classes). Exceptions should typically be derived from the [`Exception`](../library/exceptions.html#Exception "Exception") class, either directly or indirectly.

Exception classes can be defined which do anything any other class can do, but are usually kept simple, often only offering a number of attributes that allow information about the error to be extracted by handlers for the exception.

Most exceptions are defined with names that end in “Error”, similar to the naming of the standard exceptions.

Many standard modules define their own exceptions to report errors that may occur in functions they define.

## 8.7. Defining Clean-up Actions[¶](#defining-clean-up-actions "Link to this heading")

The [`try`](../reference/compound_stmts.html#try) statement has another optional clause which is intended to define clean-up actions that must be executed under all circumstances. For example:

>>>```

    
    
    >>> try:
    ... raise KeyboardInterrupt
    ... finally:
    ... print('Goodbye, world!')
    ...
    Goodbye, world!
    Traceback (most recent call last):
     File "<stdin>", line 2, in <module>
    raise KeyboardInterrupt
    KeyboardInterrupt
    
```

If a [`finally`](../reference/compound_stmts.html#finally) clause is present, the `finally` clause will execute as the last task before the [`try`](../reference/compound_stmts.html#try) statement completes. The `finally` clause runs whether or not the `try` statement produces an exception. The following points discuss more complex cases when an exception occurs:

  * If an exception occurs during execution of the `try` clause, the exception may be handled by an [`except`](../reference/compound_stmts.html#except) clause. If the exception is not handled by an `except` clause, the exception is re-raised after the `finally` clause has been executed.

  * An exception could occur during execution of an `except` or `else` clause. Again, the exception is re-raised after the `finally` clause has been executed.

  * If the `finally` clause executes a [`break`](../reference/simple_stmts.html#break), [`continue`](../reference/simple_stmts.html#continue) or [`return`](../reference/simple_stmts.html#return) statement, exceptions are not re-raised.

  * If the `try` statement reaches a [`break`](../reference/simple_stmts.html#break), [`continue`](../reference/simple_stmts.html#continue) or [`return`](../reference/simple_stmts.html#return) statement, the `finally` clause will execute just prior to the `break`, `continue` or `return` statement’s execution.

  * If a `finally` clause includes a `return` statement, the returned value will be the one from the `finally` clause’s `return` statement, not the value from the `try` clause’s `return` statement.




For example:

>>>```

    
    
    >>> def bool_return():
    ... try:
    ... return True
    ... finally:
    ... return False
    ...
    >>> bool_return()
    False
    
```

A more complicated example:

>>>```

    
    
    >>> def divide(x, y):
    ... try:
    ...