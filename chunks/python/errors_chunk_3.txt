For example, the following code will print B, C, D in that order:

```

    
    
    class B(Exception):
      pass
    class C(B):
      pass
    class D(C):
      pass
    for cls in [B, C, D]:
      try:
        raise cls()
      except D:
        print("D")
      except C:
        print("C")
      except B:
        print("B")
    
```

Note that if the _except clauses_ were reversed (with `except B` first), it would have printed B, B, B — the first matching _except clause_ is triggered.

When an exception occurs, it may have associated values, also known as the exception’s _arguments_. The presence and types of the arguments depend on the exception type.

The _except clause_ may specify a variable after the exception name. The variable is bound to the exception instance which typically has an `args` attribute that stores the arguments. For convenience, builtin exception types define [`__str__()`](../reference/datamodel.html#object.__str__ "object.__str__") to print all the arguments without explicitly accessing `.args`.

>>>```

    
    
    >>> try:
    ... raise Exception('spam', 'eggs')
    ... except Exception as inst:
    ... print(type(inst))  # the exception type
    ... print(inst.args)   # arguments stored in .args
    ... print(inst)     # __str__ allows args to be printed directly,
    ... # but may be overridden in exception subclasses
    ... x, y = inst.args   # unpack args
    ... print('x =', x)
    ... print('y =', y)
    ...
    <class 'Exception'>
    ('spam', 'eggs')
    ('spam', 'eggs')
    x = spam
    y = eggs
    
```

The exception’s [`__str__()`](../reference/datamodel.html#object.__str__ "object.__str__") output is printed as the last part (‘detail’) of the message for unhandled exceptions.

[`BaseException`](../library/exceptions.html#BaseException "BaseException") is the common base class of all exceptions. One of its subclasses, [`Exception`](../library/exceptions.html#Exception "Exception"), is the base class of all the non-fatal exceptions. Exceptions which are not subclasses of [`Exception`](../library/exceptions.html#Exception "Exception") are not typically handled, because they are used to indicate that the program should terminate. They include [`SystemExit`](../library/exceptions.html#SystemExit "SystemExit") which is raised by [`sys.exit()`](../library/sys.html#sys.exit "sys.exit") and [`KeyboardInterrupt`](../library/exceptions.html#KeyboardInterrupt "KeyboardInterrupt") which is raised when a user wishes to interrupt the program.

[`Exception`](../library/exceptions.html#Exception "Exception") can be used as a wildcard that catches (almost) everything. However, it is good practice to be as specific as possible with the types of exceptions that we intend to handle, and to allow any unexpected exceptions to propagate on.

The most common pattern for handling [`Exception`](../library/exceptions.html#Exception "Exception") is to print or log the exception and then re-raise it (allowing a caller to handle the exception as well):

```

    
    
    import sys
    try:
      f = open('myfile.txt')
      s = f.readline()
      i = int(s.strip())
    except OSError as err:
      print("OS error:", err)
    except ValueError:
      print("Could not convert data to an integer.")
    except Exception as err:
      print(f"Unexpected {err=}, {type(err)=}")
      raise
    
```

The [`try`](../reference/compound_stmts.html#try) … [`except`](../reference/compound_stmts.html#except) statement has an optional _else clause_ , which, when present, must follow all _except clauses_. It is useful for code that must be executed if the _try clause_ does not raise an exception.