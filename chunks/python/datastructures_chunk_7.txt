Unlike sequences, which are indexed by a range of numbers, dictionaries are indexed by _keys_ , which can be any immutable type; strings and numbers can always be keys. Tuples can be used as keys if they contain only strings, numbers, or tuples; if a tuple contains any mutable object either directly or indirectly, it cannot be used as a key. You can’t use lists as keys, since lists can be modified in place using index assignments, slice assignments, or methods like `append()` and `extend()`.

It is best to think of a dictionary as a set of _key: value_ pairs, with the requirement that the keys are unique (within one dictionary). A pair of braces creates an empty dictionary: `{}`. Placing a comma-separated list of key:value pairs within the braces adds initial key:value pairs to the dictionary; this is also the way dictionaries are written on output.

The main operations on a dictionary are storing a value with some key and extracting the value given the key. It is also possible to delete a key:value pair with `del`. If you store using a key that is already in use, the old value associated with that key is forgotten. It is an error to extract a value using a non-existent key.

Performing `list(d)` on a dictionary returns a list of all the keys used in the dictionary, in insertion order (if you want it sorted, just use `sorted(d)` instead). To check whether a single key is in the dictionary, use the [`in`](../reference/expressions.html#in) keyword.

Here is a small example using a dictionary:

>>>```

    
    
    >>> tel = {'jack': 4098, 'sape': 4139}
    >>> tel['guido'] = 4127
    >>> tel
    {'jack': 4098, 'sape': 4139, 'guido': 4127}
    >>> tel['jack']
    4098
    >>> del tel['sape']
    >>> tel['irv'] = 4127
    >>> tel
    {'jack': 4098, 'guido': 4127, 'irv': 4127}
    >>> list(tel)
    ['jack', 'guido', 'irv']
    >>> sorted(tel)
    ['guido', 'irv', 'jack']
    >>> 'guido' in tel
    True
    >>> 'jack' not in tel
    False
    
```

The [`dict()`](../library/stdtypes.html#dict "dict") constructor builds dictionaries directly from sequences of key-value pairs:

>>>```

    
    
    >>> dict([('sape', 4139), ('guido', 4127), ('jack', 4098)])
    {'sape': 4139, 'guido': 4127, 'jack': 4098}
    
```

In addition, dict comprehensions can be used to create dictionaries from arbitrary key and value expressions:

>>>```

    
    
    >>> {x: x**2 for x in (2, 4, 6)}
    {2: 4, 4: 16, 6: 36}
    
```

When the keys are simple strings, it is sometimes easier to specify pairs using keyword arguments:

>>>```

    
    
    >>> dict(sape=4139, guido=4127, jack=4098)
    {'sape': 4139, 'guido': 4127, 'jack': 4098}
    
```

## 5.6. Looping Techniques[¶](#looping-techniques "Link to this heading")

When looping through dictionaries, the key and corresponding value can be retrieved at the same time using the [`items()`](../library/stdtypes.html#dict.items "dict.items") method.

>>>```

    
    
    >>> knights = {'gallahad': 'the pure', 'robin': 'the brave'}
    >>> for k, v in knights.items():
    ... print(k, v)
    ...
    gallahad the pure
    robin the brave
    
```

When looping through a sequence, the position index and corresponding value can be retrieved at the same time using the [`enumerate()`](../library/functions.html#enumerate "enumerate") function.

>>>```

    
    
    >>> for i, v in enumerate(['tic', 'tac', 'toe']):
    ...