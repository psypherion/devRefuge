it is possible to change their content:

>>>```

    
    
    >>> cubes = [1, 8, 27, 65, 125] # something's wrong here
    >>> 4 ** 3 # the cube of 4 is 64, not 65!
    64
    >>> cubes[3] = 64 # replace the wrong value
    >>> cubes
    [1, 8, 27, 64, 125]
    
```

You can also add new items at the end of the list, by using the `list.append()` _method_ (we will see more about methods later):

>>>```

    
    
    >>> cubes.append(216) # add the cube of 6
    >>> cubes.append(7 ** 3) # and the cube of 7
    >>> cubes
    [1, 8, 27, 64, 125, 216, 343]
    
```

Simple assignment in Python never copies data. When you assign a list to a variable, the variable refers to the _existing list_. Any changes you make to the list through one variable will be seen through all other variables that refer to it.:

>>>```

    
    
    >>> rgb = ["Red", "Green", "Blue"]
    >>> rgba = rgb
    >>> id(rgb) == id(rgba) # they reference the same object
    True
    >>> rgba.append("Alph")
    >>> rgb
    ["Red", "Green", "Blue", "Alph"]
    
```

All slice operations return a new list containing the requested elements. This means that the following slice returns a [shallow copy](../library/copy.html#shallow-vs-deep-copy) of the list:

>>>```

    
    
    >>> correct_rgba = rgba[:]
    >>> correct_rgba[-1] = "Alpha"
    >>> correct_rgba
    ["Red", "Green", "Blue", "Alpha"]
    >>> rgba
    ["Red", "Green", "Blue", "Alph"]
    
```

Assignment to slices is also possible, and this can even change the size of the list or clear it entirely:

>>>```

    
    
    >>> letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
    >>> letters
    ['a', 'b', 'c', 'd', 'e', 'f', 'g']
    >>> # replace some values
    >>> letters[2:5] = ['C', 'D', 'E']
    >>> letters
    ['a', 'b', 'C', 'D', 'E', 'f', 'g']
    >>> # now remove them
    >>> letters[2:5] = []
    >>> letters
    ['a', 'b', 'f', 'g']
    >>> # clear the list by replacing all the elements with an empty list
    >>> letters[:] = []
    >>> letters
    []
    
```

The built-in function [`len()`](../library/functions.html#len "len") also applies to lists:

>>>```

    
    
    >>> letters = ['a', 'b', 'c', 'd']
    >>> len(letters)
    4
    
```

It is possible to nest lists (create lists containing other lists), for example:

>>>```

    
    
    >>> a = ['a', 'b', 'c']
    >>> n = [1, 2, 3]
    >>> x = [a, n]
    >>> x
    [['a', 'b', 'c'], [1, 2, 3]]
    >>> x[0]
    ['a', 'b', 'c']
    >>> x[0][1]
    'b'
    
```

## 3.2. First Steps Towards Programming[Â¶](#first-steps-towards-programming "Link to this heading")

Of course, we can use Python for more complicated tasks than adding two and two together. For instance, we can write an initial sub-sequence of the [Fibonacci series](https://en.wikipedia.org/wiki/Fibonacci_sequence) as follows:

>>>```

    
    
    >>> # Fibonacci series:
    >>> # the sum of two elements defines the next
    >>> a, b = 0, 1
    >>> while a < 10:
    ... print(a)
    ... a, b = b, a+b
    ...
    0
    1
    1
    2
    3
    5
    8
    
```

This example introduces several new features.

  * The first line contains a _multiple assignment_ : the variables `a` and `b` simultaneously get the new values 0 and 1.