[ ![Python logo](../_static/py.svg) ](https://www.python.org/) dev (3.14)3.13.03.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6

EnglishSpanishFrenchItalianJapaneseKoreanBrazilian PortugueseTurkishSimplified ChineseTraditional Chinese

Theme  Auto Light Dark

### [Table of Contents](../contents.html)

  * [9. Classes](#)
    * [9.1. A Word About Names and Objects](#a-word-about-names-and-objects)
    * [9.2. Python Scopes and Namespaces](#python-scopes-and-namespaces)
      * [9.2.1. Scopes and Namespaces Example](#scopes-and-namespaces-example)
    * [9.3. A First Look at Classes](#a-first-look-at-classes)
      * [9.3.1. Class Definition Syntax](#class-definition-syntax)
      * [9.3.2. Class Objects](#class-objects)
      * [9.3.3. Instance Objects](#instance-objects)
      * [9.3.4. Method Objects](#method-objects)
      * [9.3.5. Class and Instance Variables](#class-and-instance-variables)
    * [9.4. Random Remarks](#random-remarks)
    * [9.5. Inheritance](#inheritance)
      * [9.5.1. Multiple Inheritance](#multiple-inheritance)
    * [9.6. Private Variables](#private-variables)
    * [9.7. Odds and Ends](#odds-and-ends)
    * [9.8. Iterators](#iterators)
    * [9.9. Generators](#generators)
    * [9.10. Generator Expressions](#generator-expressions)



#### Previous topic

[8. Errors and Exceptions](errors.html "previous chapter")

#### Next topic

[10. Brief Tour of the Standard Library](stdlib.html "next chapter")

### This Page

  * [Report a Bug](../bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/tutorial/classes.rst)



### Navigation

  * [index](../genindex.html "General Index")
  * [modules](../py-modindex.html "Python Module Index") |
  * [next](stdlib.html "10. Brief Tour of the Standard Library") |
  * [previous](errors.html "8. Errors and Exceptions") |
  * ![Python logo](../_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanishFrenchItalianJapaneseKoreanBrazilian PortugueseTurkishSimplified ChineseTraditional Chinese

dev (3.14)3.13.03.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6

  * [3.13.0 Documentation](../index.html) » 
  * [The Python Tutorial](index.html) »
  * [9. Classes]()
  * | 
  * Theme  Auto Light Dark |



# 9. Classes[¶](#classes "Link to this heading")

Classes provide a means of bundling data and functionality together. Creating a new class creates a new _type_ of object, allowing new _instances_ of that type to be made. Each class instance can have attributes attached to it for maintaining its state. Class instances can also have methods (defined by its class) for modifying its state.

Compared with other programming languages, Python’s class mechanism adds classes with a minimum of new syntax and semantics. It is a mixture of the class mechanisms found in C++ and Modula-3. Python classes provide all the standard features of Object Oriented Programming: the class inheritance mechanism allows multiple base classes, a derived class can override any methods of its base class or classes, and a method can call the method of a base class with the same name. Objects can contain arbitrary amounts and kinds of data. As is true for modules, classes partake of the dynamic nature of Python: they are created at runtime, and can be modified further after creation.

In C++ terminology, normally class members (including the data members) are _public_ (except see below [Private Variables](#tut-private)), and all member functions are _virtual_. As in Modula-3, there are no shorthands for referencing the object’s members from its methods: the method function is declared with an explicit first argument representing the object, which is provided implicitly by the call. As in Smalltalk, classes themselves are objects. This provides semantics for importing and renaming. Unlike C++ and Modula-3, built-in types can be used as base classes for extension by the user. Also, like in C++, most built-in operators with special syntax (arithmetic operators, subscripting etc.) can be redefined for class instances.

(Lacking universally accepted terminology to talk about classes, I will make occasional use of Smalltalk and C++ terms.