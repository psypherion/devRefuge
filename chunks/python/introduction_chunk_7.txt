On the last line this is used again, demonstrating that the expressions on the right-hand side are all evaluated first before any of the assignments take place. The right-hand side expressions are evaluated from the left to the right.

  * The [`while`](../reference/compound_stmts.html#while) loop executes as long as the condition (here: `a < 10`) remains true. In Python, like in C, any non-zero integer value is true; zero is false. The condition may also be a string or list value, in fact any sequence; anything with a non-zero length is true, empty sequences are false. The test used in the example is a simple comparison. The standard comparison operators are written the same as in C: `<` (less than), `>` (greater than), `==` (equal to), `<=` (less than or equal to), `>=` (greater than or equal to) and `!=` (not equal to).

  * The _body_ of the loop is _indented_ : indentation is Python’s way of grouping statements. At the interactive prompt, you have to type a tab or space(s) for each indented line. In practice you will prepare more complicated input for Python with a text editor; all decent text editors have an auto-indent facility. When a compound statement is entered interactively, it must be followed by a blank line to indicate completion (since the parser cannot guess when you have typed the last line). Note that each line within a basic block must be indented by the same amount.

  * The [`print()`](../library/functions.html#print "print") function writes the value of the argument(s) it is given. It differs from just writing the expression you want to write (as we did earlier in the calculator examples) in the way it handles multiple arguments, floating-point quantities, and strings. Strings are printed without quotes, and a space is inserted between items, so you can format things nicely, like this:

>>>```

    
        >>> i = 256*256
    >>> print('The value of i is', i)
    The value of i is 65536
    
```

The keyword argument _end_ can be used to avoid the newline after the output, or end the output with a different string:

>>>```

    
        >>> a, b = 0, 1
    >>> while a < 1000:
    ... print(a, end=',')
    ... a, b = b, a+b
    ...
    0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,
    
```




Footnotes

[[1](#id1)]

Since `**` has higher precedence than `-`, `-3**2` will be interpreted as `-(3**2)` and thus result in `-9`. To avoid this and get `9`, you can use `(-3)**2`.

[[2](#id2)]

Unlike other languages, special characters such as `\n` have the same meaning with both single (`'...'`) and double (`"..."`) quotes. The only difference between the two is that within single quotes you don’t need to escape `"` (but you have to escape `\'`) and vice versa.

### [Table of Contents](../contents.html)

  * [3. An Informal Introduction to Python](#)
    * [3.1. Using Python as a Calculator](#using-python-as-a-calculator)
      * [3.1.1. Numbers](#numbers)
      * [3.1.2. Text](#text)
      * [3.1.3. Lists](#lists)
    * [3.2. First Steps Towards Programming](#first-steps-towards-programming)



#### Previous topic

[2. Using the Python Interpreter](interpreter.html "previous chapter")

#### Next topic

[4.