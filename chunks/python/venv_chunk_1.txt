[ ![Python logo](../_static/py.svg) ](https://www.python.org/) dev (3.14)3.13.03.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6

EnglishSpanishFrenchItalianJapaneseKoreanBrazilian PortugueseTurkishSimplified ChineseTraditional Chinese

Theme  Auto Light Dark

### [Table of Contents](../contents.html)

  * [12. Virtual Environments and Packages](#)
    * [12.1. Introduction](#introduction)
    * [12.2. Creating Virtual Environments](#creating-virtual-environments)
    * [12.3. Managing Packages with pip](#managing-packages-with-pip)



#### Previous topic

[11. Brief Tour of the Standard Library — Part II](stdlib2.html "previous chapter")

#### Next topic

[13. What Now?](whatnow.html "next chapter")

### This Page

  * [Report a Bug](../bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/tutorial/venv.rst)



### Navigation

  * [index](../genindex.html "General Index")
  * [modules](../py-modindex.html "Python Module Index") |
  * [next](whatnow.html "13. What Now?") |
  * [previous](stdlib2.html "11. Brief Tour of the Standard Library — Part II") |
  * ![Python logo](../_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanishFrenchItalianJapaneseKoreanBrazilian PortugueseTurkishSimplified ChineseTraditional Chinese

dev (3.14)3.13.03.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6

  * [3.13.0 Documentation](../index.html) » 
  * [The Python Tutorial](index.html) »
  * [12. Virtual Environments and Packages]()
  * | 
  * Theme  Auto Light Dark |



# 12. Virtual Environments and Packages[¶](#virtual-environments-and-packages "Link to this heading")

## 12.1. Introduction[¶](#introduction "Link to this heading")

Python applications will often use packages and modules that don’t come as part of the standard library. Applications will sometimes need a specific version of a library, because the application may require that a particular bug has been fixed or the application may be written using an obsolete version of the library’s interface.

This means it may not be possible for one Python installation to meet the requirements of every application. If application A needs version 1.0 of a particular module but application B needs version 2.0, then the requirements are in conflict and installing either version 1.0 or 2.0 will leave one application unable to run.

The solution for this problem is to create a [virtual environment](../glossary.html#term-virtual-environment), a self-contained directory tree that contains a Python installation for a particular version of Python, plus a number of additional packages.

Different applications can then use different virtual environments. To resolve the earlier example of conflicting requirements, application A can have its own virtual environment with version 1.0 installed while application B has another virtual environment with version 2.0. If application B requires a library be upgraded to version 3.0, this will not affect application A’s environment.

## 12.2. Creating Virtual Environments[¶](#creating-virtual-environments "Link to this heading")

The module used to create and manage virtual environments is called [`venv`](../library/venv.html#module-venv "venv: Creation of virtual environments."). [`venv`](../library/venv.html#module-venv "venv: Creation of virtual environments.") will install the Python version from which the command was run (as reported by the [`--version`](../using/cmdline.html#cmdoption-version) option). For instance, executing the command with `python3.12` will install version 3.12.

To create a virtual environment, decide upon a directory where you want to place it, and run the [`venv`](../library/venv.html#module-venv "venv: Creation of virtual environments.") module as a script with the directory path:

```

    
    
    python -m venv tutorial-env
    
```

This will create the `tutorial-env` directory if it doesn’t exist, and also create directories inside it containing a copy of the Python interpreter and various supporting files.

A common directory location for a virtual environment is `.venv`.