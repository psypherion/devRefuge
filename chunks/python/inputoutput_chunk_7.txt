Saving structured data with [`json`](../library/json.html#module-json "json: Encode and decode the JSON format.")[Â¶](#saving-structured-data-with-json "Link to this heading")

Strings can easily be written to and read from a file. Numbers take a bit more effort, since the [`read()`](../library/io.html#io.TextIOBase.read "io.TextIOBase.read") method only returns strings, which will have to be passed to a function like [`int()`](../library/functions.html#int "int"), which takes a string like `'123'` and returns its numeric value 123. When you want to save more complex data types like nested lists and dictionaries, parsing and serializing by hand becomes complicated.

Rather than having users constantly writing and debugging code to save complicated data types to files, Python allows you to use the popular data interchange format called [JSON (JavaScript Object Notation)](https://json.org). The standard module called [`json`](../library/json.html#module-json "json: Encode and decode the JSON format.") can take Python data hierarchies, and convert them to string representations; this process is called _serializing_. Reconstructing the data from the string representation is called _deserializing_. Between serializing and deserializing, the string representing the object may have been stored in a file or data, or sent over a network connection to some distant machine.

Note

The JSON format is commonly used by modern applications to allow for data exchange. Many programmers are already familiar with it, which makes it a good choice for interoperability.

If you have an object `x`, you can view its JSON string representation with a simple line of code:

>>>```

    
    
    >>> import json
    >>> x = [1, 'simple', 'list']
    >>> json.dumps(x)
    '[1, "simple", "list"]'
    
```

Another variant of the [`dumps()`](../library/json.html#json.dumps "json.dumps") function, called [`dump()`](../library/json.html#json.dump "json.dump"), simply serializes the object to a [text file](../glossary.html#term-text-file). So if `f` is a [text file](../glossary.html#term-text-file) object opened for writing, we can do this:

```

    
    
    json.dump(x, f)
    
```

To decode the object again, if `f` is a [binary file](../glossary.html#term-binary-file) or [text file](../glossary.html#term-text-file) object which has been opened for reading:

```

    
    
    x = json.load(f)
    
```

Note

JSON files must be encoded in UTF-8. Use `encoding="utf-8"` when opening JSON file as a [text file](../glossary.html#term-text-file) for both of reading and writing.

This simple serialization technique can handle lists and dictionaries, but serializing arbitrary class instances in JSON requires a bit of extra effort. The reference for the [`json`](../library/json.html#module-json "json: Encode and decode the JSON format.") module contains an explanation of this.

See also

[`pickle`](../library/pickle.html#module-pickle "pickle: Convert Python objects to streams of bytes and back.") - the pickle module

Contrary to [JSON](#tut-json), _pickle_ is a protocol which allows the serialization of arbitrarily complex Python objects. As such, it is specific to Python and cannot be used to communicate with applications written in other languages. It is also insecure by default: deserializing pickle data coming from an untrusted source can execute arbitrary code, if the data was crafted by a skilled attacker.

### [Table of Contents](../contents.html)

  * [7. Input and Output](#)
    * [7.1. Fancier Output Formatting](#fancier-output-formatting)
      * [7.1.1. Formatted String Literals](#formatted-string-literals)
      * [7.1.2. The String format() Method](#the-string-format-method)
      * [7.1.3. Manual String Formatting](#manual-string-formatting)
      * [7.1.4. Old string formatting](#old-string-formatting)
    * [7.2. Reading and Writing Files](#reading-and-writing-files)
      * [7.2.1. Methods of File Objects](#methods-of-file-objects)
      * [7.2.2. Saving structured data with `json`](#saving-structured-data-with-json)



#### Previous topic

[6.