If the end of the file has been reached, `f.read()` will return an empty string (`''`).

>>>```

    
    
    >>> f.read()
    'This is the entire file.\n'
    >>> f.read()
    ''
    
```

`f.readline()` reads a single line from the file; a newline character (`\n`) is left at the end of the string, and is only omitted on the last line of the file if the file doesn’t end in a newline. This makes the return value unambiguous; if `f.readline()` returns an empty string, the end of the file has been reached, while a blank line is represented by `'\n'`, a string containing only a single newline.

>>>```

    
    
    >>> f.readline()
    'This is the first line of the file.\n'
    >>> f.readline()
    'Second line of the file\n'
    >>> f.readline()
    ''
    
```

For reading lines from a file, you can loop over the file object. This is memory efficient, fast, and leads to simple code:

>>>```

    
    
    >>> for line in f:
    ... print(line, end='')
    ...
    This is the first line of the file.
    Second line of the file
    
```

If you want to read all the lines of a file in a list you can also use `list(f)` or `f.readlines()`.

`f.write(string)` writes the contents of _string_ to the file, returning the number of characters written.

>>>```

    
    
    >>> f.write('This is a test\n')
    15
    
```

Other types of objects need to be converted – either to a string (in text mode) or a bytes object (in binary mode) – before writing them:

>>>```

    
    
    >>> value = ('the answer', 42)
    >>> s = str(value) # convert the tuple to string
    >>> f.write(s)
    18
    
```

`f.tell()` returns an integer giving the file object’s current position in the file represented as number of bytes from the beginning of the file when in binary mode and an opaque number when in text mode.

To change the file object’s position, use `f.seek(offset, whence)`. The position is computed from adding _offset_ to a reference point; the reference point is selected by the _whence_ argument. A _whence_ value of 0 measures from the beginning of the file, 1 uses the current file position, and 2 uses the end of the file as the reference point. _whence_ can be omitted and defaults to 0, using the beginning of the file as the reference point.

>>>```

    
    
    >>> f = open('workfile', 'rb+')
    >>> f.write(b'0123456789abcdef')
    16
    >>> f.seek(5)   # Go to the 6th byte in the file
    5
    >>> f.read(1)
    b'5'
    >>> f.seek(-3, 2) # Go to the 3rd byte before the end
    13
    >>> f.read(1)
    b'd'
    
```

In text files (those opened without a `b` in the mode string), only seeks relative to the beginning of the file are allowed (the exception being seeking to the very file end with `seek(0, 2)`) and the only valid _offset_ values are those returned from the `f.tell()`, or zero. Any other _offset_ value produces undefined behaviour.

File objects have some additional methods, such as [`isatty()`](../library/io.html#io.IOBase.isatty "io.IOBase.isatty") and [`truncate()`](../library/io.html#io.IOBase.truncate "io.IOBase.truncate") which are less frequently used; consult the Library Reference for a complete guide to file objects.

### 7.2.2.