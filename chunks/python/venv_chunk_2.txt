This name keeps the directory typically hidden in your shell and thus out of the way while giving it a name that explains why the directory exists. It also prevents clashing with `.env` environment variable definition files that some tooling supports.

Once you’ve created a virtual environment, you may activate it.

On Windows, run:

```

    
    
    tutorial-env\Scripts\activate
    
```

On Unix or MacOS, run:

```

    
    
    source tutorial-env/bin/activate
    
```

(This script is written for the bash shell. If you use the **csh** or **fish** shells, there are alternate `activate.csh` and `activate.fish` scripts you should use instead.)

Activating the virtual environment will change your shell’s prompt to show what virtual environment you’re using, and modify the environment so that running `python` will get you that particular version and installation of Python. For example:

```

    
    
    $source~/envs/tutorial-env/bin/activate
    (tutorial-env)$python
    Python3.5.1(default,May62016,10:59:36)
    ...
    >>>importsys
    >>>sys.path
    ['','/usr/local/lib/python35.zip',...,
    '~/envs/tutorial-env/lib/python3.5/site-packages']
    >>>
    
```

To deactivate a virtual environment, type:

```

    
    
    deactivate
    
```

into the terminal.

## 12.3. Managing Packages with pip[¶](#managing-packages-with-pip "Link to this heading")

You can install, upgrade, and remove packages using a program called **pip**. By default `pip` will install packages from the [Python Package Index](https://pypi.org). You can browse the Python Package Index by going to it in your web browser.

`pip` has a number of subcommands: “install”, “uninstall”, “freeze”, etc. (Consult the [Installing Python Modules](../installing/index.html#installing-index) guide for complete documentation for `pip`.)

You can install the latest version of a package by specifying a package’s name:

```

    
    
    (tutorial-env)$python-mpipinstallnovas
    Collectingnovas
    Downloadingnovas-3.1.1.3.tar.gz(136kB)
    Installingcollectedpackages:novas
    Runningsetup.pyinstallfornovas
    Successfullyinstallednovas-3.1.1.3
    
```

You can also install a specific version of a package by giving the package name followed by `==` and the version number:

```

    
    
    (tutorial-env)$python-mpipinstallrequests==2.6.0
    Collectingrequests==2.6.0
    Usingcachedrequests-2.6.0-py2.py3-none-any.whl
    Installingcollectedpackages:requests
    Successfullyinstalledrequests-2.6.0
    
```

If you re-run this command, `pip` will notice that the requested version is already installed and do nothing. You can supply a different version number to get that version, or you can run `python -m pip install --upgrade` to upgrade the package to the latest version:

```

    
    
    (tutorial-env)$python-mpipinstall--upgraderequests
    Collectingrequests
    Installingcollectedpackages:requests
    Foundexistinginstallation:requests2.6.0
    Uninstallingrequests-2.6.0:
    Successfullyuninstalledrequests-2.6.0
    Successfullyinstalledrequests-2.7.0
    
```

`python -m pip uninstall` followed by one or more package names will remove the packages from the virtual environment.

`python -m pip show` will display information about a particular package:

```

    
    
    (tutorial-env)$python-mpipshowrequests
    ---
    Metadata-Version:2.0
    Name:requests
    Version:2.7.0
    Summary:PythonHTTPforHumans.
    Home-page:http://python-requests.org
    Author:KennethReitz
    Author-email:me@kennethreitz.com
    License:Apache2.0
    Location:/Users/akuchling/envs/tutorial-env/lib/python3.4/site-packages
    Requires:
    
```

`python -m pip list` will display all of the packages installed in the virtual environment:

```

    
    
    (tutorial-env)$python-mpiplist
    novas(3.1.1.3)
    numpy(1.9.2)
    pip(7.0.3)
    requests(2.7.0)
    setuptools(16.0)
    
```

`python -m pip freeze` will produce a similar list of the installed packages, but the output uses the format that `python -m pip install` expects. A common convention is to put this list in a `requirements.txt` file:

```

    
    
    (tutorial-env)$python-mpipfreeze>requirements.txt
    (tutorial-env)$catrequirements.txt
    novas==3.1.1.3
    numpy==1.9.2
    requests==2.7.0
    
```

The `requirements.txt` can then be committed to version control and shipped as part of an application. Users can then install all the necessary packages with `install -r`:

```

    
    
    (tutorial-env)$python-mpipinstall-rrequirements.txt
    Collectingnovas==3.1.1.3(from-rrequirements.txt(line1))
    ...
    Collectingnumpy==1.9.2(from-rrequirements.txt(line2))
    ...
    Collectingrequests==2.7.0(from-rrequirements.txt(line3))
    ...
    Installingcollectedpackages:novas,numpy,requests
    Runningsetup.pyinstallfornovas
    Successfullyinstallednovas-3.1.1.3numpy-1.9.2requests-2.7.0
    
```

`pip` has many more options. Consult the [Installing Python Modules](../installing/index.html#installing-index) guide for complete documentation for `pip`.