This tests whether or not a sequence contains a certain value.

The default values are evaluated at the point of function definition in the _defining_ scope, so that

```

    
    
    i = 5
    def f(arg=i):
      print(arg)
    i = 6
    f()
    
```

will print `5`.

**Important warning:** The default value is evaluated only once. This makes a difference when the default is a mutable object such as a list, dictionary, or instances of most classes. For example, the following function accumulates the arguments passed to it on subsequent calls:

```

    
    
    def f(a, L=[]):
      L.append(a)
      return L
    print(f(1))
    print(f(2))
    print(f(3))
    
```

This will print

```

    
    
    [1]
    [1, 2]
    [1, 2, 3]
    
```

If you don’t want the default to be shared between subsequent calls, you can write the function like this instead:

```

    
    
    def f(a, L=None):
      if L is None:
        L = []
      L.append(a)
      return L
    
```

### 4.9.2. Keyword Arguments[¶](#keyword-arguments "Link to this heading")

Functions can also be called using [keyword arguments](../glossary.html#term-keyword-argument) of the form `kwarg=value`. For instance, the following function:

```

    
    
    def parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):
      print("-- This parrot wouldn't", action, end=' ')
      print("if you put", voltage, "volts through it.")
      print("-- Lovely plumage, the", type)
      print("-- It's", state, "!")
    
```

accepts one required argument (`voltage`) and three optional arguments (`state`, `action`, and `type`). This function can be called in any of the following ways:

```

    
    
    parrot(1000)                     # 1 positional argument
    parrot(voltage=1000)                 # 1 keyword argument
    parrot(voltage=1000000, action='VOOOOOM')       # 2 keyword arguments
    parrot(action='VOOOOOM', voltage=1000000)       # 2 keyword arguments
    parrot('a million', 'bereft of life', 'jump')     # 3 positional arguments
    parrot('a thousand', state='pushing up the daisies') # 1 positional, 1 keyword
    
```

but all the following calls would be invalid:

```

    
    
    parrot()           # required argument missing
    parrot(voltage=5.0, 'dead') # non-keyword argument after a keyword argument
    parrot(110, voltage=220)   # duplicate value for the same argument
    parrot(actor='John Cleese') # unknown keyword argument
    
```

In a function call, keyword arguments must follow positional arguments. All the keyword arguments passed must match one of the arguments accepted by the function (e.g. `actor` is not a valid argument for the `parrot` function), and their order is not important. This also includes non-optional arguments (e.g. `parrot(voltage=1000)` is valid too). No argument may receive a value more than once. Here’s an example that fails due to this restriction:

>>>```

    
    
    >>> def function(a):
    ... pass
    ...
    >>> function(0, a=0)
    Traceback (most recent call last):
     File "<stdin>", line 1, in <module>
    TypeError: function() got multiple values for argument 'a'
    
```

When a final formal parameter of the form `**name` is present, it receives a dictionary (see [Mapping Types — dict](../library/stdtypes.html#typesmapping)) containing all keyword arguments except for those corresponding to a formal parameter. This may be combined with a formal parameter of the form `*name` (described in the next subsection) which receives a [tuple](datastructures.html#tut-tuples) containing the positional arguments beyond the formal parameter list.