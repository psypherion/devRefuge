Typical applications include caching objects that are expensive to create:

>>>```

    
    
    >>> import weakref, gc
    >>> class A:
    ... def __init__(self, value):
    ... self.value = value
    ... def __repr__(self):
    ... return str(self.value)
    ...
    >>> a = A(10)          # create a reference
    >>> d = weakref.WeakValueDictionary()
    >>> d['primary'] = a      # does not create a reference
    >>> d['primary']        # fetch the object if it is still alive
    10
    >>> del a            # remove the one reference
    >>> gc.collect()        # run garbage collection right away
    0
    >>> d['primary']        # entry was automatically removed
    Traceback (most recent call last):
     File "<stdin>", line 1, in <module>
    d['primary']        # entry was automatically removed
     File "C:/python313/lib/weakref.py", line 46, in __getitem__
    o = self.data[key]()
    KeyError: 'primary'
    
```

## 11.7. Tools for Working with Lists[Â¶](#tools-for-working-with-lists "Link to this heading")

Many data structure needs can be met with the built-in list type. However, sometimes there is a need for alternative implementations with different performance trade-offs.

The [`array`](../library/array.html#module-array "array: Space efficient arrays of uniformly typed numeric values.") module provides an [`array`](../library/array.html#array.array "array.array") object that is like a list that stores only homogeneous data and stores it more compactly. The following example shows an array of numbers stored as two byte unsigned binary numbers (typecode `"H"`) rather than the usual 16 bytes per entry for regular lists of Python int objects:

>>>```

    
    
    >>> from array import array
    >>> a = array('H', [4000, 10, 700, 22222])
    >>> sum(a)
    26932
    >>> a[1:3]
    array('H', [10, 700])
    
```

The [`collections`](../library/collections.html#module-collections "collections: Container datatypes") module provides a [`deque`](../library/collections.html#collections.deque "collections.deque") object that is like a list with faster appends and pops from the left side but slower lookups in the middle. These objects are well suited for implementing queues and breadth first tree searches:

>>>```

    
    
    >>> from collections import deque
    >>> d = deque(["task1", "task2", "task3"])
    >>> d.append("task4")
    >>> print("Handling", d.popleft())
    Handling task1
    
```

```

    
    
    unsearched = deque([starting_node])
    def breadth_first_search(unsearched):
      node = unsearched.popleft()
      for m in gen_moves(node):
        if is_goal(m):
          return m
        unsearched.append(m)
    
```

In addition to alternative list implementations, the library also offers other tools such as the [`bisect`](../library/bisect.html#module-bisect "bisect: Array bisection algorithms for binary searching.") module with functions for manipulating sorted lists:

>>>```

    
    
    >>> import bisect
    >>> scores = [(100, 'perl'), (200, 'tcl'), (400, 'lua'), (500, 'python')]
    >>> bisect.insort(scores, (300, 'ruby'))
    >>> scores
    [(100, 'perl'), (200, 'tcl'), (300, 'ruby'), (400, 'lua'), (500, 'python')]
    
```

The [`heapq`](../library/heapq.html#module-heapq "heapq: Heap queue algorithm \(a.k.a. priority queue\).") module provides functions for implementing heaps based on regular lists. The lowest valued entry is always kept at position zero. This is useful for applications which repeatedly access the smallest element but do not want to run a full list sort:

>>>```

    
    
    >>> from heapq import heapify, heappop, heappush
    >>> data = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]
    >>> heapify(data)           # rearrange the list into heap order
    >>> heappush(data, -5)         # add a new entry
    >>> [heappop(data) for i in range(3)] # fetch the three smallest entries
    [-5, 0, 1]
    
```

## 11.8.