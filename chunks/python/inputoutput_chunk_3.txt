`'!a'` applies [`ascii()`](../library/functions.html#ascii "ascii"), `'!s'` applies [`str()`](../library/stdtypes.html#str "str"), and `'!r'` applies [`repr()`](../library/functions.html#repr "repr"):

>>>```

    
    
    >>> animals = 'eels'
    >>> print(f'My hovercraft is full of {animals}.')
    My hovercraft is full of eels.
    >>> print(f'My hovercraft is full of {animals!r}.')
    My hovercraft is full of 'eels'.
    
```

The `=` specifier can be used to expand an expression to the text of the expression, an equal sign, then the representation of the evaluated expression:

>>>```

    
    
    >>> bugs = 'roaches'
    >>> count = 13
    >>> area = 'living room'
    >>> print(f'Debugging {bugs=}{count=}{area=}')
    Debugging bugs='roaches' count=13 area='living room'
    
```

See [self-documenting expressions](../whatsnew/3.8.html#bpo-36817-whatsnew) for more information on the `=` specifier. For a reference on these format specifications, see the reference guide for the [Format Specification Mini-Language](../library/string.html#formatspec).

### 7.1.2. The String format() Method[¶](#the-string-format-method "Link to this heading")

Basic usage of the [`str.format()`](../library/stdtypes.html#str.format "str.format") method looks like this:

>>>```

    
    
    >>> print('We are the {} who say "{}!"'.format('knights', 'Ni'))
    We are the knights who say "Ni!"
    
```

The brackets and characters within them (called format fields) are replaced with the objects passed into the [`str.format()`](../library/stdtypes.html#str.format "str.format") method. A number in the brackets can be used to refer to the position of the object passed into the [`str.format()`](../library/stdtypes.html#str.format "str.format") method.

>>>```

    
    
    >>> print('{0} and {1}'.format('spam', 'eggs'))
    spam and eggs
    >>> print('{1} and {0}'.format('spam', 'eggs'))
    eggs and spam
    
```

If keyword arguments are used in the [`str.format()`](../library/stdtypes.html#str.format "str.format") method, their values are referred to by using the name of the argument.

>>>```

    
    
    >>> print('This {food} is {adjective}.'.format(
    ... food='spam', adjective='absolutely horrible'))
    This spam is absolutely horrible.
    
```

Positional and keyword arguments can be arbitrarily combined:

>>>```

    
    
    >>> print('The story of {0}, {1}, and {other}.'.format('Bill', 'Manfred',
    ... other='Georg'))
    The story of Bill, Manfred, and Georg.
    
```

If you have a really long format string that you don’t want to split up, it would be nice if you could reference the variables to be formatted by name instead of by position. This can be done by simply passing the dict and using square brackets `'[]'` to access the keys.

>>>```

    
    
    >>> table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678}
    >>> print('Jack: {0[Jack]:d}; Sjoerd: {0[Sjoerd]:d}; '
    ... 'Dcab: {0[Dcab]:d}'.format(table))
    Jack: 4098; Sjoerd: 4127; Dcab: 8637678
    
```

This could also be done by passing the `table` dictionary as keyword arguments with the `**` notation.

>>>```

    
    
    >>> table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678}
    >>> print('Jack: {Jack:d}; Sjoerd: {Sjoerd:d}; Dcab: {Dcab:d}'.format(**table))
    Jack: 4098; Sjoerd: 4127; Dcab: 8637678
    
```

This is particularly useful in combination with the built-in function [`vars()`](../library/functions.html#vars "vars"), which returns a dictionary containing all local variables:

>>>```

    
    
    >>> table = {k: str(v) for k, v in vars().items()}
    >>> message = " ".join([f'{k}: ' + '{' + k +'};' for k in table.keys()])
    >>> print(message.format(**table))
    __name__: __main__; __doc__: None; __package__: None; __loader__: ...
    
```

As an example, the following lines produce a tidily aligned set of columns giving integers and their squares and cubes:

>>>```

    
    
    >>> for x in range(1, 11):
    ...