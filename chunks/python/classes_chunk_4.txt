The same is true for deletions: the statement `del x` removes the binding of `x` from the namespace referenced by the local scope. In fact, all operations that introduce new names use the local scope: in particular, [`import`](../reference/simple_stmts.html#import) statements and function definitions bind the module or function name in the local scope.

The [`global`](../reference/simple_stmts.html#global) statement can be used to indicate that particular variables live in the global scope and should be rebound there; the [`nonlocal`](../reference/simple_stmts.html#nonlocal) statement indicates that particular variables live in an enclosing scope and should be rebound there.

### 9.2.1. Scopes and Namespaces Example[¶](#scopes-and-namespaces-example "Link to this heading")

This is an example demonstrating how to reference the different scopes and namespaces, and how [`global`](../reference/simple_stmts.html#global) and [`nonlocal`](../reference/simple_stmts.html#nonlocal) affect variable binding:

```

    
    
    def scope_test():
      def do_local():
        spam = "local spam"
      def do_nonlocal():
        nonlocal spam
        spam = "nonlocal spam"
      def do_global():
        global spam
        spam = "global spam"
      spam = "test spam"
      do_local()
      print("After local assignment:", spam)
      do_nonlocal()
      print("After nonlocal assignment:", spam)
      do_global()
      print("After global assignment:", spam)
    scope_test()
    print("In global scope:", spam)
    
```

The output of the example code is:

```

    
    
    After local assignment: test spam
    After nonlocal assignment: nonlocal spam
    After global assignment: nonlocal spam
    In global scope: global spam
    
```

Note how the _local_ assignment (which is default) didn’t change _scope_test_ 's binding of _spam_. The [`nonlocal`](../reference/simple_stmts.html#nonlocal) assignment changed _scope_test_ 's binding of _spam_ , and the [`global`](../reference/simple_stmts.html#global) assignment changed the module-level binding.

You can also see that there was no previous binding for _spam_ before the [`global`](../reference/simple_stmts.html#global) assignment.

## 9.3. A First Look at Classes[¶](#a-first-look-at-classes "Link to this heading")

Classes introduce a little bit of new syntax, three new object types, and some new semantics.

### 9.3.1. Class Definition Syntax[¶](#class-definition-syntax "Link to this heading")

The simplest form of class definition looks like this:

```

    
    
    class ClassName:
      <statement-1>
      .
      .
      .
      <statement-N>
    
```

Class definitions, like function definitions ([`def`](../reference/compound_stmts.html#def) statements) must be executed before they have any effect. (You could conceivably place a class definition in a branch of an [`if`](../reference/compound_stmts.html#if) statement, or inside a function.)

In practice, the statements inside a class definition will usually be function definitions, but other statements are allowed, and sometimes useful — we’ll come back to this later. The function definitions inside a class normally have a peculiar form of argument list, dictated by the calling conventions for methods — again, this is explained later.

When a class definition is entered, a new namespace is created, and used as the local scope — thus, all assignments to local variables go into this new namespace. In particular, function definitions bind the name of the new function here.

When a class definition is left normally (via the end), a _class object_ is created. This is basically a wrapper around the contents of the namespace created by the class definition; we’ll learn more about class objects in the next section.