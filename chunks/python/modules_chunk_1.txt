[ ![Python logo](../_static/py.svg) ](https://www.python.org/) dev (3.14)3.13.03.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6

EnglishSpanishFrenchItalianJapaneseKoreanBrazilian PortugueseTurkishSimplified ChineseTraditional Chinese

Theme  Auto Light Dark

### [Table of Contents](../contents.html)

  * [6. Modules](#)
    * [6.1. More on Modules](#more-on-modules)
      * [6.1.1. Executing modules as scripts](#executing-modules-as-scripts)
      * [6.1.2. The Module Search Path](#the-module-search-path)
      * [6.1.3. “Compiled” Python files](#compiled-python-files)
    * [6.2. Standard Modules](#standard-modules)
    * [6.3. The `dir()` Function](#the-dir-function)
    * [6.4. Packages](#packages)
      * [6.4.1. Importing * From a Package](#importing-from-a-package)
      * [6.4.2. Intra-package References](#intra-package-references)
      * [6.4.3. Packages in Multiple Directories](#packages-in-multiple-directories)



#### Previous topic

[5. Data Structures](datastructures.html "previous chapter")

#### Next topic

[7. Input and Output](inputoutput.html "next chapter")

### This Page

  * [Report a Bug](../bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/tutorial/modules.rst)



### Navigation

  * [index](../genindex.html "General Index")
  * [modules](../py-modindex.html "Python Module Index") |
  * [next](inputoutput.html "7. Input and Output") |
  * [previous](datastructures.html "5. Data Structures") |
  * ![Python logo](../_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanishFrenchItalianJapaneseKoreanBrazilian PortugueseTurkishSimplified ChineseTraditional Chinese

dev (3.14)3.13.03.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6

  * [3.13.0 Documentation](../index.html) » 
  * [The Python Tutorial](index.html) »
  * [6. Modules]()
  * | 
  * Theme  Auto Light Dark |



# 6. Modules[¶](#modules "Link to this heading")

If you quit from the Python interpreter and enter it again, the definitions you have made (functions and variables) are lost. Therefore, if you want to write a somewhat longer program, you are better off using a text editor to prepare the input for the interpreter and running it with that file as input instead. This is known as creating a _script_. As your program gets longer, you may want to split it into several files for easier maintenance. You may also want to use a handy function that you’ve written in several programs without copying its definition into each program.

To support this, Python has a way to put definitions in a file and use them in a script or in an interactive instance of the interpreter. Such a file is called a _module_ ; definitions from a module can be _imported_ into other modules or into the _main_ module (the collection of variables that you have access to in a script executed at the top level and in calculator mode).

A module is a file containing Python definitions and statements. The file name is the module name with the suffix `.py` appended. Within a module, the module’s name (as a string) is available as the value of the global variable `__name__`. For instance, use your favorite text editor to create a file called `fibo.py` in the current directory with the following contents:

```

    
    
    # Fibonacci numbers module
    def fib(n):  # write Fibonacci series up to n
      a, b = 0, 1
      while a < n:
        print(a, end=' ')
        a, b = b, a+b
      print()
    def fib2(n):  # return Fibonacci series up to n
      result = []
      a, b = 0, 1
      while a < n:
        result.append(a)
        a, b = b, a+b
      return result
    
```

Now enter the Python interpreter and import this module with the following command:

>>>```

    
    
    >>> import fibo
    
```

This does not add the names of the functions defined in `fibo` directly to the current [namespace](../glossary.html#term-namespace) (see [Python Scopes and Namespaces](classes.html#tut-scopes) for more details); it only adds the module name `fibo` there.