[ ![Python logo](../_static/py.svg) ](https://www.python.org/) dev (3.14)3.13.03.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6

EnglishSpanishFrenchItalianJapaneseKoreanBrazilian PortugueseTurkishSimplified ChineseTraditional Chinese

Theme  Auto Light Dark

### [Table of Contents](../contents.html)

  * [10. Brief Tour of the Standard Library](#)
    * [10.1. Operating System Interface](#operating-system-interface)
    * [10.2. File Wildcards](#file-wildcards)
    * [10.3. Command Line Arguments](#command-line-arguments)
    * [10.4. Error Output Redirection and Program Termination](#error-output-redirection-and-program-termination)
    * [10.5. String Pattern Matching](#string-pattern-matching)
    * [10.6. Mathematics](#mathematics)
    * [10.7. Internet Access](#internet-access)
    * [10.8. Dates and Times](#dates-and-times)
    * [10.9. Data Compression](#data-compression)
    * [10.10. Performance Measurement](#performance-measurement)
    * [10.11. Quality Control](#quality-control)
    * [10.12. Batteries Included](#batteries-included)



#### Previous topic

[9. Classes](classes.html "previous chapter")

#### Next topic

[11. Brief Tour of the Standard Library — Part II](stdlib2.html "next chapter")

### This Page

  * [Report a Bug](../bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/tutorial/stdlib.rst)



### Navigation

  * [index](../genindex.html "General Index")
  * [modules](../py-modindex.html "Python Module Index") |
  * [next](stdlib2.html "11. Brief Tour of the Standard Library — Part II") |
  * [previous](classes.html "9. Classes") |
  * ![Python logo](../_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanishFrenchItalianJapaneseKoreanBrazilian PortugueseTurkishSimplified ChineseTraditional Chinese

dev (3.14)3.13.03.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6

  * [3.13.0 Documentation](../index.html) » 
  * [The Python Tutorial](index.html) »
  * [10. Brief Tour of the Standard Library]()
  * | 
  * Theme  Auto Light Dark |



# 10. Brief Tour of the Standard Library[¶](#brief-tour-of-the-standard-library "Link to this heading")

## 10.1. Operating System Interface[¶](#operating-system-interface "Link to this heading")

The [`os`](../library/os.html#module-os "os: Miscellaneous operating system interfaces.") module provides dozens of functions for interacting with the operating system:

>>>```

    
    
    >>> import os
    >>> os.getcwd()   # Return the current working directory
    'C:\\Python313'
    >>> os.chdir('/server/accesslogs')  # Change current working directory
    >>> os.system('mkdir today')  # Run the command mkdir in the system shell
    0
    
```

Be sure to use the `import os` style instead of `from os import *`. This will keep [`os.open()`](../library/os.html#os.open "os.open") from shadowing the built-in [`open()`](../library/functions.html#open "open") function which operates much differently.

The built-in [`dir()`](../library/functions.html#dir "dir") and [`help()`](../library/functions.html#help "help") functions are useful as interactive aids for working with large modules like [`os`](../library/os.html#module-os "os: Miscellaneous operating system interfaces."):

>>>```

    
    
    >>> import os
    >>> dir(os)
    <returns a list of all module functions>
    >>> help(os)
    <returns an extensive manual page created from the module's docstrings>
    
```

For daily file and directory management tasks, the [`shutil`](../library/shutil.html#module-shutil "shutil: High-level file operations, including copying.") module provides a higher level interface that is easier to use:

>>>```

    
    
    >>> import shutil
    >>> shutil.copyfile('data.db', 'archive.db')
    'archive.db'
    >>> shutil.move('/build/executables', 'installdir')
    'installdir'
    
```

## 10.2. File Wildcards[¶](#file-wildcards "Link to this heading")

The [`glob`](../library/glob.html#module-glob "glob: Unix shell style pathname pattern expansion.") module provides a function for making file lists from directory wildcard searches:

>>>```

    
    
    >>> import glob
    >>> glob.glob('*.py')
    ['primes.py', 'random.py', 'quote.py']
    
```

## 10.3. Command Line Arguments[¶](#command-line-arguments "Link to this heading")

Common utility scripts often need to process command line arguments. These arguments are stored in the [`sys`](../library/sys.html#module-sys "sys: Access system-specific parameters and functions.") module’s _argv_ attribute as a list. For instance, let’s take the following `demo.py` file:

```

    
    
    # File demo.py
    import sys
    print(sys.argv)
    
```

Here is the output from running `python demo.py one two three` at the command line:

```

    
    
    ['demo.py', 'one', 'two', 'three']
    
```

The [`argparse`](../library/argparse.html#module-argparse "argparse: Command-line option and argument parsing library.") module provides a more sophisticated mechanism to process command line arguments. The following script extracts one or more filenames and an optional number of lines to be displayed:

```

    
    
    import argparse
    parser = argparse.ArgumentParser(
      prog='top',
      description='Show top lines from each file')
    parser.add_argument('filenames', nargs='+')
    parser.add_argument('-l', '--lines', type=int, default=10)
    args = parser.parse_args()
    print(args)
    
```

When run at the command line with `python top.py --lines=5 alpha.txt beta.txt`, the script sets `args.lines` to `5` and `args.filenames` to `['alpha.txt', 'beta.txt']`.

## 10.4. Error Output Redirection and Program Termination[¶](#error-output-redirection-and-program-termination "Link to this heading")

The [`sys`](../library/sys.html#module-sys "sys: Access system-specific parameters and functions.") module also has attributes for _stdin_ , _stdout_ , and _stderr_. The latter is useful for emitting warnings and error messages to make them visible even when _stdout_ has been redirected:

>>>```

    
    
    >>> sys.stderr.write('Warning, log file not found starting a new one\n')
    Warning, log file not found starting a new one
    
```

The most direct way to terminate a script is to use `sys.exit()`.

## 10.5. String Pattern Matching[¶](#string-pattern-matching "Link to this heading")

The [`re`](../library/re.html#module-re "re: Regular expression operations.") module provides regular expression tools for advanced string processing. For complex matching and manipulation, regular expressions offer succinct, optimized solutions:

>>>```

    
    
    >>> import re
    >>> re.findall(r'\bf[a-z]*', 'which foot or hand fell fastest')
    ['foot', 'fell', 'fastest']
    >>> re.sub(r'(\b[a-z]+) \1', r'\1', 'cat in the the hat')
    'cat in the hat'
    
```

When only simple capabilities are needed, string methods are preferred because they are easier to read and debug:

>>>```

    
    
    >>> 'tea for too'.replace('too', 'two')
    'tea for two'
    
```

## 10.6. Mathematics[¶](#mathematics "Link to this heading")

The [`math`](../library/math.html#module-math "math: Mathematical functions \(sin\(\) etc.\).") module gives access to the underlying C library functions for floating-point math:

>>>```

    
    
    >>> import math
    >>> math.cos(math.pi / 4)
    0.70710678118654757
    >>> math.log(1024, 2)
    10.0
    
```

The [`random`](../library/random.html#module-random "random: Generate pseudo-random numbers with various common distributions.") module provides tools for making random selections:

>>>```

    
    
    >>> import random
    >>> random.choice(['apple', 'pear', 'banana'])
    'apple'
    >>> random.sample(range(100), 10)  # sampling without replacement
    [30, 83, 16, 4, 8, 81, 41, 50, 18, 33]
    >>> random.random()  # random float from the interval [0.0, 1.0)
    0.17970987693706186
    >>> random.randrange(6)  # random integer chosen from range(6)
    4
    
```

The [`statistics`](../library/statistics.html#module-statistics "statistics: Mathematical statistics functions") module calculates basic statistical properties (the mean, median, variance, etc.) of numeric data:

>>>```

    
    
    >>> import statistics
    >>> data = [2.75, 1.75, 1.25, 0.25, 0.5, 1.25, 3.5]
    >>> statistics.mean(data)
    1.6071428571428572
    >>> statistics.median(data)
    1.25
    >>> statistics.variance(data)
    1.3720238095238095
    
```

The SciPy project <<https://scipy.org>> has many other modules for numerical computations.

## 10.7. Internet Access[¶](#internet-access "Link to this heading")

There are a number of modules for accessing the internet and processing internet protocols. Two of the simplest are [`urllib.request`](../library/urllib.request.html#module-urllib.request "urllib.request: Extensible library for opening URLs.") for retrieving data from URLs and [`smtplib`](../library/smtplib.html#module-smtplib "smtplib: SMTP protocol client \(requires sockets\).") for sending mail:

>>>```

    
    
    >>> from urllib.request import urlopen
    >>> with urlopen('http://worldtimeapi.org/api/timezone/etc/UTC.txt') as response:
    ...   for line in response:
    ...     line = line.decode()       # Convert bytes to a str
    ...     if line.startswith('datetime'):
    ...       print(line.rstrip())     # Remove trailing newline
    ...
    datetime: 2022-01-01T01:36:47.689215+00:00
    >>> import smtplib
    >>> server = smtplib.SMTP('localhost')
    >>> server.sendmail('soothsayer@example.org', 'jcaesar@example.org',
    ... """To: jcaesar@example.org
    ... From: soothsayer@example.org
    ...
    ... Beware the Ides of March.
    ... """)
    >>> server.quit()
    
```

(Note that the second example needs a mailserver running on localhost.)

## 10.8. Dates and Times[¶](#dates-and-times "Link to this heading")

The [`datetime`](../library/datetime.html#module-datetime "datetime: Basic date and time types.") module supplies classes for manipulating dates and times in both simple and complex ways. While date and time arithmetic is supported, the focus of the implementation is on efficient member extraction for output formatting and manipulation. The module also supports objects that are timezone aware.

>>>```

    
    
    >>> # dates are easily constructed and formatted
    >>> from datetime import date
    >>> now = date.today()
    >>> now
    datetime.date(2003, 12, 2)
    >>> now.strftime("%m-%d-%y. %d %b %Y is a %A on the %d day of %B.")
    '12-02-03. 02 Dec 2003 is a Tuesday on the 02 day of December.'
    >>> # dates support calendar arithmetic
    >>> birthday = date(1964, 7, 31)
    >>> age = now - birthday
    >>> age.days
    14368
    
```

## 10.9. Data Compression[¶](#data-compression "Link to this heading")

Common data archiving and compression formats are directly supported by modules including: [`zlib`](../library/zlib.html#module-zlib "zlib: Low-level interface to compression and decompression routines compatible with gzip."), [`gzip`](../library/gzip.html#module-gzip "gzip: Interfaces for gzip compression and decompression using file objects."), [`bz2`](../library/bz2.html#module-bz2 "bz2: Interfaces for bzip2 compression and decompression."), [`lzma`](../library/lzma.html#module-lzma "lzma: A Python wrapper for the liblzma compression library."), [`zipfile`](../library/zipfile.html#module-zipfile "zipfile: Read and write ZIP-format archive files.") and [`tarfile`](../library/tarfile.html#module-tarfile "tarfile: Read and write tar-format archive files.").

>>>```

    
    
    >>> import zlib
    >>> s = b'witch which has which witches wrist watch'
    >>> len(s)
    41
    >>> t = zlib.compress(s)
    >>> len(t)
    37
    >>> zlib.decompress(t)
    b'witch which has which witches wrist watch'
    >>> zlib.crc32(s)
    226805979
    
```

## 10.10. Performance Measurement[¶](#performance-measurement "Link to this heading")

Some Python users develop a deep interest in knowing the relative performance of different approaches to the same problem. Python provides a measurement tool that answers those questions immediately.

For example, it may be tempting to use the tuple packing and unpacking feature instead of the traditional approach to swapping arguments. The [`timeit`](../library/timeit.html#module-timeit "timeit: Measure the execution time of small code snippets.") module quickly demonstrates a modest performance advantage:

>>>```

    
    
    >>> from timeit import Timer
    >>> Timer('t=a; a=b; b=t', 'a=1; b=2').timeit()
    0.57535828626024577
    >>> Timer('a,b = b,a', 'a=1; b=2').timeit()
    0.54962537085770791
    
```

In contrast to [`timeit`](../library/timeit.html#module-timeit "timeit: Measure the execution time of small code snippets.")’s fine level of granularity, the [`profile`](../library/profile.html#module-profile "profile: Python source profiler.") and [`pstats`](../library/profile.html#module-pstats "pstats: Statistics object for use with the profiler.") modules provide tools for identifying time critical sections in larger blocks of code.

## 10.11. Quality Control[¶](#quality-control "Link to this heading")

One approach for developing high quality software is to write tests for each function as it is developed and to run those tests frequently during the development process.

The [`doctest`](../library/doctest.html#module-doctest "doctest: Test pieces of code within docstrings.") module provides a tool for scanning a module and validating tests embedded in a program’s docstrings. Test construction is as simple as cutting-and-pasting a typical call along with its results into the docstring. This improves the documentation by providing the user with an example and it allows the doctest module to make sure the code remains true to the documentation:

```

    
    
    def average(values):
    """Computes the arithmetic mean of a list of numbers.
      >>> print(average([20, 30, 70]))
      40.0
      """
      return sum(values) / len(values)
    import doctest
    doctest.testmod()  # automatically validate the embedded tests
    
```

The [`unittest`](../library/unittest.html#module-unittest "unittest: Unit testing framework for Python.") module is not as effortless as the [`doctest`](../library/doctest.html#module-doctest "doctest: Test pieces of code within docstrings.") module, but it allows a more comprehensive set of tests to be maintained in a separate file:

```

    
    
    import unittest
    class TestStatisticalFunctions(unittest.TestCase):
      def test_average(self):
        self.assertEqual(average([20, 30, 70]), 40.0)
        self.assertEqual(round(average([1, 5, 7]), 1), 4.3)
        with self.assertRaises(ZeroDivisionError):
          average([])
        with self.assertRaises(TypeError):
          average(20, 30, 70)
    unittest.main() # Calling from the command line invokes all tests
    
```

## 10.12. Batteries Included[¶](#batteries-included "Link to this heading")

Python has a “batteries included” philosophy. This is best seen through the sophisticated and robust capabilities of its larger packages. For example:

  * The [`xmlrpc.client`](../library/xmlrpc.client.html#module-xmlrpc.client "xmlrpc.client: XML-RPC client access.") and [`xmlrpc.server`](../library/xmlrpc.server.html#module-xmlrpc.server "xmlrpc.server: Basic XML-RPC server implementations.") modules make implementing remote procedure calls into an almost trivial task. Despite the modules’ names, no direct knowledge or handling of XML is needed.

  * The [`email`](../library/email.html#module-email "email: Package supporting the parsing, manipulating, and generating email messages.") package is a library for managing email messages, including MIME and other [**RFC 2822**](https://datatracker.ietf.org/doc/html/rfc2822.html)-based message documents. Unlike [`smtplib`](../library/smtplib.html#module-smtplib "smtplib: SMTP protocol client \(requires sockets\).") and [`poplib`](../library/poplib.html#module-poplib "poplib: POP3 protocol client \(requires sockets\).") which actually send and receive messages, the email package has a complete toolset for building or decoding complex message structures (including attachments) and for implementing internet encoding and header protocols.

  * The [`json`](../library/json.html#module-json "json: Encode and decode the JSON format.") package provides robust support for parsing this popular data interchange format. The [`csv`](../library/csv.html#module-csv "csv: Write and read tabular data to and from delimited files.") module supports direct reading and writing of files in Comma-Separated Value format, commonly supported by databases and spreadsheets. XML processing is supported by the [`xml.etree.ElementTree`](../library/xml.etree.elementtree.html#module-xml.etree.ElementTree "xml.etree.ElementTree: Implementation of the ElementTree API."), [`xml.dom`](../library/xml.dom.html#module-xml.dom "xml.dom: Document Object Model API for Python.") and [`xml.sax`](../library/xml.sax.html#module-xml.sax "xml.sax: Package containing SAX2 base classes and convenience functions.") packages. Together, these modules and packages greatly simplify data interchange between Python applications and other tools.

  * The [`sqlite3`](../library/sqlite3.html#module-sqlite3 "sqlite3: A DB-API 2.0 implementation using SQLite 3.x.") module is a wrapper for the SQLite database library, providing a persistent database that can be updated and accessed using slightly nonstandard SQL syntax.

  * Internationalization is supported by a number of modules including [`gettext`](../library/gettext.html#module-gettext "gettext: Multilingual internationalization services."), [`locale`](../library/locale.html#module-locale "locale: Internationalization services."), and the [`codecs`](../library/codecs.html#module-codecs "codecs: Encode and decode data and streams.") package.




### [Table of Contents](../contents.html)

  * [10. Brief Tour of the Standard Library](#)
    * [10.1. Operating System Interface](#operating-system-interface)
    * [10.2. File Wildcards](#file-wildcards)
    * [10.3. Command Line Arguments](#command-line-arguments)
    * [10.4. Error Output Redirection and Program Termination](#error-output-redirection-and-program-termination)
    * [10.5. String Pattern Matching](#string-pattern-matching)
    * [10.6. Mathematics](#mathematics)
    * [10.7. Internet Access](#internet-access)
    * [10.8. Dates and Times](#dates-and-times)
    * [10.9. Data Compression](#data-compression)
    * [10.10. Performance Measurement](#performance-measurement)
    * [10.11. Quality Control](#quality-control)
    * [10.12. Batteries Included](#batteries-included)



#### Previous topic

[9. Classes](classes.html "previous chapter")

#### Next topic

[11. Brief Tour of the Standard Library — Part II](stdlib2.html "next chapter")

### This Page

  * [Report a Bug](../bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/tutorial/stdlib.rst)



«

### Navigation

  * [index](../genindex.html "General Index")
  * [modules](../py-modindex.html "Python Module Index") |
  * [next](stdlib2.html "11. Brief Tour of the Standard Library — Part II") |
  * [previous](classes.html "9. Classes") |
  * ![Python logo](../_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanishFrenchItalianJapaneseKoreanBrazilian PortugueseTurkishSimplified ChineseTraditional Chinese

dev (3.14)3.13.03.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6

  * [3.13.0 Documentation](../index.html) » 
  * [The Python Tutorial](index.html) »
  * [10. Brief Tour of the Standard Library]()
  * | 
  * Theme  Auto Light Dark |



© [ Copyright ](../copyright.html) 2001-2024, Python Software Foundation. This page is licensed under the Python Software Foundation License Version 2. Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License. See [History and License](/license.html) for more information. The Python Software Foundation is a non-profit corporation. [Please donate.](https://www.python.org/psf/donations/) Last updated on Nov 07, 2024 (15:51 UTC). [Found a bug](/bugs.html)? Created using [Sphinx](https://www.sphinx-doc.org/) 8.1.3. 
