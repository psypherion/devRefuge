[ ![Python logo](../_static/py.svg) ](https://www.python.org/) dev (3.14)3.13.03.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6

EnglishSpanishFrenchItalianJapaneseKoreanBrazilian PortugueseTurkishSimplified ChineseTraditional Chinese

Theme  Auto Light Dark

### [Table of Contents](../contents.html)

  * [12. Virtual Environments and Packages](#)
    * [12.1. Introduction](#introduction)
    * [12.2. Creating Virtual Environments](#creating-virtual-environments)
    * [12.3. Managing Packages with pip](#managing-packages-with-pip)



#### Previous topic

[11. Brief Tour of the Standard Library — Part II](stdlib2.html "previous chapter")

#### Next topic

[13. What Now?](whatnow.html "next chapter")

### This Page

  * [Report a Bug](../bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/tutorial/venv.rst)



### Navigation

  * [index](../genindex.html "General Index")
  * [modules](../py-modindex.html "Python Module Index") |
  * [next](whatnow.html "13. What Now?") |
  * [previous](stdlib2.html "11. Brief Tour of the Standard Library — Part II") |
  * ![Python logo](../_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanishFrenchItalianJapaneseKoreanBrazilian PortugueseTurkishSimplified ChineseTraditional Chinese

dev (3.14)3.13.03.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6

  * [3.13.0 Documentation](../index.html) » 
  * [The Python Tutorial](index.html) »
  * [12. Virtual Environments and Packages]()
  * | 
  * Theme  Auto Light Dark |



# 12. Virtual Environments and Packages[¶](#virtual-environments-and-packages "Link to this heading")

## 12.1. Introduction[¶](#introduction "Link to this heading")

Python applications will often use packages and modules that don’t come as part of the standard library. Applications will sometimes need a specific version of a library, because the application may require that a particular bug has been fixed or the application may be written using an obsolete version of the library’s interface.

This means it may not be possible for one Python installation to meet the requirements of every application. If application A needs version 1.0 of a particular module but application B needs version 2.0, then the requirements are in conflict and installing either version 1.0 or 2.0 will leave one application unable to run.

The solution for this problem is to create a [virtual environment](../glossary.html#term-virtual-environment), a self-contained directory tree that contains a Python installation for a particular version of Python, plus a number of additional packages.

Different applications can then use different virtual environments. To resolve the earlier example of conflicting requirements, application A can have its own virtual environment with version 1.0 installed while application B has another virtual environment with version 2.0. If application B requires a library be upgraded to version 3.0, this will not affect application A’s environment.

## 12.2. Creating Virtual Environments[¶](#creating-virtual-environments "Link to this heading")

The module used to create and manage virtual environments is called [`venv`](../library/venv.html#module-venv "venv: Creation of virtual environments."). [`venv`](../library/venv.html#module-venv "venv: Creation of virtual environments.") will install the Python version from which the command was run (as reported by the [`--version`](../using/cmdline.html#cmdoption-version) option). For instance, executing the command with `python3.12` will install version 3.12.

To create a virtual environment, decide upon a directory where you want to place it, and run the [`venv`](../library/venv.html#module-venv "venv: Creation of virtual environments.") module as a script with the directory path:

```

    
    
    python -m venv tutorial-env
    
```

This will create the `tutorial-env` directory if it doesn’t exist, and also create directories inside it containing a copy of the Python interpreter and various supporting files.

A common directory location for a virtual environment is `.venv`. This name keeps the directory typically hidden in your shell and thus out of the way while giving it a name that explains why the directory exists. It also prevents clashing with `.env` environment variable definition files that some tooling supports.

Once you’ve created a virtual environment, you may activate it.

On Windows, run:

```

    
    
    tutorial-env\Scripts\activate
    
```

On Unix or MacOS, run:

```

    
    
    source tutorial-env/bin/activate
    
```

(This script is written for the bash shell. If you use the **csh** or **fish** shells, there are alternate `activate.csh` and `activate.fish` scripts you should use instead.)

Activating the virtual environment will change your shell’s prompt to show what virtual environment you’re using, and modify the environment so that running `python` will get you that particular version and installation of Python. For example:

```

    
    
    $source~/envs/tutorial-env/bin/activate
    (tutorial-env)$python
    Python3.5.1(default,May62016,10:59:36)
    ...
    >>>importsys
    >>>sys.path
    ['','/usr/local/lib/python35.zip',...,
    '~/envs/tutorial-env/lib/python3.5/site-packages']
    >>>
    
```

To deactivate a virtual environment, type:

```

    
    
    deactivate
    
```

into the terminal.

## 12.3. Managing Packages with pip[¶](#managing-packages-with-pip "Link to this heading")

You can install, upgrade, and remove packages using a program called **pip**. By default `pip` will install packages from the [Python Package Index](https://pypi.org). You can browse the Python Package Index by going to it in your web browser.

`pip` has a number of subcommands: “install”, “uninstall”, “freeze”, etc. (Consult the [Installing Python Modules](../installing/index.html#installing-index) guide for complete documentation for `pip`.)

You can install the latest version of a package by specifying a package’s name:

```

    
    
    (tutorial-env)$python-mpipinstallnovas
    Collectingnovas
    Downloadingnovas-3.1.1.3.tar.gz(136kB)
    Installingcollectedpackages:novas
    Runningsetup.pyinstallfornovas
    Successfullyinstallednovas-3.1.1.3
    
```

You can also install a specific version of a package by giving the package name followed by `==` and the version number:

```

    
    
    (tutorial-env)$python-mpipinstallrequests==2.6.0
    Collectingrequests==2.6.0
    Usingcachedrequests-2.6.0-py2.py3-none-any.whl
    Installingcollectedpackages:requests
    Successfullyinstalledrequests-2.6.0
    
```

If you re-run this command, `pip` will notice that the requested version is already installed and do nothing. You can supply a different version number to get that version, or you can run `python -m pip install --upgrade` to upgrade the package to the latest version:

```

    
    
    (tutorial-env)$python-mpipinstall--upgraderequests
    Collectingrequests
    Installingcollectedpackages:requests
    Foundexistinginstallation:requests2.6.0
    Uninstallingrequests-2.6.0:
    Successfullyuninstalledrequests-2.6.0
    Successfullyinstalledrequests-2.7.0
    
```

`python -m pip uninstall` followed by one or more package names will remove the packages from the virtual environment.

`python -m pip show` will display information about a particular package:

```

    
    
    (tutorial-env)$python-mpipshowrequests
    ---
    Metadata-Version:2.0
    Name:requests
    Version:2.7.0
    Summary:PythonHTTPforHumans.
    Home-page:http://python-requests.org
    Author:KennethReitz
    Author-email:me@kennethreitz.com
    License:Apache2.0
    Location:/Users/akuchling/envs/tutorial-env/lib/python3.4/site-packages
    Requires:
    
```

`python -m pip list` will display all of the packages installed in the virtual environment:

```

    
    
    (tutorial-env)$python-mpiplist
    novas(3.1.1.3)
    numpy(1.9.2)
    pip(7.0.3)
    requests(2.7.0)
    setuptools(16.0)
    
```

`python -m pip freeze` will produce a similar list of the installed packages, but the output uses the format that `python -m pip install` expects. A common convention is to put this list in a `requirements.txt` file:

```

    
    
    (tutorial-env)$python-mpipfreeze>requirements.txt
    (tutorial-env)$catrequirements.txt
    novas==3.1.1.3
    numpy==1.9.2
    requests==2.7.0
    
```

The `requirements.txt` can then be committed to version control and shipped as part of an application. Users can then install all the necessary packages with `install -r`:

```

    
    
    (tutorial-env)$python-mpipinstall-rrequirements.txt
    Collectingnovas==3.1.1.3(from-rrequirements.txt(line1))
    ...
    Collectingnumpy==1.9.2(from-rrequirements.txt(line2))
    ...
    Collectingrequests==2.7.0(from-rrequirements.txt(line3))
    ...
    Installingcollectedpackages:novas,numpy,requests
    Runningsetup.pyinstallfornovas
    Successfullyinstallednovas-3.1.1.3numpy-1.9.2requests-2.7.0
    
```

`pip` has many more options. Consult the [Installing Python Modules](../installing/index.html#installing-index) guide for complete documentation for `pip`. When you’ve written a package and want to make it available on the Python Package Index, consult the [Python packaging user guide](https://packaging.python.org/en/latest/tutorials/packaging-projects/).

### [Table of Contents](../contents.html)

  * [12. Virtual Environments and Packages](#)
    * [12.1. Introduction](#introduction)
    * [12.2. Creating Virtual Environments](#creating-virtual-environments)
    * [12.3. Managing Packages with pip](#managing-packages-with-pip)



#### Previous topic

[11. Brief Tour of the Standard Library — Part II](stdlib2.html "previous chapter")

#### Next topic

[13. What Now?](whatnow.html "next chapter")

### This Page

  * [Report a Bug](../bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/tutorial/venv.rst)



«

### Navigation

  * [index](../genindex.html "General Index")
  * [modules](../py-modindex.html "Python Module Index") |
  * [next](whatnow.html "13. What Now?") |
  * [previous](stdlib2.html "11. Brief Tour of the Standard Library — Part II") |
  * ![Python logo](../_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanishFrenchItalianJapaneseKoreanBrazilian PortugueseTurkishSimplified ChineseTraditional Chinese

dev (3.14)3.13.03.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6

  * [3.13.0 Documentation](../index.html) » 
  * [The Python Tutorial](index.html) »
  * [12. Virtual Environments and Packages]()
  * | 
  * Theme  Auto Light Dark |



© [ Copyright ](../copyright.html) 2001-2024, Python Software Foundation. This page is licensed under the Python Software Foundation License Version 2. Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License. See [History and License](/license.html) for more information. The Python Software Foundation is a non-profit corporation. [Please donate.](https://www.python.org/psf/donations/) Last updated on Nov 07, 2024 (15:51 UTC). [Found a bug](/bugs.html)? Created using [Sphinx](https://www.sphinx-doc.org/) 8.1.3. 
