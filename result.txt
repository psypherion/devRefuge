url='https://docs.python.org/3.10/tutorial/errors.html#predefined\n' html='<!DOCTYPE html><html><head>\n    <meta charset="utf-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0"><meta name="generator" content="Docutils 0.17.1: http://docutils.sourceforge.net/">\n\n    <title>8. Errors and Exceptions — Python 3.10.15 documentation</title><meta name="viewport" content="width=device-width, initial-scale=1.0">\n    \n    <link rel="stylesheet" href="../_static/pygments.css" type="text/css">\n    <link rel="stylesheet" href="../_static/pydoctheme.css" type="text/css">\n    <link id="pygments_dark_css" media="(prefers-color-scheme: dark)" rel="stylesheet" type="text/css" href="../_static/pygments_dark.css">\n    \n    <script id="documentation_options" data-url_root="../" src="../_static/documentation_options.js"></script>\n    <script src="../_static/jquery.js"></script>\n    <script src="../_static/underscore.js"></script>\n    <script src="../_static/doctools.js"></script>\n    \n    <script src="../_static/sidebar.js"></script>\n    \n    <link rel="search" type="application/opensearchdescription+xml" title="Search within Python 3.10.15 documentation" href="../_static/opensearch.xml">\n    <link rel="author" title="About these documents" href="../about.html">\n    <link rel="index" title="Index" href="../genindex.html">\n    <link rel="search" title="Search" href="../search.html">\n    <link rel="copyright" title="Copyright" href="../copyright.html">\n    <link rel="next" title="9. Classes" href="classes.html">\n    <link rel="prev" title="7. Input and Output" href="inputoutput.html">\n    <link rel="canonical" href="https://docs.python.org/3/tutorial/errors.html">\n    \n      \n    \n\n    \n    <style>\n      @media only screen {\n        table.full-width-table {\n            width: 100%;\n        }\n      }\n    </style>\n<link rel="stylesheet" href="../_static/pydoctheme_dark.css" media="(prefers-color-scheme: dark)" id="pydoctheme_dark_css">\n    <link rel="shortcut icon" type="image/png" href="../_static/py.svg">\n            <script type="text/javascript" src="../_static/copybutton.js"></script>\n            <script type="text/javascript" src="../_static/menu.js"></script>\n            <script type="text/javascript" src="../_static/search-focus.js"></script>\n            <script type="text/javascript" src="../_static/themetoggle.js"></script> \n\n  </head>\n<body>\n<div class="mobile-nav">\n    <input type="checkbox" id="menuToggler" class="toggler__input" aria-controls="navigation" aria-pressed="false" aria-expanded="false" role="button" aria-label="Menu">\n    <nav class="nav-content" role="navigation">\n        <label for="menuToggler" class="toggler__label">\n            <span></span>\n        </label>\n        <span class="nav-items-wrapper">\n            <a href="https://www.python.org/" class="nav-logo">\n                <img src="../_static/py.svg" alt="Python logo">\n            </a>\n            <span class="version_switcher_placeholder"><select id="version_select"><option value="3.14">dev (3.14)</option><option value="3.13">pre (3.13)</option><option value="3.12">3.12</option><option value="3.11">3.11</option><option value="3.10" selected="selected">3.10.15</option><option value="3.9">3.9</option><option value="3.8">3.8</option><option value="3.7">3.7</option><option value="3.6">3.6</option><option value="3.5">3.5</option><option value="3.4">3.4</option><option value="3.3">3.3</option><option value="3.2">3.2</option><option value="3.1">3.1</option><option value="3.0">3.0</option><option value="2.7">2.7</option><option value="2.6">2.6</option></select></span>\n            <form role="search" class="search" action="../search.html" method="get">\n                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" class="search-icon">\n                    <path fill-rule="nonzero" fill="currentColor" d="M15.5 14h-.79l-.28-.27a6.5 6.5 0 001.48-5.34c-.47-2.78-2.79-5-5.59-5.34a6.505 6.505 0 00-7.27 7.27c.34 2.8 2.56 5.12 5.34 5.59a6.5 6.5 0 005.34-1.48l.27.28v.79l4.25 4.25c.41.41 1.08.41 1.49 0 .41-.41.41-1.08 0-1.49L15.5 14zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"></path>\n                </svg>\n                <input placeholder="Quick search" aria-label="Quick search" type="search" name="q">\n                <input type="submit" value="Go">\n            </form>\n        </span>\n    </nav>\n    <div class="menu-wrapper">\n        <nav class="menu" role="navigation" aria-label="main navigation" tabindex="-1">\n            <div class="language_switcher_placeholder"><select id="language_select"><option value="en" selected="selected">English</option><option value="es">Spanish</option><option value="fr">French</option><option value="it">Italian</option><option value="ja">Japanese</option><option value="ko">Korean</option><option value="pt-br">Brazilian Portuguese</option><option value="tr">Turkish</option><option value="zh-cn">Simplified Chinese</option><option value="zh-tw">Traditional Chinese</option></select></div>\n            \n<label class="theme-selector-label">\n    Theme\n    <select class="theme-selector" oninput="activateTheme(this.value)">\n        <option value="auto" selected="">Auto</option>\n        <option value="light">Light</option>\n        <option value="dark">Dark</option>\n    </select>\n</label>\n  <h3><a href="../contents.html">Table of Contents</a></h3>\n  <ul>\n<li><a class="reference internal" href="#">8. Errors and Exceptions</a><ul>\n<li><a class="reference internal" href="#syntax-errors">8.1. Syntax Errors</a></li>\n<li><a class="reference internal" href="#exceptions">8.2. Exceptions</a></li>\n<li><a class="reference internal" href="#handling-exceptions">8.3. Handling Exceptions</a></li>\n<li><a class="reference internal" href="#raising-exceptions">8.4. Raising Exceptions</a></li>\n<li><a class="reference internal" href="#exception-chaining">8.5. Exception Chaining</a></li>\n<li><a class="reference internal" href="#user-defined-exceptions">8.6. User-defined Exceptions</a></li>\n<li><a class="reference internal" href="#defining-clean-up-actions">8.7. Defining Clean-up Actions</a></li>\n<li><a class="reference internal" href="#predefined-clean-up-actions">8.8. Predefined Clean-up Actions</a></li>\n</ul>\n</li>\n</ul>\n\n  <h4>Previous topic</h4>\n  <p class="topless"><a href="inputoutput.html" title="previous chapter"><span class="section-number">7. </span>Input and Output</a></p>\n  <h4>Next topic</h4>\n  <p class="topless"><a href="classes.html" title="next chapter"><span class="section-number">9. </span>Classes</a></p>\n  <div role="note" aria-label="source link">\n    <h3>This Page</h3>\n    <ul class="this-page-menu">\n      <li><a href="../bugs.html">Report a Bug</a></li>\n      <li>\n        <a href="https://github.com/python/cpython/blob/3.10/Doc/tutorial/errors.rst" rel="nofollow">Show Source\n        </a>\n      </li>\n    </ul>\n  </div>\n        </nav>\n    </div>\n</div>\n\n  \n    <div class="related" role="navigation" aria-label="related navigation">\n      <h3>Navigation</h3>\n      <ul>\n        <li class="right" style="margin-right: 10px">\n          <a href="../genindex.html" title="General Index" accesskey="I">index</a></li>\n        <li class="right">\n          <a href="../py-modindex.html" title="Python Module Index">modules</a> |</li>\n        <li class="right">\n          <a href="classes.html" title="9. Classes" accesskey="N">next</a> |</li>\n        <li class="right">\n          <a href="inputoutput.html" title="7. Input and Output" accesskey="P">previous</a> |</li>\n\n          <li><img src="../_static/py.svg" alt="Python logo" style="vertical-align: middle; margin-top: -1px"></li>\n          <li><a href="https://www.python.org/">Python</a> »</li>\n          <li class="switchers">\n            <div class="language_switcher_placeholder"><select id="language_select"><option value="en" selected="selected">English</option><option value="es">Spanish</option><option value="fr">French</option><option value="it">Italian</option><option value="ja">Japanese</option><option value="ko">Korean</option><option value="pt-br">Brazilian Portuguese</option><option value="tr">Turkish</option><option value="zh-cn">Simplified Chinese</option><option value="zh-tw">Traditional Chinese</option></select></div>\n            <div class="version_switcher_placeholder"><select id="version_select"><option value="3.14">dev (3.14)</option><option value="3.13">pre (3.13)</option><option value="3.12">3.12</option><option value="3.11">3.11</option><option value="3.10" selected="selected">3.10.15</option><option value="3.9">3.9</option><option value="3.8">3.8</option><option value="3.7">3.7</option><option value="3.6">3.6</option><option value="3.5">3.5</option><option value="3.4">3.4</option><option value="3.3">3.3</option><option value="3.2">3.2</option><option value="3.1">3.1</option><option value="3.0">3.0</option><option value="2.7">2.7</option><option value="2.6">2.6</option></select></div>\n          </li>\n          <li>\n              \n          </li>\n    <li id="cpython-language-and-version">\n      <a href="../index.html">3.10.15 Documentation</a> »\n    </li>\n\n          <li class="nav-item nav-item-1"><a href="index.html" accesskey="U">The Python Tutorial</a> »</li>\n        <li class="nav-item nav-item-this"><a href=""><span class="section-number">8. </span>Errors and Exceptions</a></li>\n                <li class="right">\n                    \n\n    <div class="inline-search" role="search">\n        <form class="inline-search" action="../search.html" method="get">\n          <input placeholder="Quick search" aria-label="Quick search" type="search" name="q" id="search-box">\n          <input type="submit" value="Go">\n        </form>\n    </div>\n                     |\n                </li>\n            <li class="right">\n<label class="theme-selector-label">\n    Theme\n    <select class="theme-selector" oninput="activateTheme(this.value)">\n        <option value="auto" selected="">Auto</option>\n        <option value="light">Light</option>\n        <option value="dark">Dark</option>\n    </select>\n</label> |</li>\n            \n      </ul>\n    </div>    \n\n    <div class="document">\n      <div class="documentwrapper">\n        <div class="bodywrapper">\n          <div class="body" role="main">\n            \n  <section id="errors-and-exceptions">\n<span id="tut-errors"></span><h1><span class="section-number">8. </span>Errors and Exceptions<a class="headerlink" href="#errors-and-exceptions" title="Permalink to this headline">¶</a></h1>\n<p>Until now error messages haven’t been more than mentioned, but if you have tried\nout the examples you have probably seen some.  There are (at least) two\ndistinguishable kinds of errors: <em>syntax errors</em> and <em>exceptions</em>.</p>\n<section id="syntax-errors">\n<span id="tut-syntaxerrors"></span><h2><span class="section-number">8.1. </span>Syntax Errors<a class="headerlink" href="#syntax-errors" title="Permalink to this headline">¶</a></h2>\n<p>Syntax errors, also known as parsing errors, are perhaps the most common kind of\ncomplaint you get while you are still learning Python:</p>\n<div class="highlight-python3 notranslate"><div class="highlight" style="position: relative;"><span class="copybutton" title="Hide the prompts and output" data-hidden="false">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="k">while</span> <span class="kc">True</span> <span class="nb">print</span><span class="p">(</span><span class="s1">\'Hello world\'</span><span class="p">)</span>\n  File <span class="nb">"&lt;stdin&gt;"</span>, line <span class="m">1</span>\n<span class="w">    </span><span class="k">while</span> <span class="kc">True</span> <span class="nb">print</span><span class="p">(</span><span class="s1">\'Hello world\'</span><span class="p">)</span>\n<span class="w">                   </span><span class="pm">^</span>\n<span class="gr">SyntaxError</span>: <span class="n">invalid syntax</span>\n</pre></div>\n</div>\n<p>The parser repeats the offending line and displays a little ‘arrow’ pointing at\nthe earliest point in the line where the error was detected.  The error is\ncaused by (or at least detected at) the token <em>preceding</em> the arrow: in the\nexample, the error is detected at the function <a class="reference internal" href="../library/functions.html#print" title="print"><code class="xref py py-func docutils literal notranslate"><span class="pre">print()</span></code></a>, since a colon\n(<code class="docutils literal notranslate"><span class="pre">\':\'</span></code>) is missing before it.  File name and line number are printed so you\nknow where to look in case the input came from a script.</p>\n</section>\n<section id="exceptions">\n<span id="tut-exceptions"></span><h2><span class="section-number">8.2. </span>Exceptions<a class="headerlink" href="#exceptions" title="Permalink to this headline">¶</a></h2>\n<p>Even if a statement or expression is syntactically correct, it may cause an\nerror when an attempt is made to execute it. Errors detected during execution\nare called <em>exceptions</em> and are not unconditionally fatal: you will soon learn\nhow to handle them in Python programs.  Most exceptions are not handled by\nprograms, however, and result in error messages as shown here:</p>\n<div class="highlight-python3 notranslate"><div class="highlight" style="position: relative;"><span class="copybutton" title="Hide the prompts and output" data-hidden="false">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="mi">10</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="mi">0</span><span class="p">)</span>\n<span class="gt">Traceback (most recent call last):</span>\n  File <span class="nb">"&lt;stdin&gt;"</span>, line <span class="m">1</span>, in <span class="n">&lt;module&gt;</span>\n<span class="gr">ZeroDivisionError</span>: <span class="n">division by zero</span>\n<span class="gp">&gt;&gt;&gt; </span><span class="mi">4</span> <span class="o">+</span> <span class="n">spam</span><span class="o">*</span><span class="mi">3</span>\n<span class="gt">Traceback (most recent call last):</span>\n  File <span class="nb">"&lt;stdin&gt;"</span>, line <span class="m">1</span>, in <span class="n">&lt;module&gt;</span>\n<span class="gr">NameError</span>: <span class="n">name \'spam\' is not defined</span>\n<span class="gp">&gt;&gt;&gt; </span><span class="s1">\'2\'</span> <span class="o">+</span> <span class="mi">2</span>\n<span class="gt">Traceback (most recent call last):</span>\n  File <span class="nb">"&lt;stdin&gt;"</span>, line <span class="m">1</span>, in <span class="n">&lt;module&gt;</span>\n<span class="gr">TypeError</span>: <span class="n">can only concatenate str (not "int") to str</span>\n</pre></div>\n</div>\n<p>The last line of the error message indicates what happened. Exceptions come in\ndifferent types, and the type is printed as part of the message: the types in\nthe example are <a class="reference internal" href="../library/exceptions.html#ZeroDivisionError" title="ZeroDivisionError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ZeroDivisionError</span></code></a>, <a class="reference internal" href="../library/exceptions.html#NameError" title="NameError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">NameError</span></code></a> and <a class="reference internal" href="../library/exceptions.html#TypeError" title="TypeError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">TypeError</span></code></a>.\nThe string printed as the exception type is the name of the built-in exception\nthat occurred.  This is true for all built-in exceptions, but need not be true\nfor user-defined exceptions (although it is a useful convention). Standard\nexception names are built-in identifiers (not reserved keywords).</p>\n<p>The rest of the line provides detail based on the type of exception and what\ncaused it.</p>\n<p>The preceding part of the error message shows the context where the exception\noccurred, in the form of a stack traceback. In general it contains a stack\ntraceback listing source lines; however, it will not display lines read from\nstandard input.</p>\n<p><a class="reference internal" href="../library/exceptions.html#bltin-exceptions"><span class="std std-ref">Built-in Exceptions</span></a> lists the built-in exceptions and their meanings.</p>\n</section>\n<section id="handling-exceptions">\n<span id="tut-handling"></span><h2><span class="section-number">8.3. </span>Handling Exceptions<a class="headerlink" href="#handling-exceptions" title="Permalink to this headline">¶</a></h2>\n<p>It is possible to write programs that handle selected exceptions. Look at the\nfollowing example, which asks the user for input until a valid integer has been\nentered, but allows the user to interrupt the program (using <kbd class="kbd docutils literal notranslate"><kbd class="kbd docutils literal notranslate">Control</kbd>-<kbd class="kbd docutils literal notranslate">C</kbd></kbd> or\nwhatever the operating system supports); note that a user-generated interruption\nis signalled by raising the <a class="reference internal" href="../library/exceptions.html#KeyboardInterrupt" title="KeyboardInterrupt"><code class="xref py py-exc docutils literal notranslate"><span class="pre">KeyboardInterrupt</span></code></a> exception.</p>\n<div class="highlight-python3 notranslate"><div class="highlight" style="position: relative;"><span class="copybutton" title="Hide the prompts and output" data-hidden="false">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="k">while</span> <span class="kc">True</span><span class="p">:</span>\n<span class="gp">... </span>    <span class="k">try</span><span class="p">:</span>\n<span class="gp">... </span>        <span class="n">x</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="s2">"Please enter a number: "</span><span class="p">))</span>\n<span class="gp">... </span>        <span class="k">break</span>\n<span class="gp">... </span>    <span class="k">except</span> <span class="ne">ValueError</span><span class="p">:</span>\n<span class="gp">... </span>        <span class="nb">print</span><span class="p">(</span><span class="s2">"Oops!  That was no valid number.  Try again..."</span><span class="p">)</span>\n<span class="gp">...</span>\n</pre></div>\n</div>\n<p>The <a class="reference internal" href="../reference/compound_stmts.html#try"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">try</span></code></a> statement works as follows.</p>\n<ul class="simple">\n<li><p>First, the <em>try clause</em> (the statement(s) between the <a class="reference internal" href="../reference/compound_stmts.html#try"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">try</span></code></a> and\n<a class="reference internal" href="../reference/compound_stmts.html#except"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">except</span></code></a> keywords) is executed.</p></li>\n<li><p>If no exception occurs, the <em>except clause</em> is skipped and execution of the\n<a class="reference internal" href="../reference/compound_stmts.html#try"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">try</span></code></a> statement is finished.</p></li>\n<li><p>If an exception occurs during execution of the <a class="reference internal" href="../reference/compound_stmts.html#try"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">try</span></code></a> clause, the rest of the\nclause is skipped.  Then, if its type matches the exception named after the\n<a class="reference internal" href="../reference/compound_stmts.html#except"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">except</span></code></a> keyword, the <em>except clause</em> is executed, and then execution\ncontinues after the try/except block.</p></li>\n<li><p>If an exception occurs which does not match the exception named in the <em>except\nclause</em>, it is passed on to outer <a class="reference internal" href="../reference/compound_stmts.html#try"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">try</span></code></a> statements; if no handler is\nfound, it is an <em>unhandled exception</em> and execution stops with a message as\nshown above.</p></li>\n</ul>\n<p>A <a class="reference internal" href="../reference/compound_stmts.html#try"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">try</span></code></a> statement may have more than one <em>except clause</em>, to specify\nhandlers for different exceptions.  At most one handler will be executed.\nHandlers only handle exceptions that occur in the corresponding <em>try clause</em>,\nnot in other handlers of the same <code class="xref std std-keyword docutils literal notranslate"><span class="pre">try</span></code> statement.  An <em>except clause</em>\nmay name multiple exceptions as a parenthesized tuple, for example:</p>\n<div class="highlight-python3 notranslate"><div class="highlight" style="position: relative;"><pre><span></span><span class="o">...</span> <span class="k">except</span> <span class="p">(</span><span class="ne">RuntimeError</span><span class="p">,</span> <span class="ne">TypeError</span><span class="p">,</span> <span class="ne">NameError</span><span class="p">):</span>\n<span class="o">...</span>     <span class="k">pass</span>\n</pre></div>\n</div>\n<p>A class in an <a class="reference internal" href="../reference/compound_stmts.html#except"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">except</span></code></a> clause is compatible with an exception if it is\nthe same class or a base class thereof (but not the other way around — an\n<em>except clause</em> listing a derived class is not compatible with a base class).\nFor example, the following code will print B, C, D in that order:</p>\n<div class="highlight-python3 notranslate"><div class="highlight" style="position: relative;"><pre><span></span><span class="k">class</span> <span class="nc">B</span><span class="p">(</span><span class="ne">Exception</span><span class="p">):</span>\n    <span class="k">pass</span>\n\n<span class="k">class</span> <span class="nc">C</span><span class="p">(</span><span class="n">B</span><span class="p">):</span>\n    <span class="k">pass</span>\n\n<span class="k">class</span> <span class="nc">D</span><span class="p">(</span><span class="n">C</span><span class="p">):</span>\n    <span class="k">pass</span>\n\n<span class="k">for</span> <span class="bp">cls</span> <span class="ow">in</span> <span class="p">[</span><span class="n">B</span><span class="p">,</span> <span class="n">C</span><span class="p">,</span> <span class="n">D</span><span class="p">]:</span>\n    <span class="k">try</span><span class="p">:</span>\n        <span class="k">raise</span> <span class="bp">cls</span><span class="p">()</span>\n    <span class="k">except</span> <span class="n">D</span><span class="p">:</span>\n        <span class="nb">print</span><span class="p">(</span><span class="s2">"D"</span><span class="p">)</span>\n    <span class="k">except</span> <span class="n">C</span><span class="p">:</span>\n        <span class="nb">print</span><span class="p">(</span><span class="s2">"C"</span><span class="p">)</span>\n    <span class="k">except</span> <span class="n">B</span><span class="p">:</span>\n        <span class="nb">print</span><span class="p">(</span><span class="s2">"B"</span><span class="p">)</span>\n</pre></div>\n</div>\n<p>Note that if the <em>except clauses</em> were reversed (with <code class="docutils literal notranslate"><span class="pre">except</span> <span class="pre">B</span></code> first), it\nwould have printed B, B, B — the first matching <em>except clause</em> is triggered.</p>\n<p>All exceptions inherit from <a class="reference internal" href="../library/exceptions.html#BaseException" title="BaseException"><code class="xref py py-exc docutils literal notranslate"><span class="pre">BaseException</span></code></a>, and so it can be used to serve\nas a wildcard. Use this with extreme caution, since it is easy to mask a real\nprogramming error in this way!  It can also be used to print an error message and\nthen re-raise the exception (allowing a caller to handle the exception as well):</p>\n<div class="highlight-python3 notranslate"><div class="highlight" style="position: relative;"><pre><span></span><span class="kn">import</span> <span class="nn">sys</span>\n\n<span class="k">try</span><span class="p">:</span>\n    <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">\'myfile.txt\'</span><span class="p">)</span>\n    <span class="n">s</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span>\n    <span class="n">i</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">strip</span><span class="p">())</span>\n<span class="k">except</span> <span class="ne">OSError</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>\n    <span class="nb">print</span><span class="p">(</span><span class="s2">"OS error: </span><span class="si">{0}</span><span class="s2">"</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">err</span><span class="p">))</span>\n<span class="k">except</span> <span class="ne">ValueError</span><span class="p">:</span>\n    <span class="nb">print</span><span class="p">(</span><span class="s2">"Could not convert data to an integer."</span><span class="p">)</span>\n<span class="k">except</span> <span class="ne">BaseException</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>\n    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Unexpected </span><span class="si">{</span><span class="n">err</span><span class="si">=}</span><span class="s2">, </span><span class="si">{</span><span class="nb">type</span><span class="p">(</span><span class="n">err</span><span class="p">)</span><span class="si">=}</span><span class="s2">"</span><span class="p">)</span>\n    <span class="k">raise</span>\n</pre></div>\n</div>\n<p>Alternatively the last except clause may omit the exception name(s), however the exception\nvalue must then be retrieved from <code class="docutils literal notranslate"><span class="pre">sys.exc_info()[1]</span></code>.</p>\n<p>The <a class="reference internal" href="../reference/compound_stmts.html#try"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">try</span></code></a> … <a class="reference internal" href="../reference/compound_stmts.html#except"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">except</span></code></a> statement has an optional <em>else\nclause</em>, which, when present, must follow all <em>except clauses</em>.  It is useful\nfor code that must be executed if the <em>try clause</em> does not raise an exception.\nFor example:</p>\n<div class="highlight-python3 notranslate"><div class="highlight" style="position: relative;"><pre><span></span><span class="k">for</span> <span class="n">arg</span> <span class="ow">in</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">:]:</span>\n    <span class="k">try</span><span class="p">:</span>\n        <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">arg</span><span class="p">,</span> <span class="s1">\'r\'</span><span class="p">)</span>\n    <span class="k">except</span> <span class="ne">OSError</span><span class="p">:</span>\n        <span class="nb">print</span><span class="p">(</span><span class="s1">\'cannot open\'</span><span class="p">,</span> <span class="n">arg</span><span class="p">)</span>\n    <span class="k">else</span><span class="p">:</span>\n        <span class="nb">print</span><span class="p">(</span><span class="n">arg</span><span class="p">,</span> <span class="s1">\'has\'</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">readlines</span><span class="p">()),</span> <span class="s1">\'lines\'</span><span class="p">)</span>\n        <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>\n</pre></div>\n</div>\n<p>The use of the <code class="xref std std-keyword docutils literal notranslate"><span class="pre">else</span></code> clause is better than adding additional code to\nthe <a class="reference internal" href="../reference/compound_stmts.html#try"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">try</span></code></a> clause because it avoids accidentally catching an exception\nthat wasn’t raised by the code being protected by the <code class="xref std std-keyword docutils literal notranslate"><span class="pre">try</span></code> …\n<code class="xref std std-keyword docutils literal notranslate"><span class="pre">except</span></code> statement.</p>\n<p>When an exception occurs, it may have an associated value, also known as the\nexception’s <em>argument</em>. The presence and type of the argument depend on the\nexception type.</p>\n<p>The <em>except clause</em> may specify a variable after the exception name.  The\nvariable is bound to an exception instance with the arguments stored in\n<code class="docutils literal notranslate"><span class="pre">instance.args</span></code>.  For convenience, the exception instance defines\n<code class="xref py py-meth docutils literal notranslate"><span class="pre">__str__()</span></code> so the arguments can be printed directly without having to\nreference <code class="docutils literal notranslate"><span class="pre">.args</span></code>.  One may also instantiate an exception first before\nraising it and add any attributes to it as desired.</p>\n<div class="highlight-python3 notranslate"><div class="highlight" style="position: relative;"><span class="copybutton" title="Hide the prompts and output" data-hidden="false">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="k">try</span><span class="p">:</span>\n<span class="gp">... </span>    <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s1">\'spam\'</span><span class="p">,</span> <span class="s1">\'eggs\'</span><span class="p">)</span>\n<span class="gp">... </span><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">inst</span><span class="p">:</span>\n<span class="gp">... </span>    <span class="nb">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">inst</span><span class="p">))</span>    <span class="c1"># the exception instance</span>\n<span class="gp">... </span>    <span class="nb">print</span><span class="p">(</span><span class="n">inst</span><span class="o">.</span><span class="n">args</span><span class="p">)</span>     <span class="c1"># arguments stored in .args</span>\n<span class="gp">... </span>    <span class="nb">print</span><span class="p">(</span><span class="n">inst</span><span class="p">)</span>          <span class="c1"># __str__ allows args to be printed directly,</span>\n<span class="gp">... </span>                         <span class="c1"># but may be overridden in exception subclasses</span>\n<span class="gp">... </span>    <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">inst</span><span class="o">.</span><span class="n">args</span>     <span class="c1"># unpack args</span>\n<span class="gp">... </span>    <span class="nb">print</span><span class="p">(</span><span class="s1">\'x =\'</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>\n<span class="gp">... </span>    <span class="nb">print</span><span class="p">(</span><span class="s1">\'y =\'</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>\n<span class="gp">...</span>\n<span class="go">&lt;class \'Exception\'&gt;</span>\n<span class="go">(\'spam\', \'eggs\')</span>\n<span class="go">(\'spam\', \'eggs\')</span>\n<span class="go">x = spam</span>\n<span class="go">y = eggs</span>\n</pre></div>\n</div>\n<p>If an exception has arguments, they are printed as the last part (‘detail’) of\nthe message for unhandled exceptions.</p>\n<p>Exception handlers don’t just handle exceptions if they occur immediately in the\n<em>try clause</em>, but also if they occur inside functions that are called (even\nindirectly) in the <em>try clause</em>. For example:</p>\n<div class="highlight-python3 notranslate"><div class="highlight" style="position: relative;"><span class="copybutton" title="Hide the prompts and output" data-hidden="false">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">this_fails</span><span class="p">():</span>\n<span class="gp">... </span>    <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="o">/</span><span class="mi">0</span>\n<span class="gp">...</span>\n<span class="gp">&gt;&gt;&gt; </span><span class="k">try</span><span class="p">:</span>\n<span class="gp">... </span>    <span class="n">this_fails</span><span class="p">()</span>\n<span class="gp">... </span><span class="k">except</span> <span class="ne">ZeroDivisionError</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>\n<span class="gp">... </span>    <span class="nb">print</span><span class="p">(</span><span class="s1">\'Handling run-time error:\'</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>\n<span class="gp">...</span>\n<span class="go">Handling run-time error: division by zero</span>\n</pre></div>\n</div>\n</section>\n<section id="raising-exceptions">\n<span id="tut-raising"></span><h2><span class="section-number">8.4. </span>Raising Exceptions<a class="headerlink" href="#raising-exceptions" title="Permalink to this headline">¶</a></h2>\n<p>The <a class="reference internal" href="../reference/simple_stmts.html#raise"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">raise</span></code></a> statement allows the programmer to force a specified\nexception to occur. For example:</p>\n<div class="highlight-python3 notranslate"><div class="highlight" style="position: relative;"><span class="copybutton" title="Hide the prompts and output" data-hidden="false">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="k">raise</span> <span class="ne">NameError</span><span class="p">(</span><span class="s1">\'HiThere\'</span><span class="p">)</span>\n<span class="gt">Traceback (most recent call last):</span>\n  File <span class="nb">"&lt;stdin&gt;"</span>, line <span class="m">1</span>, in <span class="n">&lt;module&gt;</span>\n<span class="gr">NameError</span>: <span class="n">HiThere</span>\n</pre></div>\n</div>\n<p>The sole argument to <a class="reference internal" href="../reference/simple_stmts.html#raise"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">raise</span></code></a> indicates the exception to be raised.\nThis must be either an exception instance or an exception class (a class that\nderives from <a class="reference internal" href="../library/exceptions.html#Exception" title="Exception"><code class="xref py py-class docutils literal notranslate"><span class="pre">Exception</span></code></a>).  If an exception class is passed, it will\nbe implicitly instantiated by calling its constructor with no arguments:</p>\n<div class="highlight-python3 notranslate"><div class="highlight" style="position: relative;"><pre><span></span><span class="k">raise</span> <span class="ne">ValueError</span>  <span class="c1"># shorthand for \'raise ValueError()\'</span>\n</pre></div>\n</div>\n<p>If you need to determine whether an exception was raised but don’t intend to\nhandle it, a simpler form of the <a class="reference internal" href="../reference/simple_stmts.html#raise"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">raise</span></code></a> statement allows you to\nre-raise the exception:</p>\n<div class="highlight-python3 notranslate"><div class="highlight" style="position: relative;"><span class="copybutton" title="Hide the prompts and output" data-hidden="false">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="k">try</span><span class="p">:</span>\n<span class="gp">... </span>    <span class="k">raise</span> <span class="ne">NameError</span><span class="p">(</span><span class="s1">\'HiThere\'</span><span class="p">)</span>\n<span class="gp">... </span><span class="k">except</span> <span class="ne">NameError</span><span class="p">:</span>\n<span class="gp">... </span>    <span class="nb">print</span><span class="p">(</span><span class="s1">\'An exception flew by!\'</span><span class="p">)</span>\n<span class="gp">... </span>    <span class="k">raise</span>\n<span class="gp">...</span>\n<span class="go">An exception flew by!</span>\n<span class="gt">Traceback (most recent call last):</span>\n  File <span class="nb">"&lt;stdin&gt;"</span>, line <span class="m">2</span>, in <span class="n">&lt;module&gt;</span>\n<span class="gr">NameError</span>: <span class="n">HiThere</span>\n</pre></div>\n</div>\n</section>\n<section id="exception-chaining">\n<span id="tut-exception-chaining"></span><h2><span class="section-number">8.5. </span>Exception Chaining<a class="headerlink" href="#exception-chaining" title="Permalink to this headline">¶</a></h2>\n<p>If an unhandled exception occurs inside an <a class="reference internal" href="../reference/compound_stmts.html#except"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">except</span></code></a> section, it will\nhave the exception being handled attached to it and included in the error\nmessage:</p>\n<div class="highlight-python3 notranslate"><div class="highlight" style="position: relative;"><span class="copybutton" title="Hide the prompts and output" data-hidden="false">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="k">try</span><span class="p">:</span>\n<span class="gp">... </span>    <span class="nb">open</span><span class="p">(</span><span class="s2">"database.sqlite"</span><span class="p">)</span>\n<span class="gp">... </span><span class="k">except</span> <span class="ne">OSError</span><span class="p">:</span>\n<span class="gp">... </span>    <span class="k">raise</span> <span class="ne">RuntimeError</span><span class="p">(</span><span class="s2">"unable to handle error"</span><span class="p">)</span>\n<span class="gp">...</span>\n<span class="gt">Traceback (most recent call last):</span>\n  File <span class="nb">"&lt;stdin&gt;"</span>, line <span class="m">2</span>, in <span class="n">&lt;module&gt;</span>\n<span class="gr">FileNotFoundError</span>: <span class="n">[Errno 2] No such file or directory: \'database.sqlite\'</span>\n\n<span class="gt">During handling of the above exception, another exception occurred:</span>\n\n<span class="gt">Traceback (most recent call last):</span>\n  File <span class="nb">"&lt;stdin&gt;"</span>, line <span class="m">4</span>, in <span class="n">&lt;module&gt;</span>\n<span class="gr">RuntimeError</span>: <span class="n">unable to handle error</span>\n</pre></div>\n</div>\n<p>To indicate that an exception is a direct consequence of another, the\n<a class="reference internal" href="../reference/simple_stmts.html#raise"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">raise</span></code></a> statement allows an optional <a class="reference internal" href="../reference/simple_stmts.html#raise"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">from</span></code></a> clause:</p>\n<div class="highlight-python3 notranslate"><div class="highlight" style="position: relative;"><pre><span></span><span class="c1"># exc must be exception instance or None.</span>\n<span class="k">raise</span> <span class="ne">RuntimeError</span> <span class="kn">from</span> <span class="nn">exc</span>\n</pre></div>\n</div>\n<p>This can be useful when you are transforming exceptions. For example:</p>\n<div class="highlight-python3 notranslate"><div class="highlight" style="position: relative;"><span class="copybutton" title="Hide the prompts and output" data-hidden="false">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">func</span><span class="p">():</span>\n<span class="gp">... </span>    <span class="k">raise</span> <span class="ne">ConnectionError</span>\n<span class="gp">...</span>\n<span class="gp">&gt;&gt;&gt; </span><span class="k">try</span><span class="p">:</span>\n<span class="gp">... </span>    <span class="n">func</span><span class="p">()</span>\n<span class="gp">... </span><span class="k">except</span> <span class="ne">ConnectionError</span> <span class="k">as</span> <span class="n">exc</span><span class="p">:</span>\n<span class="gp">... </span>    <span class="k">raise</span> <span class="ne">RuntimeError</span><span class="p">(</span><span class="s1">\'Failed to open database\'</span><span class="p">)</span> <span class="kn">from</span> <span class="nn">exc</span>\n<span class="gp">...</span>\n<span class="gt">Traceback (most recent call last):</span>\n  File <span class="nb">"&lt;stdin&gt;"</span>, line <span class="m">2</span>, in <span class="n">&lt;module&gt;</span>\n  File <span class="nb">"&lt;stdin&gt;"</span>, line <span class="m">2</span>, in <span class="n">func</span>\n<span class="gr">ConnectionError</span>\n\n<span class="gt">The above exception was the direct cause of the following exception:</span>\n\n<span class="gt">Traceback (most recent call last):</span>\n  File <span class="nb">"&lt;stdin&gt;"</span>, line <span class="m">4</span>, in <span class="n">&lt;module&gt;</span>\n<span class="gr">RuntimeError</span>: <span class="n">Failed to open database</span>\n</pre></div>\n</div>\n<p>It also allows disabling automatic exception chaining using the <code class="docutils literal notranslate"><span class="pre">from</span> <span class="pre">None</span></code>\nidiom:</p>\n<div class="highlight-python3 notranslate"><div class="highlight" style="position: relative;"><span class="copybutton" title="Hide the prompts and output" data-hidden="false">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="k">try</span><span class="p">:</span>\n<span class="gp">... </span>    <span class="nb">open</span><span class="p">(</span><span class="s1">\'database.sqlite\'</span><span class="p">)</span>\n<span class="gp">... </span><span class="k">except</span> <span class="ne">OSError</span><span class="p">:</span>\n<span class="gp">... </span>    <span class="k">raise</span> <span class="ne">RuntimeError</span> <span class="kn">from</span> <span class="kc">None</span>\n<span class="gp">...</span>\n<span class="gt">Traceback (most recent call last):</span>\n  File <span class="nb">"&lt;stdin&gt;"</span>, line <span class="m">4</span>, in <span class="n">&lt;module&gt;</span>\n<span class="gr">RuntimeError</span>\n</pre></div>\n</div>\n<p>For more information about chaining mechanics, see <a class="reference internal" href="../library/exceptions.html#bltin-exceptions"><span class="std std-ref">Built-in Exceptions</span></a>.</p>\n</section>\n<section id="user-defined-exceptions">\n<span id="tut-userexceptions"></span><h2><span class="section-number">8.6. </span>User-defined Exceptions<a class="headerlink" href="#user-defined-exceptions" title="Permalink to this headline">¶</a></h2>\n<p>Programs may name their own exceptions by creating a new exception class (see\n<a class="reference internal" href="classes.html#tut-classes"><span class="std std-ref">Classes</span></a> for more about Python classes).  Exceptions should typically\nbe derived from the <a class="reference internal" href="../library/exceptions.html#Exception" title="Exception"><code class="xref py py-exc docutils literal notranslate"><span class="pre">Exception</span></code></a> class, either directly or indirectly.</p>\n<p>Exception classes can be defined which do anything any other class can do, but\nare usually kept simple, often only offering a number of attributes that allow\ninformation about the error to be extracted by handlers for the exception.</p>\n<p>Most exceptions are defined with names that end in “Error”, similar to the\nnaming of the standard exceptions.</p>\n<p>Many standard modules define their own exceptions to report errors that may\noccur in functions they define.  More information on classes is presented in\nchapter <a class="reference internal" href="classes.html#tut-classes"><span class="std std-ref">Classes</span></a>.</p>\n</section>\n<section id="defining-clean-up-actions">\n<span id="tut-cleanup"></span><h2><span class="section-number">8.7. </span>Defining Clean-up Actions<a class="headerlink" href="#defining-clean-up-actions" title="Permalink to this headline">¶</a></h2>\n<p>The <a class="reference internal" href="../reference/compound_stmts.html#try"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">try</span></code></a> statement has another optional clause which is intended to\ndefine clean-up actions that must be executed under all circumstances.  For\nexample:</p>\n<div class="highlight-python3 notranslate"><div class="highlight" style="position: relative;"><span class="copybutton" title="Hide the prompts and output" data-hidden="false">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="k">try</span><span class="p">:</span>\n<span class="gp">... </span>    <span class="k">raise</span> <span class="ne">KeyboardInterrupt</span>\n<span class="gp">... </span><span class="k">finally</span><span class="p">:</span>\n<span class="gp">... </span>    <span class="nb">print</span><span class="p">(</span><span class="s1">\'Goodbye, world!\'</span><span class="p">)</span>\n<span class="gp">...</span>\n<span class="go">Goodbye, world!</span>\n<span class="gt">Traceback (most recent call last):</span>\n  File <span class="nb">"&lt;stdin&gt;"</span>, line <span class="m">2</span>, in <span class="n">&lt;module&gt;</span>\n<span class="nc">KeyboardInterrupt</span>\n</pre></div>\n</div>\n<p>If a <a class="reference internal" href="../reference/compound_stmts.html#finally"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">finally</span></code></a> clause is present, the <code class="xref std std-keyword docutils literal notranslate"><span class="pre">finally</span></code>\nclause will execute as the last task before the <a class="reference internal" href="../reference/compound_stmts.html#try"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">try</span></code></a>\nstatement completes. The <code class="xref std std-keyword docutils literal notranslate"><span class="pre">finally</span></code> clause runs whether or\nnot the <code class="xref std std-keyword docutils literal notranslate"><span class="pre">try</span></code> statement produces an exception. The following\npoints discuss more complex cases when an exception occurs:</p>\n<ul class="simple">\n<li><p>If an exception occurs during execution of the <code class="xref std std-keyword docutils literal notranslate"><span class="pre">try</span></code>\nclause, the exception may be handled by an <a class="reference internal" href="../reference/compound_stmts.html#except"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">except</span></code></a>\nclause. If the exception is not handled by an <code class="xref std std-keyword docutils literal notranslate"><span class="pre">except</span></code>\nclause, the exception is re-raised after the <code class="xref std std-keyword docutils literal notranslate"><span class="pre">finally</span></code>\nclause has been executed.</p></li>\n<li><p>An exception could occur during execution of an <code class="xref std std-keyword docutils literal notranslate"><span class="pre">except</span></code>\nor <code class="xref std std-keyword docutils literal notranslate"><span class="pre">else</span></code> clause. Again, the exception is re-raised after\nthe <code class="xref std std-keyword docutils literal notranslate"><span class="pre">finally</span></code> clause has been executed.</p></li>\n<li><p>If the <code class="xref std std-keyword docutils literal notranslate"><span class="pre">finally</span></code> clause executes a <a class="reference internal" href="../reference/simple_stmts.html#break"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">break</span></code></a>,\n<a class="reference internal" href="../reference/simple_stmts.html#continue"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">continue</span></code></a> or <a class="reference internal" href="../reference/simple_stmts.html#return"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">return</span></code></a> statement, exceptions are not\nre-raised.</p></li>\n<li><p>If the <code class="xref std std-keyword docutils literal notranslate"><span class="pre">try</span></code> statement reaches a <a class="reference internal" href="../reference/simple_stmts.html#break"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">break</span></code></a>,\n<a class="reference internal" href="../reference/simple_stmts.html#continue"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">continue</span></code></a> or <a class="reference internal" href="../reference/simple_stmts.html#return"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">return</span></code></a> statement, the\n<code class="xref std std-keyword docutils literal notranslate"><span class="pre">finally</span></code> clause will execute just prior to the\n<code class="xref std std-keyword docutils literal notranslate"><span class="pre">break</span></code>, <code class="xref std std-keyword docutils literal notranslate"><span class="pre">continue</span></code> or <code class="xref std std-keyword docutils literal notranslate"><span class="pre">return</span></code>\nstatement’s execution.</p></li>\n<li><p>If a <code class="xref std std-keyword docutils literal notranslate"><span class="pre">finally</span></code> clause includes a <code class="xref std std-keyword docutils literal notranslate"><span class="pre">return</span></code>\nstatement, the returned value will be the one from the\n<code class="xref std std-keyword docutils literal notranslate"><span class="pre">finally</span></code> clause’s <code class="xref std std-keyword docutils literal notranslate"><span class="pre">return</span></code> statement, not the\nvalue from the <code class="xref std std-keyword docutils literal notranslate"><span class="pre">try</span></code> clause’s <code class="xref std std-keyword docutils literal notranslate"><span class="pre">return</span></code>\nstatement.</p></li>\n</ul>\n<p>For example:</p>\n<div class="highlight-python3 notranslate"><div class="highlight" style="position: relative;"><span class="copybutton" title="Hide the prompts and output" data-hidden="false">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">bool_return</span><span class="p">():</span>\n<span class="gp">... </span>    <span class="k">try</span><span class="p">:</span>\n<span class="gp">... </span>        <span class="k">return</span> <span class="kc">True</span>\n<span class="gp">... </span>    <span class="k">finally</span><span class="p">:</span>\n<span class="gp">... </span>        <span class="k">return</span> <span class="kc">False</span>\n<span class="gp">...</span>\n<span class="gp">&gt;&gt;&gt; </span><span class="n">bool_return</span><span class="p">()</span>\n<span class="go">False</span>\n</pre></div>\n</div>\n<p>A more complicated example:</p>\n<div class="highlight-python3 notranslate"><div class="highlight" style="position: relative;"><span class="copybutton" title="Hide the prompts and output" data-hidden="false">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">divide</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>\n<span class="gp">... </span>    <span class="k">try</span><span class="p">:</span>\n<span class="gp">... </span>        <span class="n">result</span> <span class="o">=</span> <span class="n">x</span> <span class="o">/</span> <span class="n">y</span>\n<span class="gp">... </span>    <span class="k">except</span> <span class="ne">ZeroDivisionError</span><span class="p">:</span>\n<span class="gp">... </span>        <span class="nb">print</span><span class="p">(</span><span class="s2">"division by zero!"</span><span class="p">)</span>\n<span class="gp">... </span>    <span class="k">else</span><span class="p">:</span>\n<span class="gp">... </span>        <span class="nb">print</span><span class="p">(</span><span class="s2">"result is"</span><span class="p">,</span> <span class="n">result</span><span class="p">)</span>\n<span class="gp">... </span>    <span class="k">finally</span><span class="p">:</span>\n<span class="gp">... </span>        <span class="nb">print</span><span class="p">(</span><span class="s2">"executing finally clause"</span><span class="p">)</span>\n<span class="gp">...</span>\n<span class="gp">&gt;&gt;&gt; </span><span class="n">divide</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>\n<span class="go">result is 2.0</span>\n<span class="go">executing finally clause</span>\n<span class="gp">&gt;&gt;&gt; </span><span class="n">divide</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>\n<span class="go">division by zero!</span>\n<span class="go">executing finally clause</span>\n<span class="gp">&gt;&gt;&gt; </span><span class="n">divide</span><span class="p">(</span><span class="s2">"2"</span><span class="p">,</span> <span class="s2">"1"</span><span class="p">)</span>\n<span class="go">executing finally clause</span>\n<span class="gt">Traceback (most recent call last):</span>\n  File <span class="nb">"&lt;stdin&gt;"</span>, line <span class="m">1</span>, in <span class="n">&lt;module&gt;</span>\n  File <span class="nb">"&lt;stdin&gt;"</span>, line <span class="m">3</span>, in <span class="n">divide</span>\n<span class="gr">TypeError</span>: <span class="n">unsupported operand type(s) for /: \'str\' and \'str\'</span>\n</pre></div>\n</div>\n<p>As you can see, the <a class="reference internal" href="../reference/compound_stmts.html#finally"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">finally</span></code></a> clause is executed in any event.  The\n<a class="reference internal" href="../library/exceptions.html#TypeError" title="TypeError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">TypeError</span></code></a> raised by dividing two strings is not handled by the\n<a class="reference internal" href="../reference/compound_stmts.html#except"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">except</span></code></a> clause and therefore re-raised after the <code class="xref std std-keyword docutils literal notranslate"><span class="pre">finally</span></code>\nclause has been executed.</p>\n<p>In real world applications, the <a class="reference internal" href="../reference/compound_stmts.html#finally"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">finally</span></code></a> clause is useful for\nreleasing external resources (such as files or network connections), regardless\nof whether the use of the resource was successful.</p>\n</section>\n<section id="predefined-clean-up-actions">\n<span id="tut-cleanup-with"></span><h2><span class="section-number">8.8. </span>Predefined Clean-up Actions<a class="headerlink" href="#predefined-clean-up-actions" title="Permalink to this headline">¶</a></h2>\n<p>Some objects define standard clean-up actions to be undertaken when the object\nis no longer needed, regardless of whether or not the operation using the object\nsucceeded or failed. Look at the following example, which tries to open a file\nand print its contents to the screen.</p>\n<div class="highlight-python3 notranslate"><div class="highlight" style="position: relative;"><pre><span></span><span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">open</span><span class="p">(</span><span class="s2">"myfile.txt"</span><span class="p">):</span>\n    <span class="nb">print</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s2">""</span><span class="p">)</span>\n</pre></div>\n</div>\n<p>The problem with this code is that it leaves the file open for an indeterminate\namount of time after this part of the code has finished executing.\nThis is not an issue in simple scripts, but can be a problem for larger\napplications. The <a class="reference internal" href="../reference/compound_stmts.html#with"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">with</span></code></a> statement allows objects like files to be\nused in a way that ensures they are always cleaned up promptly and correctly.</p>\n<div class="highlight-python3 notranslate"><div class="highlight" style="position: relative;"><pre><span></span><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s2">"myfile.txt"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>\n    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="p">:</span>\n        <span class="nb">print</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s2">""</span><span class="p">)</span>\n</pre></div>\n</div>\n<p>After the statement is executed, the file <em>f</em> is always closed, even if a\nproblem was encountered while processing the lines. Objects which, like files,\nprovide predefined clean-up actions will indicate this in their documentation.</p>\n</section>\n</section>\n\n\n            <div class="clearer"></div>\n          </div>\n        </div>\n      </div>\n      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">\n        <div class="sphinxsidebarwrapper">\n  <h3><a href="../contents.html">Table of Contents</a></h3>\n  <ul>\n<li><a class="reference internal" href="#">8. Errors and Exceptions</a><ul>\n<li><a class="reference internal" href="#syntax-errors">8.1. Syntax Errors</a></li>\n<li><a class="reference internal" href="#exceptions">8.2. Exceptions</a></li>\n<li><a class="reference internal" href="#handling-exceptions">8.3. Handling Exceptions</a></li>\n<li><a class="reference internal" href="#raising-exceptions">8.4. Raising Exceptions</a></li>\n<li><a class="reference internal" href="#exception-chaining">8.5. Exception Chaining</a></li>\n<li><a class="reference internal" href="#user-defined-exceptions">8.6. User-defined Exceptions</a></li>\n<li><a class="reference internal" href="#defining-clean-up-actions">8.7. Defining Clean-up Actions</a></li>\n<li><a class="reference internal" href="#predefined-clean-up-actions">8.8. Predefined Clean-up Actions</a></li>\n</ul>\n</li>\n</ul>\n\n  <h4>Previous topic</h4>\n  <p class="topless"><a href="inputoutput.html" title="previous chapter"><span class="section-number">7. </span>Input and Output</a></p>\n  <h4>Next topic</h4>\n  <p class="topless"><a href="classes.html" title="next chapter"><span class="section-number">9. </span>Classes</a></p>\n  <div role="note" aria-label="source link">\n    <h3>This Page</h3>\n    <ul class="this-page-menu">\n      <li><a href="../bugs.html">Report a Bug</a></li>\n      <li>\n        <a href="https://github.com/python/cpython/blob/3.10/Doc/tutorial/errors.rst" rel="nofollow">Show Source\n        </a>\n      </li>\n    </ul>\n  </div>\n        </div>\n      <div id="sidebarbutton"><span>«</span></div></div>\n      <div class="clearer"></div>\n    </div>  \n    <div class="related" role="navigation" aria-label="related navigation">\n      <h3>Navigation</h3>\n      <ul>\n        <li class="right" style="margin-right: 10px">\n          <a href="../genindex.html" title="General Index">index</a></li>\n        <li class="right">\n          <a href="../py-modindex.html" title="Python Module Index">modules</a> |</li>\n        <li class="right">\n          <a href="classes.html" title="9. Classes">next</a> |</li>\n        <li class="right">\n          <a href="inputoutput.html" title="7. Input and Output">previous</a> |</li>\n\n          <li><img src="../_static/py.svg" alt="Python logo" style="vertical-align: middle; margin-top: -1px"></li>\n          <li><a href="https://www.python.org/">Python</a> »</li>\n          <li class="switchers">\n            <div class="language_switcher_placeholder"><select id="language_select"><option value="en" selected="selected">English</option><option value="es">Spanish</option><option value="fr">French</option><option value="it">Italian</option><option value="ja">Japanese</option><option value="ko">Korean</option><option value="pt-br">Brazilian Portuguese</option><option value="tr">Turkish</option><option value="zh-cn">Simplified Chinese</option><option value="zh-tw">Traditional Chinese</option></select></div>\n            <div class="version_switcher_placeholder"><select id="version_select"><option value="3.14">dev (3.14)</option><option value="3.13">pre (3.13)</option><option value="3.12">3.12</option><option value="3.11">3.11</option><option value="3.10" selected="selected">3.10.15</option><option value="3.9">3.9</option><option value="3.8">3.8</option><option value="3.7">3.7</option><option value="3.6">3.6</option><option value="3.5">3.5</option><option value="3.4">3.4</option><option value="3.3">3.3</option><option value="3.2">3.2</option><option value="3.1">3.1</option><option value="3.0">3.0</option><option value="2.7">2.7</option><option value="2.6">2.6</option></select></div>\n          </li>\n          <li>\n              \n          </li>\n    <li id="cpython-language-and-version">\n      <a href="../index.html">3.10.15 Documentation</a> »\n    </li>\n\n          <li class="nav-item nav-item-1"><a href="index.html">The Python Tutorial</a> »</li>\n        <li class="nav-item nav-item-this"><a href=""><span class="section-number">8. </span>Errors and Exceptions</a></li>\n                <li class="right">\n                    \n\n    <div class="inline-search" role="search">\n        <form class="inline-search" action="../search.html" method="get">\n          <input placeholder="Quick search" aria-label="Quick search" type="search" name="q" id="search-box">\n          <input type="submit" value="Go">\n        </form>\n    </div>\n                     |\n                </li>\n            <li class="right">\n<label class="theme-selector-label">\n    Theme\n    <select class="theme-selector" oninput="activateTheme(this.value)">\n        <option value="auto" selected="">Auto</option>\n        <option value="light">Light</option>\n        <option value="dark">Dark</option>\n    </select>\n</label> |</li>\n            \n      </ul>\n    </div>  \n    <div class="footer">\n    © \n      <a href="../copyright.html">\n    \n    Copyright\n    \n      </a>\n     2001-2024, Python Software Foundation.\n    <br>\n    This page is licensed under the Python Software Foundation License Version 2.\n    <br>\n    Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\n    <br>\n    \n      See <a href="/license.html">History and License</a> for more information.<br>\n    \n    \n    <br>\n\n    The Python Software Foundation is a non-profit corporation.\n<a href="https://www.python.org/psf/donations/">Please donate.</a>\n<br>\n    <br>\n      Last updated on Sep 09, 2024.\n    \n      <a href="/bugs.html">Found a bug</a>?\n    \n    <br>\n\n    Created using <a href="https://www.sphinx-doc.org/">Sphinx</a> 3.4.3.\n    </div>\n\n    <script type="text/javascript" src="../_static/switchers.js"></script>\n  \n</body></html>' success=True cleaned_html='<body>\n <div>\n  <nav>\n   <span>\n    <a href=\'\\"https://www.python.org/\\"\'>\n     <img alt=\'\\"Python\' logo\\"="" src=\'\\"../_static/py.svg\\"/\'/>\n    </a>\n    <span>\n     <select>\n      <option>\n       dev (3.14)\n      </option>\n      <option>\n       pre (3.13)\n      </option>\n      <option>\n       3.12\n      </option>\n      <option>\n       3.11\n      </option>\n      <option>\n       3.10.15\n      </option>\n      <option>\n       3.9\n      </option>\n      <option>\n       3.8\n      </option>\n      <option>\n       3.7\n      </option>\n      <option>\n       3.6\n      </option>\n      <option>\n       3.5\n      </option>\n      <option>\n       3.4\n      </option>\n      <option>\n       3.3\n      </option>\n      <option>\n       3.2\n      </option>\n      <option>\n       3.1\n      </option>\n      <option>\n       3.0\n      </option>\n      <option>\n       2.7\n      </option>\n      <option>\n       2.6\n      </option>\n     </select>\n    </span>\n   </span>\n  </nav>\n  <div>\n   <nav>\n    <div>\n     <select>\n      <option>\n       English\n      </option>\n      <option>\n       Spanish\n      </option>\n      <option>\n       French\n      </option>\n      <option>\n       Italian\n      </option>\n      <option>\n       Japanese\n      </option>\n      <option>\n       Korean\n      </option>\n      <option>\n       Brazilian Portuguese\n      </option>\n      <option>\n       Turkish\n      </option>\n      <option>\n       Simplified Chinese\n      </option>\n      <option>\n       Traditional Chinese\n      </option>\n     </select>\n    </div>\n    <label>\n     Theme\n     <select>\n      <option>\n       Auto\n      </option>\n      <option>\n       Light\n      </option>\n      <option>\n       Dark\n      </option>\n     </select>\n    </label>\n    <h3>\n     <a href=\'\\"../contents.html\\"\'>\n      Table of Contents\n     </a>\n    </h3>\n    <ul>\n     <li>\n      <a href=\'\\"#\\"\'>\n       8. Errors and Exceptions\n      </a>\n      <ul>\n       <li>\n        <a href=\'\\"#syntax-errors\\"\'>\n         8.1. Syntax Errors\n        </a>\n       </li>\n       <li>\n        <a href=\'\\"#exceptions\\"\'>\n         8.2. Exceptions\n        </a>\n       </li>\n       <li>\n        <a href=\'\\"#handling-exceptions\\"\'>\n         8.3. Handling Exceptions\n        </a>\n       </li>\n       <li>\n        <a href=\'\\"#raising-exceptions\\"\'>\n         8.4. Raising Exceptions\n        </a>\n       </li>\n       <li>\n        <a href=\'\\"#exception-chaining\\"\'>\n         8.5. Exception Chaining\n        </a>\n       </li>\n       <li>\n        <a href=\'\\"#user-defined-exceptions\\"\'>\n         8.6. User-defined Exceptions\n        </a>\n       </li>\n       <li>\n        <a href=\'\\"#defining-clean-up-actions\\"\'>\n         8.7. Defining Clean-up Actions\n        </a>\n       </li>\n       <li>\n        <a href=\'\\"#predefined-clean-up-actions\\"\'>\n         8.8. Predefined Clean-up Actions\n        </a>\n       </li>\n      </ul>\n     </li>\n    </ul>\n    <h4>\n     Previous topic\n    </h4>\n    <p>\n     <a chapter\\"="" href=\'\\"inputoutput.html\\"\' title=\'\\"previous\'>\n      <span>\n       7.\n      </span>\n      Input and Output\n     </a>\n    </p>\n    <h4>\n     Next topic\n    </h4>\n    <p>\n     <a chapter\\"="" href=\'\\"classes.html\\"\' title=\'\\"next\'>\n      <span>\n       9.\n      </span>\n      Classes\n     </a>\n    </p>\n    <div>\n     <h3>\n      This Page\n     </h3>\n     <ul>\n      <li>\n       <a href=\'\\"../bugs.html\\"\'>\n        Report a Bug\n       </a>\n      </li>\n      <li>\n       <a href=\'\\"https://github.com/python/cpython/blob/3.10/Doc/tutorial/errors.rst\\"\'>\n        Show Source\n       </a>\n      </li>\n     </ul>\n    </div>\n   </nav>\n  </div>\n </div>\n <div>\n  <h3>\n   Navigation\n  </h3>\n  <ul>\n   <li>\n    <a href=\'\\"../genindex.html\\"\' index\\"="" title=\'\\"General\'>\n     index\n    </a>\n   </li>\n   <li>\n    <a href=\'\\"../py-modindex.html\\"\' index\\"="" module="" title=\'\\"Python\'>\n     modules\n    </a>\n    |\n   </li>\n   <li>\n    <a classes\\"="" href=\'\\"classes.html\\"\' title=\'\\"9.\'>\n     next\n    </a>\n    |\n   </li>\n   <li>\n    <a and="" href=\'\\"inputoutput.html\\"\' input="" output\\"="" title=\'\\"7.\'>\n     previous\n    </a>\n    |\n   </li>\n   <li>\n    <img -1px\\"="" alt=\'\\"Python\' logo\\"="" margin-top:="" middle;="" src=\'\\"../_static/py.svg\\"\' style=\'\\"vertical-align:\'/>\n   </li>\n   <li>\n    <a href=\'\\"https://www.python.org/\\"\'>\n     Python\n    </a>\n    »\n   </li>\n   <li>\n    <div>\n     <select>\n      <option>\n       English\n      </option>\n      <option>\n       Spanish\n      </option>\n      <option>\n       French\n      </option>\n      <option>\n       Italian\n      </option>\n      <option>\n       Japanese\n      </option>\n      <option>\n       Korean\n      </option>\n      <option>\n       Brazilian Portuguese\n      </option>\n      <option>\n       Turkish\n      </option>\n      <option>\n       Simplified Chinese\n      </option>\n      <option>\n       Traditional Chinese\n      </option>\n     </select>\n    </div>\n    <div>\n     <select>\n      <option>\n       dev (3.14)\n      </option>\n      <option>\n       pre (3.13)\n      </option>\n      <option>\n       3.12\n      </option>\n      <option>\n       3.11\n      </option>\n      <option>\n       3.10.15\n      </option>\n      <option>\n       3.9\n      </option>\n      <option>\n       3.8\n      </option>\n      <option>\n       3.7\n      </option>\n      <option>\n       3.6\n      </option>\n      <option>\n       3.5\n      </option>\n      <option>\n       3.4\n      </option>\n      <option>\n       3.3\n      </option>\n      <option>\n       3.2\n      </option>\n      <option>\n       3.1\n      </option>\n      <option>\n       3.0\n      </option>\n      <option>\n       2.7\n      </option>\n      <option>\n       2.6\n      </option>\n     </select>\n    </div>\n   </li>\n   <li>\n    <a href=\'\\"../index.html\\"\'>\n     3.10.15 Documentation\n    </a>\n    »\n   </li>\n   <li>\n    <a href=\'\\"index.html\\"\'>\n     The Python Tutorial\n    </a>\n    »\n   </li>\n   <li>\n    <a href=\'\\"\\"\'>\n     <span>\n      8.\n     </span>\n     Errors and Exceptions\n    </a>\n   </li>\n   <li>\n    |\n   </li>\n   <li>\n    <label>\n     Theme\n     <select>\n      <option>\n       Auto\n      </option>\n      <option>\n       Light\n      </option>\n      <option>\n       Dark\n      </option>\n     </select>\n    </label>\n    |\n   </li>\n  </ul>\n </div>\n <div>\n  <div>\n   <div>\n    <div>\n     <section>\n      <h1>\n       <span>\n        8.\n       </span>\n       Errors and Exceptions\n       <a headline\\"="" href=\'\\"#errors-and-exceptions\\"\' this="" title=\'\\"Permalink\' to="">\n        ¶\n       </a>\n      </h1>\n      <p>\n       Until now error messages haven’t been more than mentioned, but if you have tried\nout the examples you have probably seen some. There are (at least) two\ndistinguishable kinds of errors:\n       <em>\n        syntax errors\n       </em>\n       and\n       <em>\n        exceptions\n       </em>\n       .\n      </p>\n      <section>\n       <h2>\n        <span>\n         8.1.\n        </span>\n        Syntax Errors\n        <a headline\\"="" href=\'\\"#syntax-errors\\"\' this="" title=\'\\"Permalink\' to="">\n         ¶\n        </a>\n       </h2>\n       <p>\n        Syntax errors, also known as parsing errors, are perhaps the most common kind of\ncomplaint you get while you are still learning Python:\n       </p>\n       <div>\n        <div>\n         <span and="" output\\"="" prompts="" the="" title=\'\\"Hide\'>\n          &gt;&gt;&gt;\n         </span>\n         <pre><span>&gt;&gt;&gt; </span><span>while</span> <span>True</span> <span>print</span><span>(</span><span>\\\'Hello world\\\'</span><span>)</span>\n File <span>\\"&lt;stdin&gt;\\"</span>, line <span>1</span>\n<span>while</span> <span>True</span> <span>print</span><span>(</span><span>\\\'Hello world\\\'</span><span>)</span>\n<span>^</span>\n<span>SyntaxError</span>: <span>invalid syntax</span>\n</pre>\n        </div>\n       </div>\n       <p>\n        The parser repeats the offending line and displays a little ‘arrow’ pointing at\nthe earliest point in the line where the error was detected. The error is\ncaused by (or at least detected at) the token\n        <em>\n         preceding\n        </em>\n        the arrow: in the\nexample, the error is detected at the function\n        <a href=\'\\"../library/functions.html#print\\"\' title=\'\\"print\\"\'>\n         <code>\n          <span>\n           print()\n          </span>\n         </code>\n        </a>\n        , since a colon\n(\n        <code>\n         <span>\n          \\\':\\\'\n         </span>\n        </code>\n        ) is missing before it. File name and line number are printed so you\nknow where to look in case the input came from a script.\n       </p>\n      </section>\n      <section>\n       <h2>\n        <span>\n         8.2.\n        </span>\n        Exceptions\n        <a headline\\"="" href=\'\\"#exceptions\\"\' this="" title=\'\\"Permalink\' to="">\n         ¶\n        </a>\n       </h2>\n       <p>\n        Even if a statement or expression is syntactically correct, it may cause an\nerror when an attempt is made to execute it. Errors detected during execution\nare called\n        <em>\n         exceptions\n        </em>\n        and are not unconditionally fatal: you will soon learn\nhow to handle them in Python programs. Most exceptions are not handled by\nprograms, however, and result in error messages as shown here:\n       </p>\n       <div>\n        <div>\n         <span and="" output\\"="" prompts="" the="" title=\'\\"Hide\'>\n          &gt;&gt;&gt;\n         </span>\n         <pre><span>&gt;&gt;&gt; </span><span>10</span> <span>*</span> <span>(</span><span>1</span><span>/</span><span>0</span><span>)</span>\n<span>Traceback (most recent call last):</span>\n File <span>\\"&lt;stdin&gt;\\"</span>, line <span>1</span>, in <span>&lt;module&gt;</span>\n<span>ZeroDivisionError</span>: <span>division by zero</span>\n<span>&gt;&gt;&gt; </span><span>4</span> <span>+</span> <span>spam</span><span>*</span><span>3</span>\n<span>Traceback (most recent call last):</span>\n File <span>\\"&lt;stdin&gt;\\"</span>, line <span>1</span>, in <span>&lt;module&gt;</span>\n<span>NameError</span>: <span>name \\\'spam\\\' is not defined</span>\n<span>&gt;&gt;&gt; </span><span>\\\'2\\\'</span> <span>+</span> <span>2</span>\n<span>Traceback (most recent call last):</span>\n File <span>\\"&lt;stdin&gt;\\"</span>, line <span>1</span>, in <span>&lt;module&gt;</span>\n<span>TypeError</span>: <span>can only concatenate str (not \\"int\\") to str</span>\n</pre>\n        </div>\n       </div>\n       <p>\n        The last line of the error message indicates what happened. Exceptions come in\ndifferent types, and the type is printed as part of the message: the types in\nthe example are\n        <a href=\'\\"../library/exceptions.html#ZeroDivisionError\\"\' title=\'\\"ZeroDivisionError\\"\'>\n         <code>\n          <span>\n           ZeroDivisionError\n          </span>\n         </code>\n        </a>\n        ,\n        <a href=\'\\"../library/exceptions.html#NameError\\"\' title=\'\\"NameError\\"\'>\n         <code>\n          <span>\n           NameError\n          </span>\n         </code>\n        </a>\n        and\n        <a href=\'\\"../library/exceptions.html#TypeError\\"\' title=\'\\"TypeError\\"\'>\n         <code>\n          <span>\n           TypeError\n          </span>\n         </code>\n        </a>\n        .\nThe string printed as the exception type is the name of the built-in exception\nthat occurred. This is true for all built-in exceptions, but need not be true\nfor user-defined exceptions (although it is a useful convention). Standard\nexception names are built-in identifiers (not reserved keywords).\n       </p>\n       <p>\n        The rest of the line provides detail based on the type of exception and what\ncaused it.\n       </p>\n       <p>\n        The preceding part of the error message shows the context where the exception\noccurred, in the form of a stack traceback. In general it contains a stack\ntraceback listing source lines; however, it will not display lines read from\nstandard input.\n       </p>\n       <p>\n        <a href=\'\\"../library/exceptions.html#bltin-exceptions\\"\'>\n         <span>\n          Built-in Exceptions\n         </span>\n        </a>\n        lists the built-in exceptions and their meanings.\n       </p>\n      </section>\n      <section>\n       <h2>\n        <span>\n         8.3.\n        </span>\n        Handling Exceptions\n        <a headline\\"="" href=\'\\"#handling-exceptions\\"\' this="" title=\'\\"Permalink\' to="">\n         ¶\n        </a>\n       </h2>\n       <p>\n        It is possible to write programs that handle selected exceptions. Look at the\nfollowing example, which asks the user for input until a valid integer has been\nentered, but allows the user to interrupt the program (using\n        <kbd>\n         <kbd>\n          Control\n         </kbd>\n         -\n         <kbd>\n          C\n         </kbd>\n        </kbd>\n        or\nwhatever the operating system supports); note that a user-generated interruption\nis signalled by raising the\n        <a href=\'\\"../library/exceptions.html#KeyboardInterrupt\\"\' title=\'\\"KeyboardInterrupt\\"\'>\n         <code>\n          <span>\n           KeyboardInterrupt\n          </span>\n         </code>\n        </a>\n        exception.\n       </p>\n       <div>\n        <div>\n         <span and="" output\\"="" prompts="" the="" title=\'\\"Hide\'>\n          &gt;&gt;&gt;\n         </span>\n         <pre><span>&gt;&gt;&gt; </span><span>while</span> <span>True</span><span>:</span>\n<span>... </span>  <span>try</span><span>:</span>\n<span>... </span>    <span>x</span> <span>=</span> <span>int</span><span>(</span><span>input</span><span>(</span><span>\\"Please enter a number: \\"</span><span>))</span>\n<span>... </span>    <span>break</span>\n<span>... </span>  <span>except</span> <span>ValueError</span><span>:</span>\n<span>... </span>    <span>print</span><span>(</span><span>\\"Oops! That was no valid number. Try again...\\"</span><span>)</span>\n<span>...</span>\n</pre>\n        </div>\n       </div>\n       <p>\n        The\n        <a href=\'\\"../reference/compound_stmts.html#try\\"\'>\n         <code>\n          <span>\n           try\n          </span>\n         </code>\n        </a>\n        statement works as follows.\n       </p>\n       <ul>\n        <li>\n         <p>\n          First, the\n          <em>\n           try clause\n          </em>\n          (the statement(s) between the\n          <a href=\'\\"../reference/compound_stmts.html#try\\"\'>\n           <code>\n            <span>\n             try\n            </span>\n           </code>\n          </a>\n          and\n          <a href=\'\\"../reference/compound_stmts.html#except\\"\'>\n           <code>\n            <span>\n             except\n            </span>\n           </code>\n          </a>\n          keywords) is executed.\n         </p>\n        </li>\n        <li>\n         <p>\n          If no exception occurs, the\n          <em>\n           except clause\n          </em>\n          is skipped and execution of the\n          <a href=\'\\"../reference/compound_stmts.html#try\\"\'>\n           <code>\n            <span>\n             try\n            </span>\n           </code>\n          </a>\n          statement is finished.\n         </p>\n        </li>\n        <li>\n         <p>\n          If an exception occurs during execution of the\n          <a href=\'\\"../reference/compound_stmts.html#try\\"\'>\n           <code>\n            <span>\n             try\n            </span>\n           </code>\n          </a>\n          clause, the rest of the\nclause is skipped. Then, if its type matches the exception named after the\n          <a href=\'\\"../reference/compound_stmts.html#except\\"\'>\n           <code>\n            <span>\n             except\n            </span>\n           </code>\n          </a>\n          keyword, the\n          <em>\n           except clause\n          </em>\n          is executed, and then execution\ncontinues after the try/except block.\n         </p>\n        </li>\n        <li>\n         <p>\n          If an exception occurs which does not match the exception named in the\n          <em>\n           except\nclause\n          </em>\n          , it is passed on to outer\n          <a href=\'\\"../reference/compound_stmts.html#try\\"\'>\n           <code>\n            <span>\n             try\n            </span>\n           </code>\n          </a>\n          statements; if no handler is\nfound, it is an\n          <em>\n           unhandled exception\n          </em>\n          and execution stops with a message as\nshown above.\n         </p>\n        </li>\n       </ul>\n       <p>\n        A\n        <a href=\'\\"../reference/compound_stmts.html#try\\"\'>\n         <code>\n          <span>\n           try\n          </span>\n         </code>\n        </a>\n        statement may have more than one\n        <em>\n         except clause\n        </em>\n        , to specify\nhandlers for different exceptions. At most one handler will be executed.\nHandlers only handle exceptions that occur in the corresponding\n        <em>\n         try clause\n        </em>\n        ,\nnot in other handlers of the same\n        <code>\n         <span>\n          try\n         </span>\n        </code>\n        statement. An\n        <em>\n         except clause\n        </em>\n        may name multiple exceptions as a parenthesized tuple, for example:\n       </p>\n       <div>\n        <div>\n         <pre><span>...</span> <span>except</span> <span>(</span><span>RuntimeError</span><span>,</span> <span>TypeError</span><span>,</span> <span>NameError</span><span>):</span>\n<span>...</span>   <span>pass</span>\n</pre>\n        </div>\n       </div>\n       <p>\n        A class in an\n        <a href=\'\\"../reference/compound_stmts.html#except\\"\'>\n         <code>\n          <span>\n           except\n          </span>\n         </code>\n        </a>\n        clause is compatible with an exception if it is\nthe same class or a base class thereof (but not the other way around — an\n        <em>\n         except clause\n        </em>\n        listing a derived class is not compatible with a base class).\nFor example, the following code will print B, C, D in that order:\n       </p>\n       <div>\n        <div>\n         <pre><span>class</span> <span>B</span><span>(</span><span>Exception</span><span>):</span>\n  <span>pass</span>\n<span>class</span> <span>C</span><span>(</span><span>B</span><span>):</span>\n  <span>pass</span>\n<span>class</span> <span>D</span><span>(</span><span>C</span><span>):</span>\n  <span>pass</span>\n<span>for</span> <span>cls</span> <span>in</span> <span>[</span><span>B</span><span>,</span> <span>C</span><span>,</span> <span>D</span><span>]:</span>\n  <span>try</span><span>:</span>\n    <span>raise</span> <span>cls</span><span>()</span>\n  <span>except</span> <span>D</span><span>:</span>\n    <span>print</span><span>(</span><span>\\"D\\"</span><span>)</span>\n  <span>except</span> <span>C</span><span>:</span>\n    <span>print</span><span>(</span><span>\\"C\\"</span><span>)</span>\n  <span>except</span> <span>B</span><span>:</span>\n    <span>print</span><span>(</span><span>\\"B\\"</span><span>)</span>\n</pre>\n        </div>\n       </div>\n       <p>\n        Note that if the\n        <em>\n         except clauses\n        </em>\n        were reversed (with\n        <code>\n         <span>\n          except\n         </span>\n         <span>\n          B\n         </span>\n        </code>\n        first), it\nwould have printed B, B, B — the first matching\n        <em>\n         except clause\n        </em>\n        is triggered.\n       </p>\n       <p>\n        All exceptions inherit from\n        <a href=\'\\"../library/exceptions.html#BaseException\\"\' title=\'\\"BaseException\\"\'>\n         <code>\n          <span>\n           BaseException\n          </span>\n         </code>\n        </a>\n        , and so it can be used to serve\nas a wildcard. Use this with extreme caution, since it is easy to mask a real\nprogramming error in this way! It can also be used to print an error message and\nthen re-raise the exception (allowing a caller to handle the exception as well):\n       </p>\n       <div>\n        <div>\n         <pre><span>import</span> <span>sys</span>\n<span>try</span><span>:</span>\n  <span>f</span> <span>=</span> <span>open</span><span>(</span><span>\\\'myfile.txt\\\'</span><span>)</span>\n  <span>s</span> <span>=</span> <span>f</span><span>.</span><span>readline</span><span>()</span>\n  <span>i</span> <span>=</span> <span>int</span><span>(</span><span>s</span><span>.</span><span>strip</span><span>())</span>\n<span>except</span> <span>OSError</span> <span>as</span> <span>err</span><span>:</span>\n  <span>print</span><span>(</span><span>\\"OS error: </span><span>{0}</span><span>\\"</span><span>.</span><span>format</span><span>(</span><span>err</span><span>))</span>\n<span>except</span> <span>ValueError</span><span>:</span>\n  <span>print</span><span>(</span><span>\\"Could not convert data to an integer.\\"</span><span>)</span>\n<span>except</span> <span>BaseException</span> <span>as</span> <span>err</span><span>:</span>\n  <span>print</span><span>(</span><span>f</span><span>\\"Unexpected </span><span>{</span><span>err</span><span>=}</span><span>, </span><span>{</span><span>type</span><span>(</span><span>err</span><span>)</span><span>=}</span><span>\\"</span><span>)</span>\n  <span>raise</span>\n</pre>\n        </div>\n       </div>\n       <p>\n        Alternatively the last except clause may omit the exception name(s), however the exception\nvalue must then be retrieved from\n        <code>\n         <span>\n          sys.exc_info()[1]\n         </span>\n        </code>\n        .\n       </p>\n       <p>\n        The\n        <a href=\'\\"../reference/compound_stmts.html#try\\"\'>\n         <code>\n          <span>\n           try\n          </span>\n         </code>\n        </a>\n        …\n        <a href=\'\\"../reference/compound_stmts.html#except\\"\'>\n         <code>\n          <span>\n           except\n          </span>\n         </code>\n        </a>\n        statement has an optional\n        <em>\n         else\nclause\n        </em>\n        , which, when present, must follow all\n        <em>\n         except clauses\n        </em>\n        . It is useful\nfor code that must be executed if the\n        <em>\n         try clause\n        </em>\n        does not raise an exception.\nFor example:\n       </p>\n       <div>\n        <div>\n         <pre><span>for</span> <span>arg</span> <span>in</span> <span>sys</span><span>.</span><span>argv</span><span>[</span><span>1</span><span>:]:</span>\n  <span>try</span><span>:</span>\n    <span>f</span> <span>=</span> <span>open</span><span>(</span><span>arg</span><span>,</span> <span>\\\'r\\\'</span><span>)</span>\n  <span>except</span> <span>OSError</span><span>:</span>\n    <span>print</span><span>(</span><span>\\\'cannot open\\\'</span><span>,</span> <span>arg</span><span>)</span>\n  <span>else</span><span>:</span>\n    <span>print</span><span>(</span><span>arg</span><span>,</span> <span>\\\'has\\\'</span><span>,</span> <span>len</span><span>(</span><span>f</span><span>.</span><span>readlines</span><span>()),</span> <span>\\\'lines\\\'</span><span>)</span>\n    <span>f</span><span>.</span><span>close</span><span>()</span>\n</pre>\n        </div>\n       </div>\n       <p>\n        The use of the\n        <code>\n         <span>\n          else\n         </span>\n        </code>\n        clause is better than adding additional code to\nthe\n        <a href=\'\\"../reference/compound_stmts.html#try\\"\'>\n         <code>\n          <span>\n           try\n          </span>\n         </code>\n        </a>\n        clause because it avoids accidentally catching an exception\nthat wasn’t raised by the code being protected by the\n        <code>\n         <span>\n          try\n         </span>\n        </code>\n        …\n        <code>\n         <span>\n          except\n         </span>\n        </code>\n        statement.\n       </p>\n       <p>\n        When an exception occurs, it may have an associated value, also known as the\nexception’s\n        <em>\n         argument\n        </em>\n        . The presence and type of the argument depend on the\nexception type.\n       </p>\n       <p>\n        The\n        <em>\n         except clause\n        </em>\n        may specify a variable after the exception name. The\nvariable is bound to an exception instance with the arguments stored in\n        <code>\n         <span>\n          instance.args\n         </span>\n        </code>\n        . For convenience, the exception instance defines\n        <code>\n         <span>\n          __str__()\n         </span>\n        </code>\n        so the arguments can be printed directly without having to\nreference\n        <code>\n         <span>\n          .args\n         </span>\n        </code>\n        . One may also instantiate an exception first before\nraising it and add any attributes to it as desired.\n       </p>\n       <div>\n        <div>\n         <span and="" output\\"="" prompts="" the="" title=\'\\"Hide\'>\n          &gt;&gt;&gt;\n         </span>\n         <pre><span>&gt;&gt;&gt; </span><span>try</span><span>:</span>\n<span>... </span>  <span>raise</span> <span>Exception</span><span>(</span><span>\\\'spam\\\'</span><span>,</span> <span>\\\'eggs\\\'</span><span>)</span>\n<span>... </span><span>except</span> <span>Exception</span> <span>as</span> <span>inst</span><span>:</span>\n<span>... </span>  <span>print</span><span>(</span><span>type</span><span>(</span><span>inst</span><span>))</span>  <span># the exception instance</span>\n<span>... </span>  <span>print</span><span>(</span><span>inst</span><span>.</span><span>args</span><span>)</span>   <span># arguments stored in .args</span>\n<span>... </span>  <span>print</span><span>(</span><span>inst</span><span>)</span>     <span># __str__ allows args to be printed directly,</span>\n<span>... </span>             <span># but may be overridden in exception subclasses</span>\n<span>... </span>  <span>x</span><span>,</span> <span>y</span> <span>=</span> <span>inst</span><span>.</span><span>args</span>   <span># unpack args</span>\n<span>... </span>  <span>print</span><span>(</span><span>\\\'x =\\\'</span><span>,</span> <span>x</span><span>)</span>\n<span>... </span>  <span>print</span><span>(</span><span>\\\'y =\\\'</span><span>,</span> <span>y</span><span>)</span>\n<span>...</span>\n<span>&lt;class \\\'Exception\\\'&gt;</span>\n<span>(\\\'spam\\\', \\\'eggs\\\')</span>\n<span>(\\\'spam\\\', \\\'eggs\\\')</span>\n<span>x = spam</span>\n<span>y = eggs</span>\n</pre>\n        </div>\n       </div>\n       <p>\n        If an exception has arguments, they are printed as the last part (‘detail’) of\nthe message for unhandled exceptions.\n       </p>\n       <p>\n        Exception handlers don’t just handle exceptions if they occur immediately in the\n        <em>\n         try clause\n        </em>\n        , but also if they occur inside functions that are called (even\nindirectly) in the\n        <em>\n         try clause\n        </em>\n        . For example:\n       </p>\n       <div>\n        <div>\n         <span and="" output\\"="" prompts="" the="" title=\'\\"Hide\'>\n          &gt;&gt;&gt;\n         </span>\n         <pre><span>&gt;&gt;&gt; </span><span>def</span> <span>this_fails</span><span>():</span>\n<span>... </span>  <span>x</span> <span>=</span> <span>1</span><span>/</span><span>0</span>\n<span>...</span>\n<span>&gt;&gt;&gt; </span><span>try</span><span>:</span>\n<span>... </span>  <span>this_fails</span><span>()</span>\n<span>... </span><span>except</span> <span>ZeroDivisionError</span> <span>as</span> <span>err</span><span>:</span>\n<span>... </span>  <span>print</span><span>(</span><span>\\\'Handling run-time error:\\\'</span><span>,</span> <span>err</span><span>)</span>\n<span>...</span>\n<span>Handling run-time error: division by zero</span>\n</pre>\n        </div>\n       </div>\n      </section>\n      <section>\n       <h2>\n        <span>\n         8.4.\n        </span>\n        Raising Exceptions\n        <a headline\\"="" href=\'\\"#raising-exceptions\\"\' this="" title=\'\\"Permalink\' to="">\n         ¶\n        </a>\n       </h2>\n       <p>\n        The\n        <a href=\'\\"../reference/simple_stmts.html#raise\\"\'>\n         <code>\n          <span>\n           raise\n          </span>\n         </code>\n        </a>\n        statement allows the programmer to force a specified\nexception to occur. For example:\n       </p>\n       <div>\n        <div>\n         <span and="" output\\"="" prompts="" the="" title=\'\\"Hide\'>\n          &gt;&gt;&gt;\n         </span>\n         <pre><span>&gt;&gt;&gt; </span><span>raise</span> <span>NameError</span><span>(</span><span>\\\'HiThere\\\'</span><span>)</span>\n<span>Traceback (most recent call last):</span>\n File <span>\\"&lt;stdin&gt;\\"</span>, line <span>1</span>, in <span>&lt;module&gt;</span>\n<span>NameError</span>: <span>HiThere</span>\n</pre>\n        </div>\n       </div>\n       <p>\n        The sole argument to\n        <a href=\'\\"../reference/simple_stmts.html#raise\\"\'>\n         <code>\n          <span>\n           raise\n          </span>\n         </code>\n        </a>\n        indicates the exception to be raised.\nThis must be either an exception instance or an exception class (a class that\nderives from\n        <a href=\'\\"../library/exceptions.html#Exception\\"\' title=\'\\"Exception\\"\'>\n         <code>\n          <span>\n           Exception\n          </span>\n         </code>\n        </a>\n        ). If an exception class is passed, it will\nbe implicitly instantiated by calling its constructor with no arguments:\n       </p>\n       <div>\n        <div>\n         <pre><span>raise</span> <span>ValueError</span> <span># shorthand for \\\'raise ValueError()\\\'</span>\n</pre>\n        </div>\n       </div>\n       <p>\n        If you need to determine whether an exception was raised but don’t intend to\nhandle it, a simpler form of the\n        <a href=\'\\"../reference/simple_stmts.html#raise\\"\'>\n         <code>\n          <span>\n           raise\n          </span>\n         </code>\n        </a>\n        statement allows you to\nre-raise the exception:\n       </p>\n       <div>\n        <div>\n         <span and="" output\\"="" prompts="" the="" title=\'\\"Hide\'>\n          &gt;&gt;&gt;\n         </span>\n         <pre><span>&gt;&gt;&gt; </span><span>try</span><span>:</span>\n<span>... </span>  <span>raise</span> <span>NameError</span><span>(</span><span>\\\'HiThere\\\'</span><span>)</span>\n<span>... </span><span>except</span> <span>NameError</span><span>:</span>\n<span>... </span>  <span>print</span><span>(</span><span>\\\'An exception flew by!\\\'</span><span>)</span>\n<span>... </span>  <span>raise</span>\n<span>...</span>\n<span>An exception flew by!</span>\n<span>Traceback (most recent call last):</span>\n File <span>\\"&lt;stdin&gt;\\"</span>, line <span>2</span>, in <span>&lt;module&gt;</span>\n<span>NameError</span>: <span>HiThere</span>\n</pre>\n        </div>\n       </div>\n      </section>\n      <section>\n       <h2>\n        <span>\n         8.5.\n        </span>\n        Exception Chaining\n        <a headline\\"="" href=\'\\"#exception-chaining\\"\' this="" title=\'\\"Permalink\' to="">\n         ¶\n        </a>\n       </h2>\n       <p>\n        If an unhandled exception occurs inside an\n        <a href=\'\\"../reference/compound_stmts.html#except\\"\'>\n         <code>\n          <span>\n           except\n          </span>\n         </code>\n        </a>\n        section, it will\nhave the exception being handled attached to it and included in the error\nmessage:\n       </p>\n       <div>\n        <div>\n         <span and="" output\\"="" prompts="" the="" title=\'\\"Hide\'>\n          &gt;&gt;&gt;\n         </span>\n         <pre><span>&gt;&gt;&gt; </span><span>try</span><span>:</span>\n<span>... </span>  <span>open</span><span>(</span><span>\\"database.sqlite\\"</span><span>)</span>\n<span>... </span><span>except</span> <span>OSError</span><span>:</span>\n<span>... </span>  <span>raise</span> <span>RuntimeError</span><span>(</span><span>\\"unable to handle error\\"</span><span>)</span>\n<span>...</span>\n<span>Traceback (most recent call last):</span>\n File <span>\\"&lt;stdin&gt;\\"</span>, line <span>2</span>, in <span>&lt;module&gt;</span>\n<span>FileNotFoundError</span>: <span>[Errno 2] No such file or directory: \\\'database.sqlite\\\'</span>\n<span>During handling of the above exception, another exception occurred:</span>\n<span>Traceback (most recent call last):</span>\n File <span>\\"&lt;stdin&gt;\\"</span>, line <span>4</span>, in <span>&lt;module&gt;</span>\n<span>RuntimeError</span>: <span>unable to handle error</span>\n</pre>\n        </div>\n       </div>\n       <p>\n        To indicate that an exception is a direct consequence of another, the\n        <a href=\'\\"../reference/simple_stmts.html#raise\\"\'>\n         <code>\n          <span>\n           raise\n          </span>\n         </code>\n        </a>\n        statement allows an optional\n        <a href=\'\\"../reference/simple_stmts.html#raise\\"\'>\n         <code>\n          <span>\n           from\n          </span>\n         </code>\n        </a>\n        clause:\n       </p>\n       <div>\n        <div>\n         <pre><span># exc must be exception instance or None.</span>\n<span>raise</span> <span>RuntimeError</span> <span>from</span> <span>exc</span>\n</pre>\n        </div>\n       </div>\n       <p>\n        This can be useful when you are transforming exceptions. For example:\n       </p>\n       <div>\n        <div>\n         <span and="" output\\"="" prompts="" the="" title=\'\\"Hide\'>\n          &gt;&gt;&gt;\n         </span>\n         <pre><span>&gt;&gt;&gt; </span><span>def</span> <span>func</span><span>():</span>\n<span>... </span>  <span>raise</span> <span>ConnectionError</span>\n<span>...</span>\n<span>&gt;&gt;&gt; </span><span>try</span><span>:</span>\n<span>... </span>  <span>func</span><span>()</span>\n<span>... </span><span>except</span> <span>ConnectionError</span> <span>as</span> <span>exc</span><span>:</span>\n<span>... </span>  <span>raise</span> <span>RuntimeError</span><span>(</span><span>\\\'Failed to open database\\\'</span><span>)</span> <span>from</span> <span>exc</span>\n<span>...</span>\n<span>Traceback (most recent call last):</span>\n File <span>\\"&lt;stdin&gt;\\"</span>, line <span>2</span>, in <span>&lt;module&gt;</span>\n File <span>\\"&lt;stdin&gt;\\"</span>, line <span>2</span>, in <span>func</span>\n<span>ConnectionError</span>\n<span>The above exception was the direct cause of the following exception:</span>\n<span>Traceback (most recent call last):</span>\n File <span>\\"&lt;stdin&gt;\\"</span>, line <span>4</span>, in <span>&lt;module&gt;</span>\n<span>RuntimeError</span>: <span>Failed to open database</span>\n</pre>\n        </div>\n       </div>\n       <p>\n        It also allows disabling automatic exception chaining using the\n        <code>\n         <span>\n          from\n         </span>\n         <span>\n          None\n         </span>\n        </code>\n        idiom:\n       </p>\n       <div>\n        <div>\n         <span and="" output\\"="" prompts="" the="" title=\'\\"Hide\'>\n          &gt;&gt;&gt;\n         </span>\n         <pre><span>&gt;&gt;&gt; </span><span>try</span><span>:</span>\n<span>... </span>  <span>open</span><span>(</span><span>\\\'database.sqlite\\\'</span><span>)</span>\n<span>... </span><span>except</span> <span>OSError</span><span>:</span>\n<span>... </span>  <span>raise</span> <span>RuntimeError</span> <span>from</span> <span>None</span>\n<span>...</span>\n<span>Traceback (most recent call last):</span>\n File <span>\\"&lt;stdin&gt;\\"</span>, line <span>4</span>, in <span>&lt;module&gt;</span>\n<span>RuntimeError</span>\n</pre>\n        </div>\n       </div>\n       <p>\n        For more information about chaining mechanics, see\n        <a href=\'\\"../library/exceptions.html#bltin-exceptions\\"\'>\n         <span>\n          Built-in Exceptions\n         </span>\n        </a>\n        .\n       </p>\n      </section>\n      <section>\n       <h2>\n        <span>\n         8.6.\n        </span>\n        User-defined Exceptions\n        <a headline\\"="" href=\'\\"#user-defined-exceptions\\"\' this="" title=\'\\"Permalink\' to="">\n         ¶\n        </a>\n       </h2>\n       <p>\n        Programs may name their own exceptions by creating a new exception class (see\n        <a href=\'\\"classes.html#tut-classes\\"\'>\n         <span>\n          Classes\n         </span>\n        </a>\n        for more about Python classes). Exceptions should typically\nbe derived from the\n        <a href=\'\\"../library/exceptions.html#Exception\\"\' title=\'\\"Exception\\"\'>\n         <code>\n          <span>\n           Exception\n          </span>\n         </code>\n        </a>\n        class, either directly or indirectly.\n       </p>\n       <p>\n        Exception classes can be defined which do anything any other class can do, but\nare usually kept simple, often only offering a number of attributes that allow\ninformation about the error to be extracted by handlers for the exception.\n       </p>\n       <p>\n        Most exceptions are defined with names that end in “Error”, similar to the\nnaming of the standard exceptions.\n       </p>\n       <p>\n        Many standard modules define their own exceptions to report errors that may\noccur in functions they define. More information on classes is presented in\nchapter\n        <a href=\'\\"classes.html#tut-classes\\"\'>\n         <span>\n          Classes\n         </span>\n        </a>\n        .\n       </p>\n      </section>\n      <section>\n       <h2>\n        <span>\n         8.7.\n        </span>\n        Defining Clean-up Actions\n        <a headline\\"="" href=\'\\"#defining-clean-up-actions\\"\' this="" title=\'\\"Permalink\' to="">\n         ¶\n        </a>\n       </h2>\n       <p>\n        The\n        <a href=\'\\"../reference/compound_stmts.html#try\\"\'>\n         <code>\n          <span>\n           try\n          </span>\n         </code>\n        </a>\n        statement has another optional clause which is intended to\ndefine clean-up actions that must be executed under all circumstances. For\nexample:\n       </p>\n       <div>\n        <div>\n         <span and="" output\\"="" prompts="" the="" title=\'\\"Hide\'>\n          &gt;&gt;&gt;\n         </span>\n         <pre><span>&gt;&gt;&gt; </span><span>try</span><span>:</span>\n<span>... </span>  <span>raise</span> <span>KeyboardInterrupt</span>\n<span>... </span><span>finally</span><span>:</span>\n<span>... </span>  <span>print</span><span>(</span><span>\\\'Goodbye, world!\\\'</span><span>)</span>\n<span>...</span>\n<span>Goodbye, world!</span>\n<span>Traceback (most recent call last):</span>\n File <span>\\"&lt;stdin&gt;\\"</span>, line <span>2</span>, in <span>&lt;module&gt;</span>\n<span>KeyboardInterrupt</span>\n</pre>\n        </div>\n       </div>\n       <p>\n        If a\n        <a href=\'\\"../reference/compound_stmts.html#finally\\"\'>\n         <code>\n          <span>\n           finally\n          </span>\n         </code>\n        </a>\n        clause is present, the\n        <code>\n         <span>\n          finally\n         </span>\n        </code>\n        clause will execute as the last task before the\n        <a href=\'\\"../reference/compound_stmts.html#try\\"\'>\n         <code>\n          <span>\n           try\n          </span>\n         </code>\n        </a>\n        statement completes. The\n        <code>\n         <span>\n          finally\n         </span>\n        </code>\n        clause runs whether or\nnot the\n        <code>\n         <span>\n          try\n         </span>\n        </code>\n        statement produces an exception. The following\npoints discuss more complex cases when an exception occurs:\n       </p>\n       <ul>\n        <li>\n         <p>\n          If an exception occurs during execution of the\n          <code>\n           <span>\n            try\n           </span>\n          </code>\n          clause, the exception may be handled by an\n          <a href=\'\\"../reference/compound_stmts.html#except\\"\'>\n           <code>\n            <span>\n             except\n            </span>\n           </code>\n          </a>\n          clause. If the exception is not handled by an\n          <code>\n           <span>\n            except\n           </span>\n          </code>\n          clause, the exception is re-raised after the\n          <code>\n           <span>\n            finally\n           </span>\n          </code>\n          clause has been executed.\n         </p>\n        </li>\n        <li>\n         <p>\n          An exception could occur during execution of an\n          <code>\n           <span>\n            except\n           </span>\n          </code>\n          or\n          <code>\n           <span>\n            else\n           </span>\n          </code>\n          clause. Again, the exception is re-raised after\nthe\n          <code>\n           <span>\n            finally\n           </span>\n          </code>\n          clause has been executed.\n         </p>\n        </li>\n        <li>\n         <p>\n          If the\n          <code>\n           <span>\n            finally\n           </span>\n          </code>\n          clause executes a\n          <a href=\'\\"../reference/simple_stmts.html#break\\"\'>\n           <code>\n            <span>\n             break\n            </span>\n           </code>\n          </a>\n          ,\n          <a href=\'\\"../reference/simple_stmts.html#continue\\"\'>\n           <code>\n            <span>\n             continue\n            </span>\n           </code>\n          </a>\n          or\n          <a href=\'\\"../reference/simple_stmts.html#return\\"\'>\n           <code>\n            <span>\n             return\n            </span>\n           </code>\n          </a>\n          statement, exceptions are not\nre-raised.\n         </p>\n        </li>\n        <li>\n         <p>\n          If the\n          <code>\n           <span>\n            try\n           </span>\n          </code>\n          statement reaches a\n          <a href=\'\\"../reference/simple_stmts.html#break\\"\'>\n           <code>\n            <span>\n             break\n            </span>\n           </code>\n          </a>\n          ,\n          <a href=\'\\"../reference/simple_stmts.html#continue\\"\'>\n           <code>\n            <span>\n             continue\n            </span>\n           </code>\n          </a>\n          or\n          <a href=\'\\"../reference/simple_stmts.html#return\\"\'>\n           <code>\n            <span>\n             return\n            </span>\n           </code>\n          </a>\n          statement, the\n          <code>\n           <span>\n            finally\n           </span>\n          </code>\n          clause will execute just prior to the\n          <code>\n           <span>\n            break\n           </span>\n          </code>\n          ,\n          <code>\n           <span>\n            continue\n           </span>\n          </code>\n          or\n          <code>\n           <span>\n            return\n           </span>\n          </code>\n          statement’s execution.\n         </p>\n        </li>\n        <li>\n         <p>\n          If a\n          <code>\n           <span>\n            finally\n           </span>\n          </code>\n          clause includes a\n          <code>\n           <span>\n            return\n           </span>\n          </code>\n          statement, the returned value will be the one from the\n          <code>\n           <span>\n            finally\n           </span>\n          </code>\n          clause’s\n          <code>\n           <span>\n            return\n           </span>\n          </code>\n          statement, not the\nvalue from the\n          <code>\n           <span>\n            try\n           </span>\n          </code>\n          clause’s\n          <code>\n           <span>\n            return\n           </span>\n          </code>\n          statement.\n         </p>\n        </li>\n       </ul>\n       <p>\n        For example:\n       </p>\n       <div>\n        <div>\n         <span and="" output\\"="" prompts="" the="" title=\'\\"Hide\'>\n          &gt;&gt;&gt;\n         </span>\n         <pre><span>&gt;&gt;&gt; </span><span>def</span> <span>bool_return</span><span>():</span>\n<span>... </span>  <span>try</span><span>:</span>\n<span>... </span>    <span>return</span> <span>True</span>\n<span>... </span>  <span>finally</span><span>:</span>\n<span>... </span>    <span>return</span> <span>False</span>\n<span>...</span>\n<span>&gt;&gt;&gt; </span><span>bool_return</span><span>()</span>\n<span>False</span>\n</pre>\n        </div>\n       </div>\n       <p>\n        A more complicated example:\n       </p>\n       <div>\n        <div>\n         <span and="" output\\"="" prompts="" the="" title=\'\\"Hide\'>\n          &gt;&gt;&gt;\n         </span>\n         <pre><span>&gt;&gt;&gt; </span><span>def</span> <span>divide</span><span>(</span><span>x</span><span>,</span> <span>y</span><span>):</span>\n<span>... </span>  <span>try</span><span>:</span>\n<span>... </span>    <span>result</span> <span>=</span> <span>x</span> <span>/</span> <span>y</span>\n<span>... </span>  <span>except</span> <span>ZeroDivisionError</span><span>:</span>\n<span>... </span>    <span>print</span><span>(</span><span>\\"division by zero!\\"</span><span>)</span>\n<span>... </span>  <span>else</span><span>:</span>\n<span>... </span>    <span>print</span><span>(</span><span>\\"result is\\"</span><span>,</span> <span>result</span><span>)</span>\n<span>... </span>  <span>finally</span><span>:</span>\n<span>... </span>    <span>print</span><span>(</span><span>\\"executing finally clause\\"</span><span>)</span>\n<span>...</span>\n<span>&gt;&gt;&gt; </span><span>divide</span><span>(</span><span>2</span><span>,</span> <span>1</span><span>)</span>\n<span>result is 2.0</span>\n<span>executing finally clause</span>\n<span>&gt;&gt;&gt; </span><span>divide</span><span>(</span><span>2</span><span>,</span> <span>0</span><span>)</span>\n<span>division by zero!</span>\n<span>executing finally clause</span>\n<span>&gt;&gt;&gt; </span><span>divide</span><span>(</span><span>\\"2\\"</span><span>,</span> <span>\\"1\\"</span><span>)</span>\n<span>executing finally clause</span>\n<span>Traceback (most recent call last):</span>\n File <span>\\"&lt;stdin&gt;\\"</span>, line <span>1</span>, in <span>&lt;module&gt;</span>\n File <span>\\"&lt;stdin&gt;\\"</span>, line <span>3</span>, in <span>divide</span>\n<span>TypeError</span>: <span>unsupported operand type(s) for /: \\\'str\\\' and \\\'str\\\'</span>\n</pre>\n        </div>\n       </div>\n       <p>\n        As you can see, the\n        <a href=\'\\"../reference/compound_stmts.html#finally\\"\'>\n         <code>\n          <span>\n           finally\n          </span>\n         </code>\n        </a>\n        clause is executed in any event. The\n        <a href=\'\\"../library/exceptions.html#TypeError\\"\' title=\'\\"TypeError\\"\'>\n         <code>\n          <span>\n           TypeError\n          </span>\n         </code>\n        </a>\n        raised by dividing two strings is not handled by the\n        <a href=\'\\"../reference/compound_stmts.html#except\\"\'>\n         <code>\n          <span>\n           except\n          </span>\n         </code>\n        </a>\n        clause and therefore re-raised after the\n        <code>\n         <span>\n          finally\n         </span>\n        </code>\n        clause has been executed.\n       </p>\n       <p>\n        In real world applications, the\n        <a href=\'\\"../reference/compound_stmts.html#finally\\"\'>\n         <code>\n          <span>\n           finally\n          </span>\n         </code>\n        </a>\n        clause is useful for\nreleasing external resources (such as files or network connections), regardless\nof whether the use of the resource was successful.\n       </p>\n      </section>\n      <section>\n       <h2>\n        <span>\n         8.8.\n        </span>\n        Predefined Clean-up Actions\n        <a headline\\"="" href=\'\\"#predefined-clean-up-actions\\"\' this="" title=\'\\"Permalink\' to="">\n         ¶\n        </a>\n       </h2>\n       <p>\n        Some objects define standard clean-up actions to be undertaken when the object\nis no longer needed, regardless of whether or not the operation using the object\nsucceeded or failed. Look at the following example, which tries to open a file\nand print its contents to the screen.\n       </p>\n       <div>\n        <div>\n         <pre><span>for</span> <span>line</span> <span>in</span> <span>open</span><span>(</span><span>\\"myfile.txt\\"</span><span>):</span>\n  <span>print</span><span>(</span><span>line</span><span>,</span> <span>end</span><span>=</span><span>\\"\\"</span><span>)</span>\n</pre>\n        </div>\n       </div>\n       <p>\n        The problem with this code is that it leaves the file open for an indeterminate\namount of time after this part of the code has finished executing.\nThis is not an issue in simple scripts, but can be a problem for larger\napplications. The\n        <a href=\'\\"../reference/compound_stmts.html#with\\"\'>\n         <code>\n          <span>\n           with\n          </span>\n         </code>\n        </a>\n        statement allows objects like files to be\nused in a way that ensures they are always cleaned up promptly and correctly.\n       </p>\n       <div>\n        <div>\n         <pre><span>with</span> <span>open</span><span>(</span><span>\\"myfile.txt\\"</span><span>)</span> <span>as</span> <span>f</span><span>:</span>\n  <span>for</span> <span>line</span> <span>in</span> <span>f</span><span>:</span>\n    <span>print</span><span>(</span><span>line</span><span>,</span> <span>end</span><span>=</span><span>\\"\\"</span><span>)</span>\n</pre>\n        </div>\n       </div>\n       <p>\n        After the statement is executed, the file\n        <em>\n         f\n        </em>\n        is always closed, even if a\nproblem was encountered while processing the lines. Objects which, like files,\nprovide predefined clean-up actions will indicate this in their documentation.\n       </p>\n      </section>\n     </section>\n    </div>\n   </div>\n  </div>\n  <div>\n   <div>\n    <h3>\n     <a href=\'\\"../contents.html\\"\'>\n      Table of Contents\n     </a>\n    </h3>\n    <ul>\n     <li>\n      <a href=\'\\"#\\"\'>\n       8. Errors and Exceptions\n      </a>\n      <ul>\n       <li>\n        <a href=\'\\"#syntax-errors\\"\'>\n         8.1. Syntax Errors\n        </a>\n       </li>\n       <li>\n        <a href=\'\\"#exceptions\\"\'>\n         8.2. Exceptions\n        </a>\n       </li>\n       <li>\n        <a href=\'\\"#handling-exceptions\\"\'>\n         8.3. Handling Exceptions\n        </a>\n       </li>\n       <li>\n        <a href=\'\\"#raising-exceptions\\"\'>\n         8.4. Raising Exceptions\n        </a>\n       </li>\n       <li>\n        <a href=\'\\"#exception-chaining\\"\'>\n         8.5. Exception Chaining\n        </a>\n       </li>\n       <li>\n        <a href=\'\\"#user-defined-exceptions\\"\'>\n         8.6. User-defined Exceptions\n        </a>\n       </li>\n       <li>\n        <a href=\'\\"#defining-clean-up-actions\\"\'>\n         8.7. Defining Clean-up Actions\n        </a>\n       </li>\n       <li>\n        <a href=\'\\"#predefined-clean-up-actions\\"\'>\n         8.8. Predefined Clean-up Actions\n        </a>\n       </li>\n      </ul>\n     </li>\n    </ul>\n    <h4>\n     Previous topic\n    </h4>\n    <p>\n     <a chapter\\"="" href=\'\\"inputoutput.html\\"\' title=\'\\"previous\'>\n      <span>\n       7.\n      </span>\n      Input and Output\n     </a>\n    </p>\n    <h4>\n     Next topic\n    </h4>\n    <p>\n     <a chapter\\"="" href=\'\\"classes.html\\"\' title=\'\\"next\'>\n      <span>\n       9.\n      </span>\n      Classes\n     </a>\n    </p>\n    <div>\n     <h3>\n      This Page\n     </h3>\n     <ul>\n      <li>\n       <a href=\'\\"../bugs.html\\"\'>\n        Report a Bug\n       </a>\n      </li>\n      <li>\n       <a href=\'\\"https://github.com/python/cpython/blob/3.10/Doc/tutorial/errors.rst\\"\'>\n        Show Source\n       </a>\n      </li>\n     </ul>\n    </div>\n   </div>\n   <div>\n    <span>\n     «\n    </span>\n   </div>\n  </div>\n </div>\n <div>\n  <h3>\n   Navigation\n  </h3>\n  <ul>\n   <li>\n    <a href=\'\\"../genindex.html\\"\' index\\"="" title=\'\\"General\'>\n     index\n    </a>\n   </li>\n   <li>\n    <a href=\'\\"../py-modindex.html\\"\' index\\"="" module="" title=\'\\"Python\'>\n     modules\n    </a>\n    |\n   </li>\n   <li>\n    <a classes\\"="" href=\'\\"classes.html\\"\' title=\'\\"9.\'>\n     next\n    </a>\n    |\n   </li>\n   <li>\n    <a and="" href=\'\\"inputoutput.html\\"\' input="" output\\"="" title=\'\\"7.\'>\n     previous\n    </a>\n    |\n   </li>\n   <li>\n    <img -1px\\"="" alt=\'\\"Python\' logo\\"="" margin-top:="" middle;="" src=\'\\"../_static/py.svg\\"\' style=\'\\"vertical-align:\'/>\n   </li>\n   <li>\n    <a href=\'\\"https://www.python.org/\\"\'>\n     Python\n    </a>\n    »\n   </li>\n   <li>\n    <div>\n     <select>\n      <option>\n       English\n      </option>\n      <option>\n       Spanish\n      </option>\n      <option>\n       French\n      </option>\n      <option>\n       Italian\n      </option>\n      <option>\n       Japanese\n      </option>\n      <option>\n       Korean\n      </option>\n      <option>\n       Brazilian Portuguese\n      </option>\n      <option>\n       Turkish\n      </option>\n      <option>\n       Simplified Chinese\n      </option>\n      <option>\n       Traditional Chinese\n      </option>\n     </select>\n    </div>\n    <div>\n     <select>\n      <option>\n       dev (3.14)\n      </option>\n      <option>\n       pre (3.13)\n      </option>\n      <option>\n       3.12\n      </option>\n      <option>\n       3.11\n      </option>\n      <option>\n       3.10.15\n      </option>\n      <option>\n       3.9\n      </option>\n      <option>\n       3.8\n      </option>\n      <option>\n       3.7\n      </option>\n      <option>\n       3.6\n      </option>\n      <option>\n       3.5\n      </option>\n      <option>\n       3.4\n      </option>\n      <option>\n       3.3\n      </option>\n      <option>\n       3.2\n      </option>\n      <option>\n       3.1\n      </option>\n      <option>\n       3.0\n      </option>\n      <option>\n       2.7\n      </option>\n      <option>\n       2.6\n      </option>\n     </select>\n    </div>\n   </li>\n   <li>\n    <a href=\'\\"../index.html\\"\'>\n     3.10.15 Documentation\n    </a>\n    »\n   </li>\n   <li>\n    <a href=\'\\"index.html\\"\'>\n     The Python Tutorial\n    </a>\n    »\n   </li>\n   <li>\n    <a href=\'\\"\\"\'>\n     <span>\n      8.\n     </span>\n     Errors and Exceptions\n    </a>\n   </li>\n   <li>\n    |\n   </li>\n   <li>\n    <label>\n     Theme\n     <select>\n      <option>\n       Auto\n      </option>\n      <option>\n       Light\n      </option>\n      <option>\n       Dark\n      </option>\n     </select>\n    </label>\n    |\n   </li>\n  </ul>\n </div>\n <div>\n  ©\n  <a href=\'\\"../copyright.html\\"\'>\n   Copyright\n  </a>\n  2001-2024, Python Software Foundation.\n  \n  This page is licensed under the Python Software Foundation License Version 2.\n  \n  Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\n  \n  \n   See\n  <a href=\'\\"/license.html\\"\'>\n   History and License\n  </a>\n  for more information.\n\n  The Python Software Foundation is a non-profit corporation.\n  <a href=\'\\"https://www.python.org/psf/donations/\\"\'>\n   Please donate.\n  </a>\n  Last updated on Sep 09, 2024.\n  <a href=\'\\"/bugs.html\\"\'>\n   Found a bug\n  </a>\n  ?\n  \n  \n  Created using\n  <a href=\'\\"https://www.sphinx-doc.org/\\"\'>\n   Sphinx\n  </a>\n  3.4.3.\n </div>\n</body>\n' media={'images': [], 'videos': [], 'audios': []} links={'internal': [{'href': 'https://docs.python.org/contents.html', 'text': 'Table of Contents', 'title': ''}, {'href': 'https://docs.python.org/3.10/tutorial/errors.html#predefined\n#', 'text': '8. Errors and Exceptions', 'title': ''}, {'href': 'https://docs.python.org/3.10/tutorial/errors.html#predefined\n#syntax-errors', 'text': '8.1. Syntax Errors', 'title': ''}, {'href': 'https://docs.python.org/3.10/tutorial/errors.html#predefined\n#exceptions', 'text': '8.2. Exceptions', 'title': ''}, {'href': 'https://docs.python.org/3.10/tutorial/errors.html#predefined\n#handling-exceptions', 'text': '8.3. Handling Exceptions', 'title': ''}, {'href': 'https://docs.python.org/3.10/tutorial/errors.html#predefined\n#raising-exceptions', 'text': '8.4. Raising Exceptions', 'title': ''}, {'href': 'https://docs.python.org/3.10/tutorial/errors.html#predefined\n#exception-chaining', 'text': '8.5. Exception Chaining', 'title': ''}, {'href': 'https://docs.python.org/3.10/tutorial/errors.html#predefined\n#user-defined-exceptions', 'text': '8.6. User-defined Exceptions', 'title': ''}, {'href': 'https://docs.python.org/3.10/tutorial/errors.html#predefined\n#defining-clean-up-actions', 'text': '8.7. Defining Clean-up Actions', 'title': ''}, {'href': 'https://docs.python.org/3.10/tutorial/errors.html#predefined\n#predefined-clean-up-actions', 'text': '8.8. Predefined Clean-up Actions', 'title': ''}, {'href': 'https://docs.python.org/inputoutput.html', 'text': '7. Input and Output', 'title': 'previous chapter'}, {'href': 'https://docs.python.org/classes.html', 'text': '9. Classes', 'title': 'next chapter'}, {'href': 'https://docs.python.org/bugs.html', 'text': 'Report a Bug', 'title': ''}, {'href': 'https://docs.python.org/genindex.html', 'text': 'index', 'title': 'General Index'}, {'href': 'https://docs.python.org/py-modindex.html', 'text': 'modules', 'title': 'Python Module Index'}, {'href': 'https://docs.python.org/index.html', 'text': '3.10.15 Documentation', 'title': ''}, {'href': 'https://docs.python.org/3.10/tutorial/errors.html#predefined\n#errors-and-exceptions', 'text': '¶', 'title': 'Permalink to this headline'}, {'href': 'https://docs.python.org/library/functions.html#print', 'text': 'print()', 'title': 'print'}, {'href': 'https://docs.python.org/library/exceptions.html#ZeroDivisionError', 'text': 'ZeroDivisionError', 'title': 'ZeroDivisionError'}, {'href': 'https://docs.python.org/library/exceptions.html#NameError', 'text': 'NameError', 'title': 'NameError'}, {'href': 'https://docs.python.org/library/exceptions.html#TypeError', 'text': 'TypeError', 'title': 'TypeError'}, {'href': 'https://docs.python.org/library/exceptions.html#bltin-exceptions', 'text': 'Built-in Exceptions', 'title': ''}, {'href': 'https://docs.python.org/library/exceptions.html#KeyboardInterrupt', 'text': 'KeyboardInterrupt', 'title': 'KeyboardInterrupt'}, {'href': 'https://docs.python.org/reference/compound_stmts.html#try', 'text': 'try', 'title': ''}, {'href': 'https://docs.python.org/reference/compound_stmts.html#except', 'text': 'except', 'title': ''}, {'href': 'https://docs.python.org/library/exceptions.html#BaseException', 'text': 'BaseException', 'title': 'BaseException'}, {'href': 'https://docs.python.org/reference/simple_stmts.html#raise', 'text': 'raise', 'title': ''}, {'href': 'https://docs.python.org/library/exceptions.html#Exception', 'text': 'Exception', 'title': 'Exception'}, {'href': 'https://docs.python.org/classes.html#tut-classes', 'text': 'Classes', 'title': ''}, {'href': 'https://docs.python.org/reference/compound_stmts.html#finally', 'text': 'finally', 'title': ''}, {'href': 'https://docs.python.org/reference/simple_stmts.html#break', 'text': 'break', 'title': ''}, {'href': 'https://docs.python.org/reference/simple_stmts.html#continue', 'text': 'continue', 'title': ''}, {'href': 'https://docs.python.org/reference/simple_stmts.html#return', 'text': 'return', 'title': ''}, {'href': 'https://docs.python.org/reference/compound_stmts.html#with', 'text': 'with', 'title': ''}, {'href': 'https://docs.python.org/copyright.html', 'text': 'Copyright', 'title': ''}, {'href': 'https://docs.python.org/license.html', 'text': 'History and License', 'title': ''}], 'external': [{'href': 'https://www.python.org/', 'text': '', 'title': ''}, {'href': 'https://github.com/python/cpython/blob/3.10/Doc/tutorial/errors.rst', 'text': 'Show Source', 'title': ''}, {'href': 'https://www.python.org/psf/donations/', 'text': 'Please donate.', 'title': ''}, {'href': 'https://www.sphinx-doc.org/', 'text': 'Sphinx', 'title': ''}]} screenshot=None markdown='[ ![Python logo](../_static/py.svg) ](https://www.python.org/) dev (3.14)pre (3.13)3.123.113.10.153.93.83.73.63.53.43.33.23.13.02.72.6\n\nEnglishSpanishFrenchItalianJapaneseKoreanBrazilian PortugueseTurkishSimplified ChineseTraditional Chinese\n\nTheme  Auto Light Dark\n\n### [Table of Contents](../contents.html)\n\n  * [8. Errors and Exceptions](#)\n    * [8.1. Syntax Errors](#syntax-errors)\n    * [8.2. Exceptions](#exceptions)\n    * [8.3. Handling Exceptions](#handling-exceptions)\n    * [8.4. Raising Exceptions](#raising-exceptions)\n    * [8.5. Exception Chaining](#exception-chaining)\n    * [8.6. User-defined Exceptions](#user-defined-exceptions)\n    * [8.7. Defining Clean-up Actions](#defining-clean-up-actions)\n    * [8.8. Predefined Clean-up Actions](#predefined-clean-up-actions)\n\n\n\n#### Previous topic\n\n[7. Input and Output](inputoutput.html "previous chapter")\n\n#### Next topic\n\n[9. Classes](classes.html "next chapter")\n\n### This Page\n\n  * [Report a Bug](../bugs.html)\n  * [Show Source ](https://github.com/python/cpython/blob/3.10/Doc/tutorial/errors.rst)\n\n\n\n### Navigation\n\n  * [index](../genindex.html "General Index")\n  * [modules](../py-modindex.html "Python Module Index") |\n  * [next](classes.html "9. Classes") |\n  * [previous](inputoutput.html "7. Input and Output") |\n  * ![Python logo](../_static/py.svg)\n  * [Python](https://www.python.org/) »\n  * EnglishSpanishFrenchItalianJapaneseKoreanBrazilian PortugueseTurkishSimplified ChineseTraditional Chinese\n\ndev (3.14)pre (3.13)3.123.113.10.153.93.83.73.63.53.43.33.23.13.02.72.6\n\n  * [3.10.15 Documentation](../index.html) » \n  * [The Python Tutorial](index.html) »\n  * [8. Errors and Exceptions]()\n  * | \n  * Theme  Auto Light Dark |\n\n\n\n# 8. Errors and Exceptions[¶](#errors-and-exceptions "Permalink to this headline")\n\nUntil now error messages haven’t been more than mentioned, but if you have tried out the examples you have probably seen some. There are (at least) two distinguishable kinds of errors: _syntax errors_ and _exceptions_.\n\n## 8.1. Syntax Errors[¶](#syntax-errors "Permalink to this headline")\n\nSyntax errors, also known as parsing errors, are perhaps the most common kind of complaint you get while you are still learning Python:\n\n>>>```\n\n    \n    \n    >>> while True print(\'Hello world\')\n     File "<stdin>", line 1\n    while True print(\'Hello world\')\n    ^\n    SyntaxError: invalid syntax\n    \n```\n\nThe parser repeats the offending line and displays a little ‘arrow’ pointing at the earliest point in the line where the error was detected. The error is caused by (or at least detected at) the token _preceding_ the arrow: in the example, the error is detected at the function [`print()`](../library/functions.html#print "print"), since a colon (`\':\'`) is missing before it. File name and line number are printed so you know where to look in case the input came from a script.\n\n## 8.2. Exceptions[¶](#exceptions "Permalink to this headline")\n\nEven if a statement or expression is syntactically correct, it may cause an error when an attempt is made to execute it. Errors detected during execution are called _exceptions_ and are not unconditionally fatal: you will soon learn how to handle them in Python programs. Most exceptions are not handled by programs, however, and result in error messages as shown here:\n\n>>>```\n\n    \n    \n    >>> 10 * (1/0)\n    Traceback (most recent call last):\n     File "<stdin>", line 1, in <module>\n    ZeroDivisionError: division by zero\n    >>> 4 + spam*3\n    Traceback (most recent call last):\n     File "<stdin>", line 1, in <module>\n    NameError: name \'spam\' is not defined\n    >>> \'2\' + 2\n    Traceback (most recent call last):\n     File "<stdin>", line 1, in <module>\n    TypeError: can only concatenate str (not "int") to str\n    \n```\n\nThe last line of the error message indicates what happened. Exceptions come in different types, and the type is printed as part of the message: the types in the example are [`ZeroDivisionError`](../library/exceptions.html#ZeroDivisionError "ZeroDivisionError"), [`NameError`](../library/exceptions.html#NameError "NameError") and [`TypeError`](../library/exceptions.html#TypeError "TypeError"). The string printed as the exception type is the name of the built-in exception that occurred. This is true for all built-in exceptions, but need not be true for user-defined exceptions (although it is a useful convention). Standard exception names are built-in identifiers (not reserved keywords).\n\nThe rest of the line provides detail based on the type of exception and what caused it.\n\nThe preceding part of the error message shows the context where the exception occurred, in the form of a stack traceback. In general it contains a stack traceback listing source lines; however, it will not display lines read from standard input.\n\n[Built-in Exceptions](../library/exceptions.html#bltin-exceptions) lists the built-in exceptions and their meanings.\n\n## 8.3. Handling Exceptions[¶](#handling-exceptions "Permalink to this headline")\n\nIt is possible to write programs that handle selected exceptions. Look at the following example, which asks the user for input until a valid integer has been entered, but allows the user to interrupt the program (using ``Control`-`C`` or whatever the operating system supports); note that a user-generated interruption is signalled by raising the [`KeyboardInterrupt`](../library/exceptions.html#KeyboardInterrupt "KeyboardInterrupt") exception.\n\n>>>```\n\n    \n    \n    >>> while True:\n    ...   try:\n    ...     x = int(input("Please enter a number: "))\n    ...     break\n    ...   except ValueError:\n    ...     print("Oops! That was no valid number. Try again...")\n    ...\n    \n```\n\nThe [`try`](../reference/compound_stmts.html#try) statement works as follows.\n\n  * First, the _try clause_ (the statement(s) between the [`try`](../reference/compound_stmts.html#try) and [`except`](../reference/compound_stmts.html#except) keywords) is executed.\n\n  * If no exception occurs, the _except clause_ is skipped and execution of the [`try`](../reference/compound_stmts.html#try) statement is finished.\n\n  * If an exception occurs during execution of the [`try`](../reference/compound_stmts.html#try) clause, the rest of the clause is skipped. Then, if its type matches the exception named after the [`except`](../reference/compound_stmts.html#except) keyword, the _except clause_ is executed, and then execution continues after the try/except block.\n\n  * If an exception occurs which does not match the exception named in the _except clause_ , it is passed on to outer [`try`](../reference/compound_stmts.html#try) statements; if no handler is found, it is an _unhandled exception_ and execution stops with a message as shown above.\n\n\n\n\nA [`try`](../reference/compound_stmts.html#try) statement may have more than one _except clause_ , to specify handlers for different exceptions. At most one handler will be executed. Handlers only handle exceptions that occur in the corresponding _try clause_ , not in other handlers of the same `try` statement. An _except clause_ may name multiple exceptions as a parenthesized tuple, for example:\n\n```\n\n    \n    \n    ... except (RuntimeError, TypeError, NameError):\n    ...   pass\n    \n```\n\nA class in an [`except`](../reference/compound_stmts.html#except) clause is compatible with an exception if it is the same class or a base class thereof (but not the other way around — an _except clause_ listing a derived class is not compatible with a base class). For example, the following code will print B, C, D in that order:\n\n```\n\n    \n    \n    class B(Exception):\n      pass\n    class C(B):\n      pass\n    class D(C):\n      pass\n    for cls in [B, C, D]:\n      try:\n        raise cls()\n      except D:\n        print("D")\n      except C:\n        print("C")\n      except B:\n        print("B")\n    \n```\n\nNote that if the _except clauses_ were reversed (with `except B` first), it would have printed B, B, B — the first matching _except clause_ is triggered.\n\nAll exceptions inherit from [`BaseException`](../library/exceptions.html#BaseException "BaseException"), and so it can be used to serve as a wildcard. Use this with extreme caution, since it is easy to mask a real programming error in this way! It can also be used to print an error message and then re-raise the exception (allowing a caller to handle the exception as well):\n\n```\n\n    \n    \n    import sys\n    try:\n      f = open(\'myfile.txt\')\n      s = f.readline()\n      i = int(s.strip())\n    except OSError as err:\n      print("OS error: {0}".format(err))\n    except ValueError:\n      print("Could not convert data to an integer.")\n    except BaseException as err:\n      print(f"Unexpected {err=}, {type(err)=}")\n      raise\n    \n```\n\nAlternatively the last except clause may omit the exception name(s), however the exception value must then be retrieved from `sys.exc_info()[1]`.\n\nThe [`try`](../reference/compound_stmts.html#try) … [`except`](../reference/compound_stmts.html#except) statement has an optional _else clause_ , which, when present, must follow all _except clauses_. It is useful for code that must be executed if the _try clause_ does not raise an exception. For example:\n\n```\n\n    \n    \n    for arg in sys.argv[1:]:\n      try:\n        f = open(arg, \'r\')\n      except OSError:\n        print(\'cannot open\', arg)\n      else:\n        print(arg, \'has\', len(f.readlines()), \'lines\')\n        f.close()\n    \n```\n\nThe use of the `else` clause is better than adding additional code to the [`try`](../reference/compound_stmts.html#try) clause because it avoids accidentally catching an exception that wasn’t raised by the code being protected by the `try` … `except` statement.\n\nWhen an exception occurs, it may have an associated value, also known as the exception’s _argument_. The presence and type of the argument depend on the exception type.\n\nThe _except clause_ may specify a variable after the exception name. The variable is bound to an exception instance with the arguments stored in `instance.args`. For convenience, the exception instance defines `__str__()` so the arguments can be printed directly without having to reference `.args`. One may also instantiate an exception first before raising it and add any attributes to it as desired.\n\n>>>```\n\n    \n    \n    >>> try:\n    ...   raise Exception(\'spam\', \'eggs\')\n    ... except Exception as inst:\n    ...   print(type(inst))  # the exception instance\n    ...   print(inst.args)   # arguments stored in .args\n    ...   print(inst)     # __str__ allows args to be printed directly,\n    ...              # but may be overridden in exception subclasses\n    ...   x, y = inst.args   # unpack args\n    ...   print(\'x =\', x)\n    ...   print(\'y =\', y)\n    ...\n    <class \'Exception\'>\n    (\'spam\', \'eggs\')\n    (\'spam\', \'eggs\')\n    x = spam\n    y = eggs\n    \n```\n\nIf an exception has arguments, they are printed as the last part (‘detail’) of the message for unhandled exceptions.\n\nException handlers don’t just handle exceptions if they occur immediately in the _try clause_ , but also if they occur inside functions that are called (even indirectly) in the _try clause_. For example:\n\n>>>```\n\n    \n    \n    >>> def this_fails():\n    ...   x = 1/0\n    ...\n    >>> try:\n    ...   this_fails()\n    ... except ZeroDivisionError as err:\n    ...   print(\'Handling run-time error:\', err)\n    ...\n    Handling run-time error: division by zero\n    \n```\n\n## 8.4. Raising Exceptions[¶](#raising-exceptions "Permalink to this headline")\n\nThe [`raise`](../reference/simple_stmts.html#raise) statement allows the programmer to force a specified exception to occur. For example:\n\n>>>```\n\n    \n    \n    >>> raise NameError(\'HiThere\')\n    Traceback (most recent call last):\n     File "<stdin>", line 1, in <module>\n    NameError: HiThere\n    \n```\n\nThe sole argument to [`raise`](../reference/simple_stmts.html#raise) indicates the exception to be raised. This must be either an exception instance or an exception class (a class that derives from [`Exception`](../library/exceptions.html#Exception "Exception")). If an exception class is passed, it will be implicitly instantiated by calling its constructor with no arguments:\n\n```\n\n    \n    \n    raise ValueError # shorthand for \'raise ValueError()\'\n    \n```\n\nIf you need to determine whether an exception was raised but don’t intend to handle it, a simpler form of the [`raise`](../reference/simple_stmts.html#raise) statement allows you to re-raise the exception:\n\n>>>```\n\n    \n    \n    >>> try:\n    ...   raise NameError(\'HiThere\')\n    ... except NameError:\n    ...   print(\'An exception flew by!\')\n    ...   raise\n    ...\n    An exception flew by!\n    Traceback (most recent call last):\n     File "<stdin>", line 2, in <module>\n    NameError: HiThere\n    \n```\n\n## 8.5. Exception Chaining[¶](#exception-chaining "Permalink to this headline")\n\nIf an unhandled exception occurs inside an [`except`](../reference/compound_stmts.html#except) section, it will have the exception being handled attached to it and included in the error message:\n\n>>>```\n\n    \n    \n    >>> try:\n    ...   open("database.sqlite")\n    ... except OSError:\n    ...   raise RuntimeError("unable to handle error")\n    ...\n    Traceback (most recent call last):\n     File "<stdin>", line 2, in <module>\n    FileNotFoundError: [Errno 2] No such file or directory: \'database.sqlite\'\n    During handling of the above exception, another exception occurred:\n    Traceback (most recent call last):\n     File "<stdin>", line 4, in <module>\n    RuntimeError: unable to handle error\n    \n```\n\nTo indicate that an exception is a direct consequence of another, the [`raise`](../reference/simple_stmts.html#raise) statement allows an optional [`from`](../reference/simple_stmts.html#raise) clause:\n\n```\n\n    \n    \n    # exc must be exception instance or None.\n    raise RuntimeError from exc\n    \n```\n\nThis can be useful when you are transforming exceptions. For example:\n\n>>>```\n\n    \n    \n    >>> def func():\n    ...   raise ConnectionError\n    ...\n    >>> try:\n    ...   func()\n    ... except ConnectionError as exc:\n    ...   raise RuntimeError(\'Failed to open database\') from exc\n    ...\n    Traceback (most recent call last):\n     File "<stdin>", line 2, in <module>\n     File "<stdin>", line 2, in func\n    ConnectionError\n    The above exception was the direct cause of the following exception:\n    Traceback (most recent call last):\n     File "<stdin>", line 4, in <module>\n    RuntimeError: Failed to open database\n    \n```\n\nIt also allows disabling automatic exception chaining using the `from None` idiom:\n\n>>>```\n\n    \n    \n    >>> try:\n    ...   open(\'database.sqlite\')\n    ... except OSError:\n    ...   raise RuntimeError from None\n    ...\n    Traceback (most recent call last):\n     File "<stdin>", line 4, in <module>\n    RuntimeError\n    \n```\n\nFor more information about chaining mechanics, see [Built-in Exceptions](../library/exceptions.html#bltin-exceptions).\n\n## 8.6. User-defined Exceptions[¶](#user-defined-exceptions "Permalink to this headline")\n\nPrograms may name their own exceptions by creating a new exception class (see [Classes](classes.html#tut-classes) for more about Python classes). Exceptions should typically be derived from the [`Exception`](../library/exceptions.html#Exception "Exception") class, either directly or indirectly.\n\nException classes can be defined which do anything any other class can do, but are usually kept simple, often only offering a number of attributes that allow information about the error to be extracted by handlers for the exception.\n\nMost exceptions are defined with names that end in “Error”, similar to the naming of the standard exceptions.\n\nMany standard modules define their own exceptions to report errors that may occur in functions they define. More information on classes is presented in chapter [Classes](classes.html#tut-classes).\n\n## 8.7. Defining Clean-up Actions[¶](#defining-clean-up-actions "Permalink to this headline")\n\nThe [`try`](../reference/compound_stmts.html#try) statement has another optional clause which is intended to define clean-up actions that must be executed under all circumstances. For example:\n\n>>>```\n\n    \n    \n    >>> try:\n    ...   raise KeyboardInterrupt\n    ... finally:\n    ...   print(\'Goodbye, world!\')\n    ...\n    Goodbye, world!\n    Traceback (most recent call last):\n     File "<stdin>", line 2, in <module>\n    KeyboardInterrupt\n    \n```\n\nIf a [`finally`](../reference/compound_stmts.html#finally) clause is present, the `finally` clause will execute as the last task before the [`try`](../reference/compound_stmts.html#try) statement completes. The `finally` clause runs whether or not the `try` statement produces an exception. The following points discuss more complex cases when an exception occurs:\n\n  * If an exception occurs during execution of the `try` clause, the exception may be handled by an [`except`](../reference/compound_stmts.html#except) clause. If the exception is not handled by an `except` clause, the exception is re-raised after the `finally` clause has been executed.\n\n  * An exception could occur during execution of an `except` or `else` clause. Again, the exception is re-raised after the `finally` clause has been executed.\n\n  * If the `finally` clause executes a [`break`](../reference/simple_stmts.html#break), [`continue`](../reference/simple_stmts.html#continue) or [`return`](../reference/simple_stmts.html#return) statement, exceptions are not re-raised.\n\n  * If the `try` statement reaches a [`break`](../reference/simple_stmts.html#break), [`continue`](../reference/simple_stmts.html#continue) or [`return`](../reference/simple_stmts.html#return) statement, the `finally` clause will execute just prior to the `break`, `continue` or `return` statement’s execution.\n\n  * If a `finally` clause includes a `return` statement, the returned value will be the one from the `finally` clause’s `return` statement, not the value from the `try` clause’s `return` statement.\n\n\n\n\nFor example:\n\n>>>```\n\n    \n    \n    >>> def bool_return():\n    ...   try:\n    ...     return True\n    ...   finally:\n    ...     return False\n    ...\n    >>> bool_return()\n    False\n    \n```\n\nA more complicated example:\n\n>>>```\n\n    \n    \n    >>> def divide(x, y):\n    ...   try:\n    ...     result = x / y\n    ...   except ZeroDivisionError:\n    ...     print("division by zero!")\n    ...   else:\n    ...     print("result is", result)\n    ...   finally:\n    ...     print("executing finally clause")\n    ...\n    >>> divide(2, 1)\n    result is 2.0\n    executing finally clause\n    >>> divide(2, 0)\n    division by zero!\n    executing finally clause\n    >>> divide("2", "1")\n    executing finally clause\n    Traceback (most recent call last):\n     File "<stdin>", line 1, in <module>\n     File "<stdin>", line 3, in divide\n    TypeError: unsupported operand type(s) for /: \'str\' and \'str\'\n    \n```\n\nAs you can see, the [`finally`](../reference/compound_stmts.html#finally) clause is executed in any event. The [`TypeError`](../library/exceptions.html#TypeError "TypeError") raised by dividing two strings is not handled by the [`except`](../reference/compound_stmts.html#except) clause and therefore re-raised after the `finally` clause has been executed.\n\nIn real world applications, the [`finally`](../reference/compound_stmts.html#finally) clause is useful for releasing external resources (such as files or network connections), regardless of whether the use of the resource was successful.\n\n## 8.8. Predefined Clean-up Actions[¶](#predefined-clean-up-actions "Permalink to this headline")\n\nSome objects define standard clean-up actions to be undertaken when the object is no longer needed, regardless of whether or not the operation using the object succeeded or failed. Look at the following example, which tries to open a file and print its contents to the screen.\n\n```\n\n    \n    \n    for line in open("myfile.txt"):\n      print(line, end="")\n    \n```\n\nThe problem with this code is that it leaves the file open for an indeterminate amount of time after this part of the code has finished executing. This is not an issue in simple scripts, but can be a problem for larger applications. The [`with`](../reference/compound_stmts.html#with) statement allows objects like files to be used in a way that ensures they are always cleaned up promptly and correctly.\n\n```\n\n    \n    \n    with open("myfile.txt") as f:\n      for line in f:\n        print(line, end="")\n    \n```\n\nAfter the statement is executed, the file _f_ is always closed, even if a problem was encountered while processing the lines. Objects which, like files, provide predefined clean-up actions will indicate this in their documentation.\n\n### [Table of Contents](../contents.html)\n\n  * [8. Errors and Exceptions](#)\n    * [8.1. Syntax Errors](#syntax-errors)\n    * [8.2. Exceptions](#exceptions)\n    * [8.3. Handling Exceptions](#handling-exceptions)\n    * [8.4. Raising Exceptions](#raising-exceptions)\n    * [8.5. Exception Chaining](#exception-chaining)\n    * [8.6. User-defined Exceptions](#user-defined-exceptions)\n    * [8.7. Defining Clean-up Actions](#defining-clean-up-actions)\n    * [8.8. Predefined Clean-up Actions](#predefined-clean-up-actions)\n\n\n\n#### Previous topic\n\n[7. Input and Output](inputoutput.html "previous chapter")\n\n#### Next topic\n\n[9. Classes](classes.html "next chapter")\n\n### This Page\n\n  * [Report a Bug](../bugs.html)\n  * [Show Source ](https://github.com/python/cpython/blob/3.10/Doc/tutorial/errors.rst)\n\n\n\n«\n\n### Navigation\n\n  * [index](../genindex.html "General Index")\n  * [modules](../py-modindex.html "Python Module Index") |\n  * [next](classes.html "9. Classes") |\n  * [previous](inputoutput.html "7. Input and Output") |\n  * ![Python logo](../_static/py.svg)\n  * [Python](https://www.python.org/) »\n  * EnglishSpanishFrenchItalianJapaneseKoreanBrazilian PortugueseTurkishSimplified ChineseTraditional Chinese\n\ndev (3.14)pre (3.13)3.123.113.10.153.93.83.73.63.53.43.33.23.13.02.72.6\n\n  * [3.10.15 Documentation](../index.html) » \n  * [The Python Tutorial](index.html) »\n  * [8. Errors and Exceptions]()\n  * | \n  * Theme  Auto Light Dark |\n\n\n\n© [ Copyright ](../copyright.html) 2001-2024, Python Software Foundation. This page is licensed under the Python Software Foundation License Version 2. Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License. See [History and License](/license.html) for more information. The Python Software Foundation is a non-profit corporation. [Please donate.](https://www.python.org/psf/donations/) Last updated on Sep 09, 2024. [Found a bug](/bugs.html)? Created using [Sphinx](https://www.sphinx-doc.org/) 3.4.3. \n' fit_markdown='## 8.1. Syntax Errors[¶](#syntax-errors "Permalink to this headline")\n\nSyntax errors, also known as parsing errors, are perhaps the most common kind of complaint you get while you are still learning Python:\n\n>>>```\n\n    \n    \n    >>> while True print(\'Hello world\')\n     File "<stdin>", line 1\n    while True print(\'Hello world\')\n    ^\n    SyntaxError: invalid syntax\n    \n    ```\n\nThe parser repeats the offending line and displays a little ‘arrow’ pointing at the earliest point in the line where the error was detected. The error is caused by (or at least detected at) the token _preceding_ the arrow: in the example, the error is detected at the function [`print()`](../library/functions.html#print "print"), since a colon (`\':\'`) is missing before it. File name and line number are printed so you know where to look in case the input came from a script.\n' fit_html='<section>\n<h2><span>8.1. </span>Syntax Errors<a href="#syntax-errors" title="Permalink to this headline">¶</a></h2>\n<p>Syntax errors, also known as parsing errors, are perhaps the most common kind of\ncomplaint you get while you are still learning Python:</p>\n<div><div><span title="Hide the prompts and output">&gt;&gt;&gt;</span><pre><span>&gt;&gt;&gt; </span><span>while</span> <span>True</span> <span>print</span><span>(</span><span>\'Hello world\'</span><span>)</span>\n File <span>"&lt;stdin&gt;"</span>, line <span>1</span>\n<span>while</span> <span>True</span> <span>print</span><span>(</span><span>\'Hello world\'</span><span>)</span>\n<span>^</span>\n<span>SyntaxError</span>: <span>invalid syntax</span>\n</pre></div>\n</div>\n<p>The parser repeats the offending line and displays a little ‘arrow’ pointing at\nthe earliest point in the line where the error was detected. The error is\ncaused by (or at least detected at) the token <em>preceding</em> the arrow: in the\nexample, the error is detected at the function <a href="../library/functions.html#print" title="print"><code><span>print()</span></code></a>, since a colon\n(<code><span>\':\'</span></code>) is missing before it. File name and line number are printed so you\nknow where to look in case the input came from a script.</p>\n</section>' extracted_content='[\n    {\n        "index": 0,\n        "tags": [],\n        "content": "[ ![Python logo](../_static/py.svg) ](https://www.python.org/) dev (3.14)pre (3.13)3.123.113.10.153.93.83.73.63.53.43.33.23.13.02.72.6"\n    },\n    {\n        "index": 1,\n        "tags": [],\n        "content": "EnglishSpanishFrenchItalianJapaneseKoreanBrazilian PortugueseTurkishSimplified ChineseTraditional Chinese"\n    },\n    {\n        "index": 2,\n        "tags": [],\n        "content": "Theme  Auto Light Dark"\n    },\n    {\n        "index": 3,\n        "tags": [],\n        "content": "### [Table of Contents](../contents.html)"\n    },\n    {\n        "index": 4,\n        "tags": [],\n        "content": "  * [8. Errors and Exceptions](#)\\n    * [8.1. Syntax Errors](#syntax-errors)\\n    * [8.2. Exceptions](#exceptions)\\n    * [8.3. Handling Exceptions](#handling-exceptions)\\n    * [8.4. Raising Exceptions](#raising-exceptions)\\n    * [8.5. Exception Chaining](#exception-chaining)\\n    * [8.6. User-defined Exceptions](#user-defined-exceptions)\\n    * [8.7. Defining Clean-up Actions](#defining-clean-up-actions)\\n    * [8.8. Predefined Clean-up Actions](#predefined-clean-up-actions)"\n    },\n    {\n        "index": 5,\n        "tags": [],\n        "content": ""\n    },\n    {\n        "index": 6,\n        "tags": [],\n        "content": "#### Previous topic"\n    },\n    {\n        "index": 7,\n        "tags": [],\n        "content": "[7. Input and Output](inputoutput.html \\"previous chapter\\")"\n    },\n    {\n        "index": 8,\n        "tags": [],\n        "content": "#### Next topic"\n    },\n    {\n        "index": 9,\n        "tags": [],\n        "content": "[9. Classes](classes.html \\"next chapter\\")"\n    },\n    {\n        "index": 10,\n        "tags": [],\n        "content": "### This Page"\n    },\n    {\n        "index": 11,\n        "tags": [],\n        "content": "  * [Report a Bug](../bugs.html)\\n  * [Show Source ](https://github.com/python/cpython/blob/3.10/Doc/tutorial/errors.rst)"\n    },\n    {\n        "index": 12,\n        "tags": [],\n        "content": ""\n    },\n    {\n        "index": 13,\n        "tags": [],\n        "content": "### Navigation"\n    },\n    {\n        "index": 14,\n        "tags": [],\n        "content": "  * [index](../genindex.html \\"General Index\\")\\n  * [modules](../py-modindex.html \\"Python Module Index\\") |\\n  * [next](classes.html \\"9. Classes\\") |\\n  * [previous](inputoutput.html \\"7. Input and Output\\") |\\n  * ![Python logo](../_static/py.svg)\\n  * [Python](https://www.python.org/) »\\n  * EnglishSpanishFrenchItalianJapaneseKoreanBrazilian PortugueseTurkishSimplified ChineseTraditional Chinese"\n    },\n    {\n        "index": 15,\n        "tags": [],\n        "content": "dev (3.14)pre (3.13)3.123.113.10.153.93.83.73.63.53.43.33.23.13.02.72.6"\n    },\n    {\n        "index": 16,\n        "tags": [],\n        "content": "  * [3.10.15 Documentation](../index.html) » \\n  * [The Python Tutorial](index.html) »\\n  * [8. Errors and Exceptions]()\\n  * | \\n  * Theme  Auto Light Dark |"\n    },\n    {\n        "index": 17,\n        "tags": [],\n        "content": ""\n    },\n    {\n        "index": 18,\n        "tags": [],\n        "content": "# 8. Errors and Exceptions[¶](#errors-and-exceptions \\"Permalink to this headline\\")"\n    },\n    {\n        "index": 19,\n        "tags": [],\n        "content": "Until now error messages haven’t been more than mentioned, but if you have tried out the examples you have probably seen some. There are (at least) two distinguishable kinds of errors: _syntax errors_ and _exceptions_."\n    },\n    {\n        "index": 20,\n        "tags": [],\n        "content": "## 8.1. Syntax Errors[¶](#syntax-errors \\"Permalink to this headline\\")"\n    },\n    {\n        "index": 21,\n        "tags": [],\n        "content": "Syntax errors, also known as parsing errors, are perhaps the most common kind of complaint you get while you are still learning Python:"\n    },\n    {\n        "index": 22,\n        "tags": [],\n        "content": ">>>```"\n    },\n    {\n        "index": 23,\n        "tags": [],\n        "content": "    \\n    \\n    >>> while True print(\'Hello world\')\\n     File \\"<stdin>\\", line 1\\n    while True print(\'Hello world\')\\n    ^\\n    SyntaxError: invalid syntax\\n    \\n```"\n    },\n    {\n        "index": 24,\n        "tags": [],\n        "content": "The parser repeats the offending line and displays a little ‘arrow’ pointing at the earliest point in the line where the error was detected. The error is caused by (or at least detected at) the token _preceding_ the arrow: in the example, the error is detected at the function [`print()`](../library/functions.html#print \\"print\\"), since a colon (`\':\'`) is missing before it. File name and line number are printed so you know where to look in case the input came from a script."\n    },\n    {\n        "index": 25,\n        "tags": [],\n        "content": "## 8.2. Exceptions[¶](#exceptions \\"Permalink to this headline\\")"\n    },\n    {\n        "index": 26,\n        "tags": [],\n        "content": "Even if a statement or expression is syntactically correct, it may cause an error when an attempt is made to execute it. Errors detected during execution are called _exceptions_ and are not unconditionally fatal: you will soon learn how to handle them in Python programs. Most exceptions are not handled by programs, however, and result in error messages as shown here:"\n    },\n    {\n        "index": 27,\n        "tags": [],\n        "content": ">>>```"\n    },\n    {\n        "index": 28,\n        "tags": [],\n        "content": "    \\n    \\n    >>> 10 * (1/0)\\n    Traceback (most recent call last):\\n     File \\"<stdin>\\", line 1, in <module>\\n    ZeroDivisionError: division by zero\\n    >>> 4 + spam*3\\n    Traceback (most recent call last):\\n     File \\"<stdin>\\", line 1, in <module>\\n    NameError: name \'spam\' is not defined\\n    >>> \'2\' + 2\\n    Traceback (most recent call last):\\n     File \\"<stdin>\\", line 1, in <module>\\n    TypeError: can only concatenate str (not \\"int\\") to str\\n    \\n```"\n    },\n    {\n        "index": 29,\n        "tags": [],\n        "content": "The last line of the error message indicates what happened. Exceptions come in different types, and the type is printed as part of the message: the types in the example are [`ZeroDivisionError`](../library/exceptions.html#ZeroDivisionError \\"ZeroDivisionError\\"), [`NameError`](../library/exceptions.html#NameError \\"NameError\\") and [`TypeError`](../library/exceptions.html#TypeError \\"TypeError\\"). The string printed as the exception type is the name of the built-in exception that occurred. This is true for all built-in exceptions, but need not be true for user-defined exceptions (although it is a useful convention). Standard exception names are built-in identifiers (not reserved keywords)."\n    },\n    {\n        "index": 30,\n        "tags": [],\n        "content": "The rest of the line provides detail based on the type of exception and what caused it."\n    },\n    {\n        "index": 31,\n        "tags": [],\n        "content": "The preceding part of the error message shows the context where the exception occurred, in the form of a stack traceback. In general it contains a stack traceback listing source lines; however, it will not display lines read from standard input."\n    },\n    {\n        "index": 32,\n        "tags": [],\n        "content": "[Built-in Exceptions](../library/exceptions.html#bltin-exceptions) lists the built-in exceptions and their meanings."\n    },\n    {\n        "index": 33,\n        "tags": [],\n        "content": "## 8.3. Handling Exceptions[¶](#handling-exceptions \\"Permalink to this headline\\")"\n    },\n    {\n        "index": 34,\n        "tags": [],\n        "content": "It is possible to write programs that handle selected exceptions. Look at the following example, which asks the user for input until a valid integer has been entered, but allows the user to interrupt the program (using ``Control`-`C`` or whatever the operating system supports); note that a user-generated interruption is signalled by raising the [`KeyboardInterrupt`](../library/exceptions.html#KeyboardInterrupt \\"KeyboardInterrupt\\") exception."\n    },\n    {\n        "index": 35,\n        "tags": [],\n        "content": ">>>```"\n    },\n    {\n        "index": 36,\n        "tags": [],\n        "content": "    \\n    \\n    >>> while True:\\n    ...   try:\\n    ...     x = int(input(\\"Please enter a number: \\"))\\n    ...     break\\n    ...   except ValueError:\\n    ...     print(\\"Oops! That was no valid number. Try again...\\")\\n    ...\\n    \\n```"\n    },\n    {\n        "index": 37,\n        "tags": [],\n        "content": "The [`try`](../reference/compound_stmts.html#try) statement works as follows."\n    },\n    {\n        "index": 38,\n        "tags": [],\n        "content": "  * First, the _try clause_ (the statement(s) between the [`try`](../reference/compound_stmts.html#try) and [`except`](../reference/compound_stmts.html#except) keywords) is executed."\n    },\n    {\n        "index": 39,\n        "tags": [],\n        "content": "  * If no exception occurs, the _except clause_ is skipped and execution of the [`try`](../reference/compound_stmts.html#try) statement is finished."\n    },\n    {\n        "index": 40,\n        "tags": [],\n        "content": "  * If an exception occurs during execution of the [`try`](../reference/compound_stmts.html#try) clause, the rest of the clause is skipped. Then, if its type matches the exception named after the [`except`](../reference/compound_stmts.html#except) keyword, the _except clause_ is executed, and then execution continues after the try/except block."\n    },\n    {\n        "index": 41,\n        "tags": [],\n        "content": "  * If an exception occurs which does not match the exception named in the _except clause_ , it is passed on to outer [`try`](../reference/compound_stmts.html#try) statements; if no handler is found, it is an _unhandled exception_ and execution stops with a message as shown above."\n    },\n    {\n        "index": 42,\n        "tags": [],\n        "content": ""\n    },\n    {\n        "index": 43,\n        "tags": [],\n        "content": "\\nA [`try`](../reference/compound_stmts.html#try) statement may have more than one _except clause_ , to specify handlers for different exceptions. At most one handler will be executed. Handlers only handle exceptions that occur in the corresponding _try clause_ , not in other handlers of the same `try` statement. An _except clause_ may name multiple exceptions as a parenthesized tuple, for example:"\n    },\n    {\n        "index": 44,\n        "tags": [],\n        "content": "```"\n    },\n    {\n        "index": 45,\n        "tags": [],\n        "content": "    \\n    \\n    ... except (RuntimeError, TypeError, NameError):\\n    ...   pass\\n    \\n```"\n    },\n    {\n        "index": 46,\n        "tags": [],\n        "content": "A class in an [`except`](../reference/compound_stmts.html#except) clause is compatible with an exception if it is the same class or a base class thereof (but not the other way around — an _except clause_ listing a derived class is not compatible with a base class). For example, the following code will print B, C, D in that order:"\n    },\n    {\n        "index": 47,\n        "tags": [],\n        "content": "```"\n    },\n    {\n        "index": 48,\n        "tags": [],\n        "content": "    \\n    \\n    class B(Exception):\\n      pass\\n    class C(B):\\n      pass\\n    class D(C):\\n      pass\\n    for cls in [B, C, D]:\\n      try:\\n        raise cls()\\n      except D:\\n        print(\\"D\\")\\n      except C:\\n        print(\\"C\\")\\n      except B:\\n        print(\\"B\\")\\n    \\n```"\n    },\n    {\n        "index": 49,\n        "tags": [],\n        "content": "Note that if the _except clauses_ were reversed (with `except B` first), it would have printed B, B, B — the first matching _except clause_ is triggered."\n    },\n    {\n        "index": 50,\n        "tags": [],\n        "content": "All exceptions inherit from [`BaseException`](../library/exceptions.html#BaseException \\"BaseException\\"), and so it can be used to serve as a wildcard. Use this with extreme caution, since it is easy to mask a real programming error in this way! It can also be used to print an error message and then re-raise the exception (allowing a caller to handle the exception as well):"\n    },\n    {\n        "index": 51,\n        "tags": [],\n        "content": "```"\n    },\n    {\n        "index": 52,\n        "tags": [],\n        "content": "    \\n    \\n    import sys\\n    try:\\n      f = open(\'myfile.txt\')\\n      s = f.readline()\\n      i = int(s.strip())\\n    except OSError as err:\\n      print(\\"OS error: {0}\\".format(err))\\n    except ValueError:\\n      print(\\"Could not convert data to an integer.\\")\\n    except BaseException as err:\\n      print(f\\"Unexpected {err=}, {type(err)=}\\")\\n      raise\\n    \\n```"\n    },\n    {\n        "index": 53,\n        "tags": [],\n        "content": "Alternatively the last except clause may omit the exception name(s), however the exception value must then be retrieved from `sys.exc_info()[1]`."\n    },\n    {\n        "index": 54,\n        "tags": [],\n        "content": "The [`try`](../reference/compound_stmts.html#try) … [`except`](../reference/compound_stmts.html#except) statement has an optional _else clause_ , which, when present, must follow all _except clauses_. It is useful for code that must be executed if the _try clause_ does not raise an exception. For example:"\n    },\n    {\n        "index": 55,\n        "tags": [],\n        "content": "```"\n    },\n    {\n        "index": 56,\n        "tags": [],\n        "content": "    \\n    \\n    for arg in sys.argv[1:]:\\n      try:\\n        f = open(arg, \'r\')\\n      except OSError:\\n        print(\'cannot open\', arg)\\n      else:\\n        print(arg, \'has\', len(f.readlines()), \'lines\')\\n        f.close()\\n    \\n```"\n    },\n    {\n        "index": 57,\n        "tags": [],\n        "content": "The use of the `else` clause is better than adding additional code to the [`try`](../reference/compound_stmts.html#try) clause because it avoids accidentally catching an exception that wasn’t raised by the code being protected by the `try` … `except` statement."\n    },\n    {\n        "index": 58,\n        "tags": [],\n        "content": "When an exception occurs, it may have an associated value, also known as the exception’s _argument_. The presence and type of the argument depend on the exception type."\n    },\n    {\n        "index": 59,\n        "tags": [],\n        "content": "The _except clause_ may specify a variable after the exception name. The variable is bound to an exception instance with the arguments stored in `instance.args`. For convenience, the exception instance defines `__str__()` so the arguments can be printed directly without having to reference `.args`. One may also instantiate an exception first before raising it and add any attributes to it as desired."\n    },\n    {\n        "index": 60,\n        "tags": [],\n        "content": ">>>```"\n    },\n    {\n        "index": 61,\n        "tags": [],\n        "content": "    \\n    \\n    >>> try:\\n    ...   raise Exception(\'spam\', \'eggs\')\\n    ... except Exception as inst:\\n    ...   print(type(inst))  # the exception instance\\n    ...   print(inst.args)   # arguments stored in .args\\n    ...   print(inst)     # __str__ allows args to be printed directly,\\n    ...              # but may be overridden in exception subclasses\\n    ...   x, y = inst.args   # unpack args\\n    ...   print(\'x =\', x)\\n    ...   print(\'y =\', y)\\n    ...\\n    <class \'Exception\'>\\n    (\'spam\', \'eggs\')\\n    (\'spam\', \'eggs\')\\n    x = spam\\n    y = eggs\\n    \\n```"\n    },\n    {\n        "index": 62,\n        "tags": [],\n        "content": "If an exception has arguments, they are printed as the last part (‘detail’) of the message for unhandled exceptions."\n    },\n    {\n        "index": 63,\n        "tags": [],\n        "content": "Exception handlers don’t just handle exceptions if they occur immediately in the _try clause_ , but also if they occur inside functions that are called (even indirectly) in the _try clause_. For example:"\n    },\n    {\n        "index": 64,\n        "tags": [],\n        "content": ">>>```"\n    },\n    {\n        "index": 65,\n        "tags": [],\n        "content": "    \\n    \\n    >>> def this_fails():\\n    ...   x = 1/0\\n    ...\\n    >>> try:\\n    ...   this_fails()\\n    ... except ZeroDivisionError as err:\\n    ...   print(\'Handling run-time error:\', err)\\n    ...\\n    Handling run-time error: division by zero\\n    \\n```"\n    },\n    {\n        "index": 66,\n        "tags": [],\n        "content": "## 8.4. Raising Exceptions[¶](#raising-exceptions \\"Permalink to this headline\\")"\n    },\n    {\n        "index": 67,\n        "tags": [],\n        "content": "The [`raise`](../reference/simple_stmts.html#raise) statement allows the programmer to force a specified exception to occur. For example:"\n    },\n    {\n        "index": 68,\n        "tags": [],\n        "content": ">>>```"\n    },\n    {\n        "index": 69,\n        "tags": [],\n        "content": "    \\n    \\n    >>> raise NameError(\'HiThere\')\\n    Traceback (most recent call last):\\n     File \\"<stdin>\\", line 1, in <module>\\n    NameError: HiThere\\n    \\n```"\n    },\n    {\n        "index": 70,\n        "tags": [],\n        "content": "The sole argument to [`raise`](../reference/simple_stmts.html#raise) indicates the exception to be raised. This must be either an exception instance or an exception class (a class that derives from [`Exception`](../library/exceptions.html#Exception \\"Exception\\")). If an exception class is passed, it will be implicitly instantiated by calling its constructor with no arguments:"\n    },\n    {\n        "index": 71,\n        "tags": [],\n        "content": "```"\n    },\n    {\n        "index": 72,\n        "tags": [],\n        "content": "    \\n    \\n    raise ValueError # shorthand for \'raise ValueError()\'\\n    \\n```"\n    },\n    {\n        "index": 73,\n        "tags": [],\n        "content": "If you need to determine whether an exception was raised but don’t intend to handle it, a simpler form of the [`raise`](../reference/simple_stmts.html#raise) statement allows you to re-raise the exception:"\n    },\n    {\n        "index": 74,\n        "tags": [],\n        "content": ">>>```"\n    },\n    {\n        "index": 75,\n        "tags": [],\n        "content": "    \\n    \\n    >>> try:\\n    ...   raise NameError(\'HiThere\')\\n    ... except NameError:\\n    ...   print(\'An exception flew by!\')\\n    ...   raise\\n    ...\\n    An exception flew by!\\n    Traceback (most recent call last):\\n     File \\"<stdin>\\", line 2, in <module>\\n    NameError: HiThere\\n    \\n```"\n    },\n    {\n        "index": 76,\n        "tags": [],\n        "content": "## 8.5. Exception Chaining[¶](#exception-chaining \\"Permalink to this headline\\")"\n    },\n    {\n        "index": 77,\n        "tags": [],\n        "content": "If an unhandled exception occurs inside an [`except`](../reference/compound_stmts.html#except) section, it will have the exception being handled attached to it and included in the error message:"\n    },\n    {\n        "index": 78,\n        "tags": [],\n        "content": ">>>```"\n    },\n    {\n        "index": 79,\n        "tags": [],\n        "content": "    \\n    \\n    >>> try:\\n    ...   open(\\"database.sqlite\\")\\n    ... except OSError:\\n    ...   raise RuntimeError(\\"unable to handle error\\")\\n    ...\\n    Traceback (most recent call last):\\n     File \\"<stdin>\\", line 2, in <module>\\n    FileNotFoundError: [Errno 2] No such file or directory: \'database.sqlite\'\\n    During handling of the above exception, another exception occurred:\\n    Traceback (most recent call last):\\n     File \\"<stdin>\\", line 4, in <module>\\n    RuntimeError: unable to handle error\\n    \\n```"\n    },\n    {\n        "index": 80,\n        "tags": [],\n        "content": "To indicate that an exception is a direct consequence of another, the [`raise`](../reference/simple_stmts.html#raise) statement allows an optional [`from`](../reference/simple_stmts.html#raise) clause:"\n    },\n    {\n        "index": 81,\n        "tags": [],\n        "content": "```"\n    },\n    {\n        "index": 82,\n        "tags": [],\n        "content": "    \\n    \\n    # exc must be exception instance or None.\\n    raise RuntimeError from exc\\n    \\n```"\n    },\n    {\n        "index": 83,\n        "tags": [],\n        "content": "This can be useful when you are transforming exceptions. For example:"\n    },\n    {\n        "index": 84,\n        "tags": [],\n        "content": ">>>```"\n    },\n    {\n        "index": 85,\n        "tags": [],\n        "content": "    \\n    \\n    >>> def func():\\n    ...   raise ConnectionError\\n    ...\\n    >>> try:\\n    ...   func()\\n    ... except ConnectionError as exc:\\n    ...   raise RuntimeError(\'Failed to open database\') from exc\\n    ...\\n    Traceback (most recent call last):\\n     File \\"<stdin>\\", line 2, in <module>\\n     File \\"<stdin>\\", line 2, in func\\n    ConnectionError\\n    The above exception was the direct cause of the following exception:\\n    Traceback (most recent call last):\\n     File \\"<stdin>\\", line 4, in <module>\\n    RuntimeError: Failed to open database\\n    \\n```"\n    },\n    {\n        "index": 86,\n        "tags": [],\n        "content": "It also allows disabling automatic exception chaining using the `from None` idiom:"\n    },\n    {\n        "index": 87,\n        "tags": [],\n        "content": ">>>```"\n    },\n    {\n        "index": 88,\n        "tags": [],\n        "content": "    \\n    \\n    >>> try:\\n    ...   open(\'database.sqlite\')\\n    ... except OSError:\\n    ...   raise RuntimeError from None\\n    ...\\n    Traceback (most recent call last):\\n     File \\"<stdin>\\", line 4, in <module>\\n    RuntimeError\\n    \\n```"\n    },\n    {\n        "index": 89,\n        "tags": [],\n        "content": "For more information about chaining mechanics, see [Built-in Exceptions](../library/exceptions.html#bltin-exceptions)."\n    },\n    {\n        "index": 90,\n        "tags": [],\n        "content": "## 8.6. User-defined Exceptions[¶](#user-defined-exceptions \\"Permalink to this headline\\")"\n    },\n    {\n        "index": 91,\n        "tags": [],\n        "content": "Programs may name their own exceptions by creating a new exception class (see [Classes](classes.html#tut-classes) for more about Python classes). Exceptions should typically be derived from the [`Exception`](../library/exceptions.html#Exception \\"Exception\\") class, either directly or indirectly."\n    },\n    {\n        "index": 92,\n        "tags": [],\n        "content": "Exception classes can be defined which do anything any other class can do, but are usually kept simple, often only offering a number of attributes that allow information about the error to be extracted by handlers for the exception."\n    },\n    {\n        "index": 93,\n        "tags": [],\n        "content": "Most exceptions are defined with names that end in “Error”, similar to the naming of the standard exceptions."\n    },\n    {\n        "index": 94,\n        "tags": [],\n        "content": "Many standard modules define their own exceptions to report errors that may occur in functions they define. More information on classes is presented in chapter [Classes](classes.html#tut-classes)."\n    },\n    {\n        "index": 95,\n        "tags": [],\n        "content": "## 8.7. Defining Clean-up Actions[¶](#defining-clean-up-actions \\"Permalink to this headline\\")"\n    },\n    {\n        "index": 96,\n        "tags": [],\n        "content": "The [`try`](../reference/compound_stmts.html#try) statement has another optional clause which is intended to define clean-up actions that must be executed under all circumstances. For example:"\n    },\n    {\n        "index": 97,\n        "tags": [],\n        "content": ">>>```"\n    },\n    {\n        "index": 98,\n        "tags": [],\n        "content": "    \\n    \\n    >>> try:\\n    ...   raise KeyboardInterrupt\\n    ... finally:\\n    ...   print(\'Goodbye, world!\')\\n    ...\\n    Goodbye, world!\\n    Traceback (most recent call last):\\n     File \\"<stdin>\\", line 2, in <module>\\n    KeyboardInterrupt\\n    \\n```"\n    },\n    {\n        "index": 99,\n        "tags": [],\n        "content": "If a [`finally`](../reference/compound_stmts.html#finally) clause is present, the `finally` clause will execute as the last task before the [`try`](../reference/compound_stmts.html#try) statement completes. The `finally` clause runs whether or not the `try` statement produces an exception. The following points discuss more complex cases when an exception occurs:"\n    },\n    {\n        "index": 100,\n        "tags": [],\n        "content": "  * If an exception occurs during execution of the `try` clause, the exception may be handled by an [`except`](../reference/compound_stmts.html#except) clause. If the exception is not handled by an `except` clause, the exception is re-raised after the `finally` clause has been executed."\n    },\n    {\n        "index": 101,\n        "tags": [],\n        "content": "  * An exception could occur during execution of an `except` or `else` clause. Again, the exception is re-raised after the `finally` clause has been executed."\n    },\n    {\n        "index": 102,\n        "tags": [],\n        "content": "  * If the `finally` clause executes a [`break`](../reference/simple_stmts.html#break), [`continue`](../reference/simple_stmts.html#continue) or [`return`](../reference/simple_stmts.html#return) statement, exceptions are not re-raised."\n    },\n    {\n        "index": 103,\n        "tags": [],\n        "content": "  * If the `try` statement reaches a [`break`](../reference/simple_stmts.html#break), [`continue`](../reference/simple_stmts.html#continue) or [`return`](../reference/simple_stmts.html#return) statement, the `finally` clause will execute just prior to the `break`, `continue` or `return` statement’s execution."\n    },\n    {\n        "index": 104,\n        "tags": [],\n        "content": "  * If a `finally` clause includes a `return` statement, the returned value will be the one from the `finally` clause’s `return` statement, not the value from the `try` clause’s `return` statement."\n    },\n    {\n        "index": 105,\n        "tags": [],\n        "content": ""\n    },\n    {\n        "index": 106,\n        "tags": [],\n        "content": "\\nFor example:"\n    },\n    {\n        "index": 107,\n        "tags": [],\n        "content": ">>>```"\n    },\n    {\n        "index": 108,\n        "tags": [],\n        "content": "    \\n    \\n    >>> def bool_return():\\n    ...   try:\\n    ...     return True\\n    ...   finally:\\n    ...     return False\\n    ...\\n    >>> bool_return()\\n    False\\n    \\n```"\n    },\n    {\n        "index": 109,\n        "tags": [],\n        "content": "A more complicated example:"\n    },\n    {\n        "index": 110,\n        "tags": [],\n        "content": ">>>```"\n    },\n    {\n        "index": 111,\n        "tags": [],\n        "content": "    \\n    \\n    >>> def divide(x, y):\\n    ...   try:\\n    ...     result = x / y\\n    ...   except ZeroDivisionError:\\n    ...     print(\\"division by zero!\\")\\n    ...   else:\\n    ...     print(\\"result is\\", result)\\n    ...   finally:\\n    ...     print(\\"executing finally clause\\")\\n    ...\\n    >>> divide(2, 1)\\n    result is 2.0\\n    executing finally clause\\n    >>> divide(2, 0)\\n    division by zero!\\n    executing finally clause\\n    >>> divide(\\"2\\", \\"1\\")\\n    executing finally clause\\n    Traceback (most recent call last):\\n     File \\"<stdin>\\", line 1, in <module>\\n     File \\"<stdin>\\", line 3, in divide\\n    TypeError: unsupported operand type(s) for /: \'str\' and \'str\'\\n    \\n```"\n    },\n    {\n        "index": 112,\n        "tags": [],\n        "content": "As you can see, the [`finally`](../reference/compound_stmts.html#finally) clause is executed in any event. The [`TypeError`](../library/exceptions.html#TypeError \\"TypeError\\") raised by dividing two strings is not handled by the [`except`](../reference/compound_stmts.html#except) clause and therefore re-raised after the `finally` clause has been executed."\n    },\n    {\n        "index": 113,\n        "tags": [],\n        "content": "In real world applications, the [`finally`](../reference/compound_stmts.html#finally) clause is useful for releasing external resources (such as files or network connections), regardless of whether the use of the resource was successful."\n    },\n    {\n        "index": 114,\n        "tags": [],\n        "content": "## 8.8. Predefined Clean-up Actions[¶](#predefined-clean-up-actions \\"Permalink to this headline\\")"\n    },\n    {\n        "index": 115,\n        "tags": [],\n        "content": "Some objects define standard clean-up actions to be undertaken when the object is no longer needed, regardless of whether or not the operation using the object succeeded or failed. Look at the following example, which tries to open a file and print its contents to the screen."\n    },\n    {\n        "index": 116,\n        "tags": [],\n        "content": "```"\n    },\n    {\n        "index": 117,\n        "tags": [],\n        "content": "    \\n    \\n    for line in open(\\"myfile.txt\\"):\\n      print(line, end=\\"\\")\\n    \\n```"\n    },\n    {\n        "index": 118,\n        "tags": [],\n        "content": "The problem with this code is that it leaves the file open for an indeterminate amount of time after this part of the code has finished executing. This is not an issue in simple scripts, but can be a problem for larger applications. The [`with`](../reference/compound_stmts.html#with) statement allows objects like files to be used in a way that ensures they are always cleaned up promptly and correctly."\n    },\n    {\n        "index": 119,\n        "tags": [],\n        "content": "```"\n    },\n    {\n        "index": 120,\n        "tags": [],\n        "content": "    \\n    \\n    with open(\\"myfile.txt\\") as f:\\n      for line in f:\\n        print(line, end=\\"\\")\\n    \\n```"\n    },\n    {\n        "index": 121,\n        "tags": [],\n        "content": "After the statement is executed, the file _f_ is always closed, even if a problem was encountered while processing the lines. Objects which, like files, provide predefined clean-up actions will indicate this in their documentation."\n    },\n    {\n        "index": 122,\n        "tags": [],\n        "content": "### [Table of Contents](../contents.html)"\n    },\n    {\n        "index": 123,\n        "tags": [],\n        "content": "  * [8. Errors and Exceptions](#)\\n    * [8.1. Syntax Errors](#syntax-errors)\\n    * [8.2. Exceptions](#exceptions)\\n    * [8.3. Handling Exceptions](#handling-exceptions)\\n    * [8.4. Raising Exceptions](#raising-exceptions)\\n    * [8.5. Exception Chaining](#exception-chaining)\\n    * [8.6. User-defined Exceptions](#user-defined-exceptions)\\n    * [8.7. Defining Clean-up Actions](#defining-clean-up-actions)\\n    * [8.8. Predefined Clean-up Actions](#predefined-clean-up-actions)"\n    },\n    {\n        "index": 124,\n        "tags": [],\n        "content": ""\n    },\n    {\n        "index": 125,\n        "tags": [],\n        "content": "#### Previous topic"\n    },\n    {\n        "index": 126,\n        "tags": [],\n        "content": "[7. Input and Output](inputoutput.html \\"previous chapter\\")"\n    },\n    {\n        "index": 127,\n        "tags": [],\n        "content": "#### Next topic"\n    },\n    {\n        "index": 128,\n        "tags": [],\n        "content": "[9. Classes](classes.html \\"next chapter\\")"\n    },\n    {\n        "index": 129,\n        "tags": [],\n        "content": "### This Page"\n    },\n    {\n        "index": 130,\n        "tags": [],\n        "content": "  * [Report a Bug](../bugs.html)\\n  * [Show Source ](https://github.com/python/cpython/blob/3.10/Doc/tutorial/errors.rst)"\n    },\n    {\n        "index": 131,\n        "tags": [],\n        "content": ""\n    },\n    {\n        "index": 132,\n        "tags": [],\n        "content": "«"\n    },\n    {\n        "index": 133,\n        "tags": [],\n        "content": "### Navigation"\n    },\n    {\n        "index": 134,\n        "tags": [],\n        "content": "  * [index](../genindex.html \\"General Index\\")\\n  * [modules](../py-modindex.html \\"Python Module Index\\") |\\n  * [next](classes.html \\"9. Classes\\") |\\n  * [previous](inputoutput.html \\"7. Input and Output\\") |\\n  * ![Python logo](../_static/py.svg)\\n  * [Python](https://www.python.org/) »\\n  * EnglishSpanishFrenchItalianJapaneseKoreanBrazilian PortugueseTurkishSimplified ChineseTraditional Chinese"\n    },\n    {\n        "index": 135,\n        "tags": [],\n        "content": "dev (3.14)pre (3.13)3.123.113.10.153.93.83.73.63.53.43.33.23.13.02.72.6"\n    },\n    {\n        "index": 136,\n        "tags": [],\n        "content": "  * [3.10.15 Documentation](../index.html) » \\n  * [The Python Tutorial](index.html) »\\n  * [8. Errors and Exceptions]()\\n  * | \\n  * Theme  Auto Light Dark |"\n    },\n    {\n        "index": 137,\n        "tags": [],\n        "content": ""\n    },\n    {\n        "index": 138,\n        "tags": [],\n        "content": "© [ Copyright ](../copyright.html) 2001-2024, Python Software Foundation. This page is licensed under the Python Software Foundation License Version 2. Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License. See [History and License](/license.html) for more information. The Python Software Foundation is a non-profit corporation. [Please donate.](https://www.python.org/psf/donations/) Last updated on Sep 09, 2024. [Found a bug](/bugs.html)? Created using [Sphinx](https://www.sphinx-doc.org/) 3.4.3. \\n"\n    }\n]' metadata={'title': '8. Errors and Exceptions — Python 3.10.15 documentation', 'description': None, 'keywords': None, 'author': None} error_message='' session_id=None response_headers={'accept-ranges': 'bytes', 'age': '0', 'content-encoding': 'gzip', 'content-length': '10979', 'content-type': 'text/html', 'date': 'Sat, 02 Nov 2024 08:47:06 GMT', 'etag': '"66df0138-ede8"', 'last-modified': 'Mon, 09 Sep 2024 14:07:52 GMT', 'server': 'nginx', 'strict-transport-security': 'max-age=315360000; includeSubDomains; preload', 'vary': 'Accept-Encoding', 'via': '1.1 varnish, 1.1 varnish', 'x-cache': 'HIT, MISS', 'x-cache-hits': '3, 0', 'x-clacks-overhead': 'GNU Terry Pratchett', 'x-served-by': 'cache-lga21929-LGA, cache-del21724-DEL', 'x-timer': 'S1730537226.370526,VS0,VE234'} status_code=200